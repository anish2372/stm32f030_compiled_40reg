
stm32f030_compiled_40reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c98  08005c98  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c98  08005c98  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c98  08005c98  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c98  08005c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c9c  08005c9c  00006c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ca0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000000c  08005cac  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  2000034c  08005cac  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008651  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4f  00000000  00000000  0000f685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  000111d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000656  00000000  00000000  00011a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fade  00000000  00000000  00012076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfe6  00000000  00000000  00021b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c6e0  00000000  00000000  0002db3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0008a21a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e64  00000000  00000000  0008a2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0008c104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bc4 	.word	0x08005bc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005bc4 	.word	0x08005bc4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fe30 	bl	8000e8c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fd99 	bl	8000d68 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fbef 	bl	8000a20 <__aeabi_fsub>
 8000242:	f000 fd91 	bl	8000d68 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	46ce      	mov	lr, r9
 8000254:	4647      	mov	r7, r8
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5a      	lsrs	r2, r3, #9
 800025a:	024e      	lsls	r6, r1, #9
 800025c:	0045      	lsls	r5, r0, #1
 800025e:	0fc4      	lsrs	r4, r0, #31
 8000260:	0048      	lsls	r0, r1, #1
 8000262:	4691      	mov	r9, r2
 8000264:	0e2d      	lsrs	r5, r5, #24
 8000266:	0a72      	lsrs	r2, r6, #9
 8000268:	0e00      	lsrs	r0, r0, #24
 800026a:	4694      	mov	ip, r2
 800026c:	b580      	push	{r7, lr}
 800026e:	099b      	lsrs	r3, r3, #6
 8000270:	0fc9      	lsrs	r1, r1, #31
 8000272:	09b6      	lsrs	r6, r6, #6
 8000274:	1a2a      	subs	r2, r5, r0
 8000276:	428c      	cmp	r4, r1
 8000278:	d021      	beq.n	80002be <__aeabi_fadd+0x6e>
 800027a:	2a00      	cmp	r2, #0
 800027c:	dd0d      	ble.n	800029a <__aeabi_fadd+0x4a>
 800027e:	2800      	cmp	r0, #0
 8000280:	d12d      	bne.n	80002de <__aeabi_fadd+0x8e>
 8000282:	2e00      	cmp	r6, #0
 8000284:	d100      	bne.n	8000288 <__aeabi_fadd+0x38>
 8000286:	e08d      	b.n	80003a4 <__aeabi_fadd+0x154>
 8000288:	1e51      	subs	r1, r2, #1
 800028a:	2a01      	cmp	r2, #1
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x40>
 800028e:	e11d      	b.n	80004cc <__aeabi_fadd+0x27c>
 8000290:	2aff      	cmp	r2, #255	@ 0xff
 8000292:	d100      	bne.n	8000296 <__aeabi_fadd+0x46>
 8000294:	e0ab      	b.n	80003ee <__aeabi_fadd+0x19e>
 8000296:	000a      	movs	r2, r1
 8000298:	e027      	b.n	80002ea <__aeabi_fadd+0x9a>
 800029a:	2a00      	cmp	r2, #0
 800029c:	d04d      	beq.n	800033a <__aeabi_fadd+0xea>
 800029e:	1b42      	subs	r2, r0, r5
 80002a0:	2d00      	cmp	r5, #0
 80002a2:	d000      	beq.n	80002a6 <__aeabi_fadd+0x56>
 80002a4:	e0cc      	b.n	8000440 <__aeabi_fadd+0x1f0>
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d100      	bne.n	80002ac <__aeabi_fadd+0x5c>
 80002aa:	e079      	b.n	80003a0 <__aeabi_fadd+0x150>
 80002ac:	1e54      	subs	r4, r2, #1
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	d100      	bne.n	80002b4 <__aeabi_fadd+0x64>
 80002b2:	e128      	b.n	8000506 <__aeabi_fadd+0x2b6>
 80002b4:	2aff      	cmp	r2, #255	@ 0xff
 80002b6:	d100      	bne.n	80002ba <__aeabi_fadd+0x6a>
 80002b8:	e097      	b.n	80003ea <__aeabi_fadd+0x19a>
 80002ba:	0022      	movs	r2, r4
 80002bc:	e0c5      	b.n	800044a <__aeabi_fadd+0x1fa>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	dc00      	bgt.n	80002c4 <__aeabi_fadd+0x74>
 80002c2:	e096      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d04f      	beq.n	8000368 <__aeabi_fadd+0x118>
 80002c8:	2dff      	cmp	r5, #255	@ 0xff
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0x7e>
 80002cc:	e08f      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	04c9      	lsls	r1, r1, #19
 80002d2:	430e      	orrs	r6, r1
 80002d4:	2a1b      	cmp	r2, #27
 80002d6:	dd51      	ble.n	800037c <__aeabi_fadd+0x12c>
 80002d8:	002a      	movs	r2, r5
 80002da:	3301      	adds	r3, #1
 80002dc:	e018      	b.n	8000310 <__aeabi_fadd+0xc0>
 80002de:	2dff      	cmp	r5, #255	@ 0xff
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fadd+0x94>
 80002e2:	e084      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002e4:	2180      	movs	r1, #128	@ 0x80
 80002e6:	04c9      	lsls	r1, r1, #19
 80002e8:	430e      	orrs	r6, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	2a1b      	cmp	r2, #27
 80002ee:	dc08      	bgt.n	8000302 <__aeabi_fadd+0xb2>
 80002f0:	0031      	movs	r1, r6
 80002f2:	2020      	movs	r0, #32
 80002f4:	40d1      	lsrs	r1, r2
 80002f6:	1a82      	subs	r2, r0, r2
 80002f8:	4096      	lsls	r6, r2
 80002fa:	0032      	movs	r2, r6
 80002fc:	1e50      	subs	r0, r2, #1
 80002fe:	4182      	sbcs	r2, r0
 8000300:	4311      	orrs	r1, r2
 8000302:	1a5b      	subs	r3, r3, r1
 8000304:	015a      	lsls	r2, r3, #5
 8000306:	d459      	bmi.n	80003bc <__aeabi_fadd+0x16c>
 8000308:	2107      	movs	r1, #7
 800030a:	002a      	movs	r2, r5
 800030c:	4019      	ands	r1, r3
 800030e:	d049      	beq.n	80003a4 <__aeabi_fadd+0x154>
 8000310:	210f      	movs	r1, #15
 8000312:	4019      	ands	r1, r3
 8000314:	2904      	cmp	r1, #4
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0xca>
 8000318:	3304      	adds	r3, #4
 800031a:	0159      	lsls	r1, r3, #5
 800031c:	d542      	bpl.n	80003a4 <__aeabi_fadd+0x154>
 800031e:	1c50      	adds	r0, r2, #1
 8000320:	2afe      	cmp	r2, #254	@ 0xfe
 8000322:	d03a      	beq.n	800039a <__aeabi_fadd+0x14a>
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	b2c0      	uxtb	r0, r0
 8000328:	0a5b      	lsrs	r3, r3, #9
 800032a:	05c0      	lsls	r0, r0, #23
 800032c:	4318      	orrs	r0, r3
 800032e:	07e4      	lsls	r4, r4, #31
 8000330:	4320      	orrs	r0, r4
 8000332:	bcc0      	pop	{r6, r7}
 8000334:	46b9      	mov	r9, r7
 8000336:	46b0      	mov	r8, r6
 8000338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800033a:	20fe      	movs	r0, #254	@ 0xfe
 800033c:	4680      	mov	r8, r0
 800033e:	1c6f      	adds	r7, r5, #1
 8000340:	0038      	movs	r0, r7
 8000342:	4647      	mov	r7, r8
 8000344:	4207      	tst	r7, r0
 8000346:	d000      	beq.n	800034a <__aeabi_fadd+0xfa>
 8000348:	e08e      	b.n	8000468 <__aeabi_fadd+0x218>
 800034a:	2d00      	cmp	r5, #0
 800034c:	d000      	beq.n	8000350 <__aeabi_fadd+0x100>
 800034e:	e0b4      	b.n	80004ba <__aeabi_fadd+0x26a>
 8000350:	2b00      	cmp	r3, #0
 8000352:	d100      	bne.n	8000356 <__aeabi_fadd+0x106>
 8000354:	e0db      	b.n	800050e <__aeabi_fadd+0x2be>
 8000356:	2e00      	cmp	r6, #0
 8000358:	d06c      	beq.n	8000434 <__aeabi_fadd+0x1e4>
 800035a:	1b98      	subs	r0, r3, r6
 800035c:	0145      	lsls	r5, r0, #5
 800035e:	d400      	bmi.n	8000362 <__aeabi_fadd+0x112>
 8000360:	e0f7      	b.n	8000552 <__aeabi_fadd+0x302>
 8000362:	000c      	movs	r4, r1
 8000364:	1af3      	subs	r3, r6, r3
 8000366:	e03d      	b.n	80003e4 <__aeabi_fadd+0x194>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d01b      	beq.n	80003a4 <__aeabi_fadd+0x154>
 800036c:	1e51      	subs	r1, r2, #1
 800036e:	2a01      	cmp	r2, #1
 8000370:	d100      	bne.n	8000374 <__aeabi_fadd+0x124>
 8000372:	e082      	b.n	800047a <__aeabi_fadd+0x22a>
 8000374:	2aff      	cmp	r2, #255	@ 0xff
 8000376:	d03a      	beq.n	80003ee <__aeabi_fadd+0x19e>
 8000378:	000a      	movs	r2, r1
 800037a:	e7ab      	b.n	80002d4 <__aeabi_fadd+0x84>
 800037c:	0031      	movs	r1, r6
 800037e:	2020      	movs	r0, #32
 8000380:	40d1      	lsrs	r1, r2
 8000382:	1a82      	subs	r2, r0, r2
 8000384:	4096      	lsls	r6, r2
 8000386:	0032      	movs	r2, r6
 8000388:	1e50      	subs	r0, r2, #1
 800038a:	4182      	sbcs	r2, r0
 800038c:	430a      	orrs	r2, r1
 800038e:	189b      	adds	r3, r3, r2
 8000390:	015a      	lsls	r2, r3, #5
 8000392:	d5b9      	bpl.n	8000308 <__aeabi_fadd+0xb8>
 8000394:	1c6a      	adds	r2, r5, #1
 8000396:	2dfe      	cmp	r5, #254	@ 0xfe
 8000398:	d175      	bne.n	8000486 <__aeabi_fadd+0x236>
 800039a:	20ff      	movs	r0, #255	@ 0xff
 800039c:	2300      	movs	r3, #0
 800039e:	e7c4      	b.n	800032a <__aeabi_fadd+0xda>
 80003a0:	000c      	movs	r4, r1
 80003a2:	0033      	movs	r3, r6
 80003a4:	08db      	lsrs	r3, r3, #3
 80003a6:	2aff      	cmp	r2, #255	@ 0xff
 80003a8:	d146      	bne.n	8000438 <__aeabi_fadd+0x1e8>
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f5      	beq.n	800039a <__aeabi_fadd+0x14a>
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	03d2      	lsls	r2, r2, #15
 80003b2:	4313      	orrs	r3, r2
 80003b4:	025b      	lsls	r3, r3, #9
 80003b6:	20ff      	movs	r0, #255	@ 0xff
 80003b8:	0a5b      	lsrs	r3, r3, #9
 80003ba:	e7b6      	b.n	800032a <__aeabi_fadd+0xda>
 80003bc:	019f      	lsls	r7, r3, #6
 80003be:	09bf      	lsrs	r7, r7, #6
 80003c0:	0038      	movs	r0, r7
 80003c2:	f000 fd6d 	bl	8000ea0 <__clzsi2>
 80003c6:	3805      	subs	r0, #5
 80003c8:	4087      	lsls	r7, r0
 80003ca:	4285      	cmp	r5, r0
 80003cc:	dc24      	bgt.n	8000418 <__aeabi_fadd+0x1c8>
 80003ce:	003b      	movs	r3, r7
 80003d0:	2120      	movs	r1, #32
 80003d2:	1b42      	subs	r2, r0, r5
 80003d4:	3201      	adds	r2, #1
 80003d6:	40d3      	lsrs	r3, r2
 80003d8:	1a8a      	subs	r2, r1, r2
 80003da:	4097      	lsls	r7, r2
 80003dc:	1e7a      	subs	r2, r7, #1
 80003de:	4197      	sbcs	r7, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	433b      	orrs	r3, r7
 80003e4:	0759      	lsls	r1, r3, #29
 80003e6:	d193      	bne.n	8000310 <__aeabi_fadd+0xc0>
 80003e8:	e797      	b.n	800031a <__aeabi_fadd+0xca>
 80003ea:	000c      	movs	r4, r1
 80003ec:	0033      	movs	r3, r6
 80003ee:	08db      	lsrs	r3, r3, #3
 80003f0:	e7db      	b.n	80003aa <__aeabi_fadd+0x15a>
 80003f2:	2a00      	cmp	r2, #0
 80003f4:	d014      	beq.n	8000420 <__aeabi_fadd+0x1d0>
 80003f6:	1b42      	subs	r2, r0, r5
 80003f8:	2d00      	cmp	r5, #0
 80003fa:	d14b      	bne.n	8000494 <__aeabi_fadd+0x244>
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0d0      	beq.n	80003a2 <__aeabi_fadd+0x152>
 8000400:	1e51      	subs	r1, r2, #1
 8000402:	2a01      	cmp	r2, #1
 8000404:	d100      	bne.n	8000408 <__aeabi_fadd+0x1b8>
 8000406:	e09e      	b.n	8000546 <__aeabi_fadd+0x2f6>
 8000408:	2aff      	cmp	r2, #255	@ 0xff
 800040a:	d0ef      	beq.n	80003ec <__aeabi_fadd+0x19c>
 800040c:	000a      	movs	r2, r1
 800040e:	2a1b      	cmp	r2, #27
 8000410:	dd5f      	ble.n	80004d2 <__aeabi_fadd+0x282>
 8000412:	0002      	movs	r2, r0
 8000414:	1c73      	adds	r3, r6, #1
 8000416:	e77b      	b.n	8000310 <__aeabi_fadd+0xc0>
 8000418:	4b50      	ldr	r3, [pc, #320]	@ (800055c <__aeabi_fadd+0x30c>)
 800041a:	1a2a      	subs	r2, r5, r0
 800041c:	403b      	ands	r3, r7
 800041e:	e7e1      	b.n	80003e4 <__aeabi_fadd+0x194>
 8000420:	21fe      	movs	r1, #254	@ 0xfe
 8000422:	1c6a      	adds	r2, r5, #1
 8000424:	4211      	tst	r1, r2
 8000426:	d13b      	bne.n	80004a0 <__aeabi_fadd+0x250>
 8000428:	2d00      	cmp	r5, #0
 800042a:	d15d      	bne.n	80004e8 <__aeabi_fadd+0x298>
 800042c:	2b00      	cmp	r3, #0
 800042e:	d07f      	beq.n	8000530 <__aeabi_fadd+0x2e0>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d17f      	bne.n	8000534 <__aeabi_fadd+0x2e4>
 8000434:	2200      	movs	r2, #0
 8000436:	08db      	lsrs	r3, r3, #3
 8000438:	025b      	lsls	r3, r3, #9
 800043a:	0a5b      	lsrs	r3, r3, #9
 800043c:	b2d0      	uxtb	r0, r2
 800043e:	e774      	b.n	800032a <__aeabi_fadd+0xda>
 8000440:	28ff      	cmp	r0, #255	@ 0xff
 8000442:	d0d2      	beq.n	80003ea <__aeabi_fadd+0x19a>
 8000444:	2480      	movs	r4, #128	@ 0x80
 8000446:	04e4      	lsls	r4, r4, #19
 8000448:	4323      	orrs	r3, r4
 800044a:	2401      	movs	r4, #1
 800044c:	2a1b      	cmp	r2, #27
 800044e:	dc07      	bgt.n	8000460 <__aeabi_fadd+0x210>
 8000450:	001c      	movs	r4, r3
 8000452:	2520      	movs	r5, #32
 8000454:	40d4      	lsrs	r4, r2
 8000456:	1aaa      	subs	r2, r5, r2
 8000458:	4093      	lsls	r3, r2
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	4193      	sbcs	r3, r2
 800045e:	431c      	orrs	r4, r3
 8000460:	1b33      	subs	r3, r6, r4
 8000462:	0005      	movs	r5, r0
 8000464:	000c      	movs	r4, r1
 8000466:	e74d      	b.n	8000304 <__aeabi_fadd+0xb4>
 8000468:	1b9f      	subs	r7, r3, r6
 800046a:	017a      	lsls	r2, r7, #5
 800046c:	d422      	bmi.n	80004b4 <__aeabi_fadd+0x264>
 800046e:	2f00      	cmp	r7, #0
 8000470:	d1a6      	bne.n	80003c0 <__aeabi_fadd+0x170>
 8000472:	2400      	movs	r4, #0
 8000474:	2000      	movs	r0, #0
 8000476:	2300      	movs	r3, #0
 8000478:	e757      	b.n	800032a <__aeabi_fadd+0xda>
 800047a:	199b      	adds	r3, r3, r6
 800047c:	2501      	movs	r5, #1
 800047e:	3201      	adds	r2, #1
 8000480:	0159      	lsls	r1, r3, #5
 8000482:	d400      	bmi.n	8000486 <__aeabi_fadd+0x236>
 8000484:	e740      	b.n	8000308 <__aeabi_fadd+0xb8>
 8000486:	2101      	movs	r1, #1
 8000488:	4835      	ldr	r0, [pc, #212]	@ (8000560 <__aeabi_fadd+0x310>)
 800048a:	4019      	ands	r1, r3
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	4003      	ands	r3, r0
 8000490:	430b      	orrs	r3, r1
 8000492:	e7a7      	b.n	80003e4 <__aeabi_fadd+0x194>
 8000494:	28ff      	cmp	r0, #255	@ 0xff
 8000496:	d0a9      	beq.n	80003ec <__aeabi_fadd+0x19c>
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	04c9      	lsls	r1, r1, #19
 800049c:	430b      	orrs	r3, r1
 800049e:	e7b6      	b.n	800040e <__aeabi_fadd+0x1be>
 80004a0:	2aff      	cmp	r2, #255	@ 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fadd+0x256>
 80004a4:	e779      	b.n	800039a <__aeabi_fadd+0x14a>
 80004a6:	199b      	adds	r3, r3, r6
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	0759      	lsls	r1, r3, #29
 80004ac:	d000      	beq.n	80004b0 <__aeabi_fadd+0x260>
 80004ae:	e72f      	b.n	8000310 <__aeabi_fadd+0xc0>
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	e7c1      	b.n	8000438 <__aeabi_fadd+0x1e8>
 80004b4:	000c      	movs	r4, r1
 80004b6:	1af7      	subs	r7, r6, r3
 80004b8:	e782      	b.n	80003c0 <__aeabi_fadd+0x170>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d12c      	bne.n	8000518 <__aeabi_fadd+0x2c8>
 80004be:	2e00      	cmp	r6, #0
 80004c0:	d193      	bne.n	80003ea <__aeabi_fadd+0x19a>
 80004c2:	2380      	movs	r3, #128	@ 0x80
 80004c4:	2400      	movs	r4, #0
 80004c6:	20ff      	movs	r0, #255	@ 0xff
 80004c8:	03db      	lsls	r3, r3, #15
 80004ca:	e72e      	b.n	800032a <__aeabi_fadd+0xda>
 80004cc:	2501      	movs	r5, #1
 80004ce:	1b9b      	subs	r3, r3, r6
 80004d0:	e718      	b.n	8000304 <__aeabi_fadd+0xb4>
 80004d2:	0019      	movs	r1, r3
 80004d4:	2520      	movs	r5, #32
 80004d6:	40d1      	lsrs	r1, r2
 80004d8:	1aaa      	subs	r2, r5, r2
 80004da:	4093      	lsls	r3, r2
 80004dc:	1e5a      	subs	r2, r3, #1
 80004de:	4193      	sbcs	r3, r2
 80004e0:	430b      	orrs	r3, r1
 80004e2:	0005      	movs	r5, r0
 80004e4:	199b      	adds	r3, r3, r6
 80004e6:	e753      	b.n	8000390 <__aeabi_fadd+0x140>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x29e>
 80004ec:	e77e      	b.n	80003ec <__aeabi_fadd+0x19c>
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x2a4>
 80004f2:	e77c      	b.n	80003ee <__aeabi_fadd+0x19e>
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	03d2      	lsls	r2, r2, #15
 80004f8:	4591      	cmp	r9, r2
 80004fa:	d302      	bcc.n	8000502 <__aeabi_fadd+0x2b2>
 80004fc:	4594      	cmp	ip, r2
 80004fe:	d200      	bcs.n	8000502 <__aeabi_fadd+0x2b2>
 8000500:	0033      	movs	r3, r6
 8000502:	08db      	lsrs	r3, r3, #3
 8000504:	e753      	b.n	80003ae <__aeabi_fadd+0x15e>
 8000506:	000c      	movs	r4, r1
 8000508:	1af3      	subs	r3, r6, r3
 800050a:	3501      	adds	r5, #1
 800050c:	e6fa      	b.n	8000304 <__aeabi_fadd+0xb4>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d0af      	beq.n	8000472 <__aeabi_fadd+0x222>
 8000512:	000c      	movs	r4, r1
 8000514:	0033      	movs	r3, r6
 8000516:	e78d      	b.n	8000434 <__aeabi_fadd+0x1e4>
 8000518:	2e00      	cmp	r6, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x2ce>
 800051c:	e767      	b.n	80003ee <__aeabi_fadd+0x19e>
 800051e:	2280      	movs	r2, #128	@ 0x80
 8000520:	03d2      	lsls	r2, r2, #15
 8000522:	4591      	cmp	r9, r2
 8000524:	d3ed      	bcc.n	8000502 <__aeabi_fadd+0x2b2>
 8000526:	4594      	cmp	ip, r2
 8000528:	d2eb      	bcs.n	8000502 <__aeabi_fadd+0x2b2>
 800052a:	000c      	movs	r4, r1
 800052c:	0033      	movs	r3, r6
 800052e:	e7e8      	b.n	8000502 <__aeabi_fadd+0x2b2>
 8000530:	0033      	movs	r3, r6
 8000532:	e77f      	b.n	8000434 <__aeabi_fadd+0x1e4>
 8000534:	199b      	adds	r3, r3, r6
 8000536:	2200      	movs	r2, #0
 8000538:	0159      	lsls	r1, r3, #5
 800053a:	d5b9      	bpl.n	80004b0 <__aeabi_fadd+0x260>
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <__aeabi_fadd+0x30c>)
 800053e:	4013      	ands	r3, r2
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	2201      	movs	r2, #1
 8000544:	e778      	b.n	8000438 <__aeabi_fadd+0x1e8>
 8000546:	199b      	adds	r3, r3, r6
 8000548:	3201      	adds	r2, #1
 800054a:	3501      	adds	r5, #1
 800054c:	0159      	lsls	r1, r3, #5
 800054e:	d49a      	bmi.n	8000486 <__aeabi_fadd+0x236>
 8000550:	e6da      	b.n	8000308 <__aeabi_fadd+0xb8>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d08d      	beq.n	8000472 <__aeabi_fadd+0x222>
 8000556:	08db      	lsrs	r3, r3, #3
 8000558:	e76e      	b.n	8000438 <__aeabi_fadd+0x1e8>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	fbffffff 	.word	0xfbffffff
 8000560:	7dffffff 	.word	0x7dffffff

08000564 <__aeabi_fdiv>:
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	464f      	mov	r7, r9
 8000568:	4646      	mov	r6, r8
 800056a:	46d6      	mov	lr, sl
 800056c:	0244      	lsls	r4, r0, #9
 800056e:	b5c0      	push	{r6, r7, lr}
 8000570:	0047      	lsls	r7, r0, #1
 8000572:	1c0e      	adds	r6, r1, #0
 8000574:	0a64      	lsrs	r4, r4, #9
 8000576:	0e3f      	lsrs	r7, r7, #24
 8000578:	0fc5      	lsrs	r5, r0, #31
 800057a:	2f00      	cmp	r7, #0
 800057c:	d03c      	beq.n	80005f8 <__aeabi_fdiv+0x94>
 800057e:	2fff      	cmp	r7, #255	@ 0xff
 8000580:	d042      	beq.n	8000608 <__aeabi_fdiv+0xa4>
 8000582:	2300      	movs	r3, #0
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	4699      	mov	r9, r3
 8000588:	469a      	mov	sl, r3
 800058a:	00e4      	lsls	r4, r4, #3
 800058c:	04d2      	lsls	r2, r2, #19
 800058e:	4314      	orrs	r4, r2
 8000590:	3f7f      	subs	r7, #127	@ 0x7f
 8000592:	0273      	lsls	r3, r6, #9
 8000594:	0a5b      	lsrs	r3, r3, #9
 8000596:	4698      	mov	r8, r3
 8000598:	0073      	lsls	r3, r6, #1
 800059a:	0e1b      	lsrs	r3, r3, #24
 800059c:	0ff6      	lsrs	r6, r6, #31
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d01b      	beq.n	80005da <__aeabi_fdiv+0x76>
 80005a2:	2bff      	cmp	r3, #255	@ 0xff
 80005a4:	d013      	beq.n	80005ce <__aeabi_fdiv+0x6a>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	00d2      	lsls	r2, r2, #3
 80005ac:	04c9      	lsls	r1, r1, #19
 80005ae:	4311      	orrs	r1, r2
 80005b0:	4688      	mov	r8, r1
 80005b2:	2000      	movs	r0, #0
 80005b4:	3b7f      	subs	r3, #127	@ 0x7f
 80005b6:	0029      	movs	r1, r5
 80005b8:	1aff      	subs	r7, r7, r3
 80005ba:	464b      	mov	r3, r9
 80005bc:	4071      	eors	r1, r6
 80005be:	b2c9      	uxtb	r1, r1
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d900      	bls.n	80005c6 <__aeabi_fdiv+0x62>
 80005c4:	e0b5      	b.n	8000732 <__aeabi_fdiv+0x1ce>
 80005c6:	4a74      	ldr	r2, [pc, #464]	@ (8000798 <__aeabi_fdiv+0x234>)
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	58d3      	ldr	r3, [r2, r3]
 80005cc:	469f      	mov	pc, r3
 80005ce:	4643      	mov	r3, r8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d13f      	bne.n	8000654 <__aeabi_fdiv+0xf0>
 80005d4:	3fff      	subs	r7, #255	@ 0xff
 80005d6:	3302      	adds	r3, #2
 80005d8:	e003      	b.n	80005e2 <__aeabi_fdiv+0x7e>
 80005da:	4643      	mov	r3, r8
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d12d      	bne.n	800063c <__aeabi_fdiv+0xd8>
 80005e0:	2301      	movs	r3, #1
 80005e2:	0029      	movs	r1, r5
 80005e4:	464a      	mov	r2, r9
 80005e6:	4071      	eors	r1, r6
 80005e8:	b2c9      	uxtb	r1, r1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	2a0e      	cmp	r2, #14
 80005ee:	d838      	bhi.n	8000662 <__aeabi_fdiv+0xfe>
 80005f0:	486a      	ldr	r0, [pc, #424]	@ (800079c <__aeabi_fdiv+0x238>)
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	5882      	ldr	r2, [r0, r2]
 80005f6:	4697      	mov	pc, r2
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d113      	bne.n	8000624 <__aeabi_fdiv+0xc0>
 80005fc:	2304      	movs	r3, #4
 80005fe:	4699      	mov	r9, r3
 8000600:	3b03      	subs	r3, #3
 8000602:	2700      	movs	r7, #0
 8000604:	469a      	mov	sl, r3
 8000606:	e7c4      	b.n	8000592 <__aeabi_fdiv+0x2e>
 8000608:	2c00      	cmp	r4, #0
 800060a:	d105      	bne.n	8000618 <__aeabi_fdiv+0xb4>
 800060c:	2308      	movs	r3, #8
 800060e:	4699      	mov	r9, r3
 8000610:	3b06      	subs	r3, #6
 8000612:	27ff      	movs	r7, #255	@ 0xff
 8000614:	469a      	mov	sl, r3
 8000616:	e7bc      	b.n	8000592 <__aeabi_fdiv+0x2e>
 8000618:	230c      	movs	r3, #12
 800061a:	4699      	mov	r9, r3
 800061c:	3b09      	subs	r3, #9
 800061e:	27ff      	movs	r7, #255	@ 0xff
 8000620:	469a      	mov	sl, r3
 8000622:	e7b6      	b.n	8000592 <__aeabi_fdiv+0x2e>
 8000624:	0020      	movs	r0, r4
 8000626:	f000 fc3b 	bl	8000ea0 <__clzsi2>
 800062a:	2776      	movs	r7, #118	@ 0x76
 800062c:	1f43      	subs	r3, r0, #5
 800062e:	409c      	lsls	r4, r3
 8000630:	2300      	movs	r3, #0
 8000632:	427f      	negs	r7, r7
 8000634:	4699      	mov	r9, r3
 8000636:	469a      	mov	sl, r3
 8000638:	1a3f      	subs	r7, r7, r0
 800063a:	e7aa      	b.n	8000592 <__aeabi_fdiv+0x2e>
 800063c:	4640      	mov	r0, r8
 800063e:	f000 fc2f 	bl	8000ea0 <__clzsi2>
 8000642:	4642      	mov	r2, r8
 8000644:	1f43      	subs	r3, r0, #5
 8000646:	409a      	lsls	r2, r3
 8000648:	2376      	movs	r3, #118	@ 0x76
 800064a:	425b      	negs	r3, r3
 800064c:	1a1b      	subs	r3, r3, r0
 800064e:	4690      	mov	r8, r2
 8000650:	2000      	movs	r0, #0
 8000652:	e7b0      	b.n	80005b6 <__aeabi_fdiv+0x52>
 8000654:	2303      	movs	r3, #3
 8000656:	464a      	mov	r2, r9
 8000658:	431a      	orrs	r2, r3
 800065a:	4691      	mov	r9, r2
 800065c:	2003      	movs	r0, #3
 800065e:	33fc      	adds	r3, #252	@ 0xfc
 8000660:	e7a9      	b.n	80005b6 <__aeabi_fdiv+0x52>
 8000662:	000d      	movs	r5, r1
 8000664:	20ff      	movs	r0, #255	@ 0xff
 8000666:	2200      	movs	r2, #0
 8000668:	05c0      	lsls	r0, r0, #23
 800066a:	07ed      	lsls	r5, r5, #31
 800066c:	4310      	orrs	r0, r2
 800066e:	4328      	orrs	r0, r5
 8000670:	bce0      	pop	{r5, r6, r7}
 8000672:	46ba      	mov	sl, r7
 8000674:	46b1      	mov	r9, r6
 8000676:	46a8      	mov	r8, r5
 8000678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067a:	000d      	movs	r5, r1
 800067c:	2000      	movs	r0, #0
 800067e:	2200      	movs	r2, #0
 8000680:	e7f2      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000682:	4653      	mov	r3, sl
 8000684:	2b02      	cmp	r3, #2
 8000686:	d0ed      	beq.n	8000664 <__aeabi_fdiv+0x100>
 8000688:	2b03      	cmp	r3, #3
 800068a:	d033      	beq.n	80006f4 <__aeabi_fdiv+0x190>
 800068c:	46a0      	mov	r8, r4
 800068e:	2b01      	cmp	r3, #1
 8000690:	d105      	bne.n	800069e <__aeabi_fdiv+0x13a>
 8000692:	2000      	movs	r0, #0
 8000694:	2200      	movs	r2, #0
 8000696:	e7e7      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000698:	0035      	movs	r5, r6
 800069a:	2803      	cmp	r0, #3
 800069c:	d07a      	beq.n	8000794 <__aeabi_fdiv+0x230>
 800069e:	003b      	movs	r3, r7
 80006a0:	337f      	adds	r3, #127	@ 0x7f
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dd2d      	ble.n	8000702 <__aeabi_fdiv+0x19e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	0752      	lsls	r2, r2, #29
 80006aa:	d007      	beq.n	80006bc <__aeabi_fdiv+0x158>
 80006ac:	220f      	movs	r2, #15
 80006ae:	4641      	mov	r1, r8
 80006b0:	400a      	ands	r2, r1
 80006b2:	2a04      	cmp	r2, #4
 80006b4:	d002      	beq.n	80006bc <__aeabi_fdiv+0x158>
 80006b6:	2204      	movs	r2, #4
 80006b8:	4694      	mov	ip, r2
 80006ba:	44e0      	add	r8, ip
 80006bc:	4642      	mov	r2, r8
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	d505      	bpl.n	80006ce <__aeabi_fdiv+0x16a>
 80006c2:	4642      	mov	r2, r8
 80006c4:	4b36      	ldr	r3, [pc, #216]	@ (80007a0 <__aeabi_fdiv+0x23c>)
 80006c6:	401a      	ands	r2, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4690      	mov	r8, r2
 80006cc:	3380      	adds	r3, #128	@ 0x80
 80006ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80006d0:	dcc8      	bgt.n	8000664 <__aeabi_fdiv+0x100>
 80006d2:	4642      	mov	r2, r8
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	0a52      	lsrs	r2, r2, #9
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	e7c5      	b.n	8000668 <__aeabi_fdiv+0x104>
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	2500      	movs	r5, #0
 80006e0:	20ff      	movs	r0, #255	@ 0xff
 80006e2:	03d2      	lsls	r2, r2, #15
 80006e4:	e7c0      	b.n	8000668 <__aeabi_fdiv+0x104>
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	03d2      	lsls	r2, r2, #15
 80006ea:	4214      	tst	r4, r2
 80006ec:	d002      	beq.n	80006f4 <__aeabi_fdiv+0x190>
 80006ee:	4643      	mov	r3, r8
 80006f0:	4213      	tst	r3, r2
 80006f2:	d049      	beq.n	8000788 <__aeabi_fdiv+0x224>
 80006f4:	2280      	movs	r2, #128	@ 0x80
 80006f6:	03d2      	lsls	r2, r2, #15
 80006f8:	4322      	orrs	r2, r4
 80006fa:	0252      	lsls	r2, r2, #9
 80006fc:	20ff      	movs	r0, #255	@ 0xff
 80006fe:	0a52      	lsrs	r2, r2, #9
 8000700:	e7b2      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000702:	2201      	movs	r2, #1
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	2b1b      	cmp	r3, #27
 8000708:	dcc3      	bgt.n	8000692 <__aeabi_fdiv+0x12e>
 800070a:	4642      	mov	r2, r8
 800070c:	40da      	lsrs	r2, r3
 800070e:	4643      	mov	r3, r8
 8000710:	379e      	adds	r7, #158	@ 0x9e
 8000712:	40bb      	lsls	r3, r7
 8000714:	1e59      	subs	r1, r3, #1
 8000716:	418b      	sbcs	r3, r1
 8000718:	431a      	orrs	r2, r3
 800071a:	0753      	lsls	r3, r2, #29
 800071c:	d004      	beq.n	8000728 <__aeabi_fdiv+0x1c4>
 800071e:	230f      	movs	r3, #15
 8000720:	4013      	ands	r3, r2
 8000722:	2b04      	cmp	r3, #4
 8000724:	d000      	beq.n	8000728 <__aeabi_fdiv+0x1c4>
 8000726:	3204      	adds	r2, #4
 8000728:	0153      	lsls	r3, r2, #5
 800072a:	d529      	bpl.n	8000780 <__aeabi_fdiv+0x21c>
 800072c:	2001      	movs	r0, #1
 800072e:	2200      	movs	r2, #0
 8000730:	e79a      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000732:	4642      	mov	r2, r8
 8000734:	0163      	lsls	r3, r4, #5
 8000736:	0155      	lsls	r5, r2, #5
 8000738:	42ab      	cmp	r3, r5
 800073a:	d215      	bcs.n	8000768 <__aeabi_fdiv+0x204>
 800073c:	201b      	movs	r0, #27
 800073e:	2200      	movs	r2, #0
 8000740:	3f01      	subs	r7, #1
 8000742:	2601      	movs	r6, #1
 8000744:	001c      	movs	r4, r3
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	2c00      	cmp	r4, #0
 800074c:	db01      	blt.n	8000752 <__aeabi_fdiv+0x1ee>
 800074e:	429d      	cmp	r5, r3
 8000750:	d801      	bhi.n	8000756 <__aeabi_fdiv+0x1f2>
 8000752:	1b5b      	subs	r3, r3, r5
 8000754:	4332      	orrs	r2, r6
 8000756:	3801      	subs	r0, #1
 8000758:	2800      	cmp	r0, #0
 800075a:	d1f3      	bne.n	8000744 <__aeabi_fdiv+0x1e0>
 800075c:	1e58      	subs	r0, r3, #1
 800075e:	4183      	sbcs	r3, r0
 8000760:	4313      	orrs	r3, r2
 8000762:	4698      	mov	r8, r3
 8000764:	000d      	movs	r5, r1
 8000766:	e79a      	b.n	800069e <__aeabi_fdiv+0x13a>
 8000768:	201a      	movs	r0, #26
 800076a:	2201      	movs	r2, #1
 800076c:	1b5b      	subs	r3, r3, r5
 800076e:	e7e8      	b.n	8000742 <__aeabi_fdiv+0x1de>
 8000770:	3b02      	subs	r3, #2
 8000772:	425a      	negs	r2, r3
 8000774:	4153      	adcs	r3, r2
 8000776:	425b      	negs	r3, r3
 8000778:	0035      	movs	r5, r6
 800077a:	2200      	movs	r2, #0
 800077c:	b2d8      	uxtb	r0, r3
 800077e:	e773      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000780:	0192      	lsls	r2, r2, #6
 8000782:	2000      	movs	r0, #0
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	e76f      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000788:	431a      	orrs	r2, r3
 800078a:	0252      	lsls	r2, r2, #9
 800078c:	0035      	movs	r5, r6
 800078e:	20ff      	movs	r0, #255	@ 0xff
 8000790:	0a52      	lsrs	r2, r2, #9
 8000792:	e769      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000794:	4644      	mov	r4, r8
 8000796:	e7ad      	b.n	80006f4 <__aeabi_fdiv+0x190>
 8000798:	08005bdc 	.word	0x08005bdc
 800079c:	08005c1c 	.word	0x08005c1c
 80007a0:	f7ffffff 	.word	0xf7ffffff

080007a4 <__aeabi_fmul>:
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	464f      	mov	r7, r9
 80007a8:	4646      	mov	r6, r8
 80007aa:	46d6      	mov	lr, sl
 80007ac:	0243      	lsls	r3, r0, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	0045      	lsls	r5, r0, #1
 80007b2:	b5c0      	push	{r6, r7, lr}
 80007b4:	4699      	mov	r9, r3
 80007b6:	1c0f      	adds	r7, r1, #0
 80007b8:	0e2d      	lsrs	r5, r5, #24
 80007ba:	0fc6      	lsrs	r6, r0, #31
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fmul+0x1e>
 80007c0:	e088      	b.n	80008d4 <__aeabi_fmul+0x130>
 80007c2:	2dff      	cmp	r5, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fmul+0x24>
 80007c6:	e08d      	b.n	80008e4 <__aeabi_fmul+0x140>
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	04d2      	lsls	r2, r2, #19
 80007ce:	431a      	orrs	r2, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	4691      	mov	r9, r2
 80007d4:	4698      	mov	r8, r3
 80007d6:	469a      	mov	sl, r3
 80007d8:	3d7f      	subs	r5, #127	@ 0x7f
 80007da:	027c      	lsls	r4, r7, #9
 80007dc:	007b      	lsls	r3, r7, #1
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	0fff      	lsrs	r7, r7, #31
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d068      	beq.n	80008ba <__aeabi_fmul+0x116>
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d021      	beq.n	8000830 <__aeabi_fmul+0x8c>
 80007ec:	2280      	movs	r2, #128	@ 0x80
 80007ee:	00e4      	lsls	r4, r4, #3
 80007f0:	04d2      	lsls	r2, r2, #19
 80007f2:	4314      	orrs	r4, r2
 80007f4:	4642      	mov	r2, r8
 80007f6:	3b7f      	subs	r3, #127	@ 0x7f
 80007f8:	195b      	adds	r3, r3, r5
 80007fa:	2100      	movs	r1, #0
 80007fc:	1c5d      	adds	r5, r3, #1
 80007fe:	2a0a      	cmp	r2, #10
 8000800:	dc2e      	bgt.n	8000860 <__aeabi_fmul+0xbc>
 8000802:	407e      	eors	r6, r7
 8000804:	4642      	mov	r2, r8
 8000806:	2a02      	cmp	r2, #2
 8000808:	dc23      	bgt.n	8000852 <__aeabi_fmul+0xae>
 800080a:	3a01      	subs	r2, #1
 800080c:	2a01      	cmp	r2, #1
 800080e:	d900      	bls.n	8000812 <__aeabi_fmul+0x6e>
 8000810:	e0bd      	b.n	800098e <__aeabi_fmul+0x1ea>
 8000812:	2902      	cmp	r1, #2
 8000814:	d06e      	beq.n	80008f4 <__aeabi_fmul+0x150>
 8000816:	2901      	cmp	r1, #1
 8000818:	d12c      	bne.n	8000874 <__aeabi_fmul+0xd0>
 800081a:	2000      	movs	r0, #0
 800081c:	2200      	movs	r2, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	07f6      	lsls	r6, r6, #31
 8000822:	4310      	orrs	r0, r2
 8000824:	4330      	orrs	r0, r6
 8000826:	bce0      	pop	{r5, r6, r7}
 8000828:	46ba      	mov	sl, r7
 800082a:	46b1      	mov	r9, r6
 800082c:	46a8      	mov	r8, r5
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000830:	002b      	movs	r3, r5
 8000832:	33ff      	adds	r3, #255	@ 0xff
 8000834:	2c00      	cmp	r4, #0
 8000836:	d065      	beq.n	8000904 <__aeabi_fmul+0x160>
 8000838:	2203      	movs	r2, #3
 800083a:	4641      	mov	r1, r8
 800083c:	4311      	orrs	r1, r2
 800083e:	0032      	movs	r2, r6
 8000840:	3501      	adds	r5, #1
 8000842:	4688      	mov	r8, r1
 8000844:	407a      	eors	r2, r7
 8000846:	35ff      	adds	r5, #255	@ 0xff
 8000848:	290a      	cmp	r1, #10
 800084a:	dd00      	ble.n	800084e <__aeabi_fmul+0xaa>
 800084c:	e0d8      	b.n	8000a00 <__aeabi_fmul+0x25c>
 800084e:	0016      	movs	r6, r2
 8000850:	2103      	movs	r1, #3
 8000852:	4640      	mov	r0, r8
 8000854:	2201      	movs	r2, #1
 8000856:	4082      	lsls	r2, r0
 8000858:	20a6      	movs	r0, #166	@ 0xa6
 800085a:	00c0      	lsls	r0, r0, #3
 800085c:	4202      	tst	r2, r0
 800085e:	d020      	beq.n	80008a2 <__aeabi_fmul+0xfe>
 8000860:	4653      	mov	r3, sl
 8000862:	2b02      	cmp	r3, #2
 8000864:	d046      	beq.n	80008f4 <__aeabi_fmul+0x150>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d100      	bne.n	800086c <__aeabi_fmul+0xc8>
 800086a:	e0bb      	b.n	80009e4 <__aeabi_fmul+0x240>
 800086c:	4651      	mov	r1, sl
 800086e:	464c      	mov	r4, r9
 8000870:	2901      	cmp	r1, #1
 8000872:	d0d2      	beq.n	800081a <__aeabi_fmul+0x76>
 8000874:	002b      	movs	r3, r5
 8000876:	337f      	adds	r3, #127	@ 0x7f
 8000878:	2b00      	cmp	r3, #0
 800087a:	dd70      	ble.n	800095e <__aeabi_fmul+0x1ba>
 800087c:	0762      	lsls	r2, r4, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000880:	220f      	movs	r2, #15
 8000882:	4022      	ands	r2, r4
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000888:	3404      	adds	r4, #4
 800088a:	0122      	lsls	r2, r4, #4
 800088c:	d503      	bpl.n	8000896 <__aeabi_fmul+0xf2>
 800088e:	4b63      	ldr	r3, [pc, #396]	@ (8000a1c <__aeabi_fmul+0x278>)
 8000890:	401c      	ands	r4, r3
 8000892:	002b      	movs	r3, r5
 8000894:	3380      	adds	r3, #128	@ 0x80
 8000896:	2bfe      	cmp	r3, #254	@ 0xfe
 8000898:	dc2c      	bgt.n	80008f4 <__aeabi_fmul+0x150>
 800089a:	01a2      	lsls	r2, r4, #6
 800089c:	0a52      	lsrs	r2, r2, #9
 800089e:	b2d8      	uxtb	r0, r3
 80008a0:	e7bd      	b.n	800081e <__aeabi_fmul+0x7a>
 80008a2:	2090      	movs	r0, #144	@ 0x90
 80008a4:	0080      	lsls	r0, r0, #2
 80008a6:	4202      	tst	r2, r0
 80008a8:	d127      	bne.n	80008fa <__aeabi_fmul+0x156>
 80008aa:	38b9      	subs	r0, #185	@ 0xb9
 80008ac:	38ff      	subs	r0, #255	@ 0xff
 80008ae:	4210      	tst	r0, r2
 80008b0:	d06d      	beq.n	800098e <__aeabi_fmul+0x1ea>
 80008b2:	003e      	movs	r6, r7
 80008b4:	46a1      	mov	r9, r4
 80008b6:	468a      	mov	sl, r1
 80008b8:	e7d2      	b.n	8000860 <__aeabi_fmul+0xbc>
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	d141      	bne.n	8000942 <__aeabi_fmul+0x19e>
 80008be:	2301      	movs	r3, #1
 80008c0:	4642      	mov	r2, r8
 80008c2:	431a      	orrs	r2, r3
 80008c4:	4690      	mov	r8, r2
 80008c6:	002b      	movs	r3, r5
 80008c8:	4642      	mov	r2, r8
 80008ca:	2101      	movs	r1, #1
 80008cc:	1c5d      	adds	r5, r3, #1
 80008ce:	2a0a      	cmp	r2, #10
 80008d0:	dd97      	ble.n	8000802 <__aeabi_fmul+0x5e>
 80008d2:	e7c5      	b.n	8000860 <__aeabi_fmul+0xbc>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d126      	bne.n	8000926 <__aeabi_fmul+0x182>
 80008d8:	2304      	movs	r3, #4
 80008da:	4698      	mov	r8, r3
 80008dc:	3b03      	subs	r3, #3
 80008de:	2500      	movs	r5, #0
 80008e0:	469a      	mov	sl, r3
 80008e2:	e77a      	b.n	80007da <__aeabi_fmul+0x36>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d118      	bne.n	800091a <__aeabi_fmul+0x176>
 80008e8:	2308      	movs	r3, #8
 80008ea:	4698      	mov	r8, r3
 80008ec:	3b06      	subs	r3, #6
 80008ee:	25ff      	movs	r5, #255	@ 0xff
 80008f0:	469a      	mov	sl, r3
 80008f2:	e772      	b.n	80007da <__aeabi_fmul+0x36>
 80008f4:	20ff      	movs	r0, #255	@ 0xff
 80008f6:	2200      	movs	r2, #0
 80008f8:	e791      	b.n	800081e <__aeabi_fmul+0x7a>
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	2600      	movs	r6, #0
 80008fe:	20ff      	movs	r0, #255	@ 0xff
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	e78c      	b.n	800081e <__aeabi_fmul+0x7a>
 8000904:	4641      	mov	r1, r8
 8000906:	2202      	movs	r2, #2
 8000908:	3501      	adds	r5, #1
 800090a:	4311      	orrs	r1, r2
 800090c:	4688      	mov	r8, r1
 800090e:	35ff      	adds	r5, #255	@ 0xff
 8000910:	290a      	cmp	r1, #10
 8000912:	dca5      	bgt.n	8000860 <__aeabi_fmul+0xbc>
 8000914:	2102      	movs	r1, #2
 8000916:	407e      	eors	r6, r7
 8000918:	e774      	b.n	8000804 <__aeabi_fmul+0x60>
 800091a:	230c      	movs	r3, #12
 800091c:	4698      	mov	r8, r3
 800091e:	3b09      	subs	r3, #9
 8000920:	25ff      	movs	r5, #255	@ 0xff
 8000922:	469a      	mov	sl, r3
 8000924:	e759      	b.n	80007da <__aeabi_fmul+0x36>
 8000926:	0018      	movs	r0, r3
 8000928:	f000 faba 	bl	8000ea0 <__clzsi2>
 800092c:	464a      	mov	r2, r9
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	2576      	movs	r5, #118	@ 0x76
 8000932:	409a      	lsls	r2, r3
 8000934:	2300      	movs	r3, #0
 8000936:	426d      	negs	r5, r5
 8000938:	4691      	mov	r9, r2
 800093a:	4698      	mov	r8, r3
 800093c:	469a      	mov	sl, r3
 800093e:	1a2d      	subs	r5, r5, r0
 8000940:	e74b      	b.n	80007da <__aeabi_fmul+0x36>
 8000942:	0020      	movs	r0, r4
 8000944:	f000 faac 	bl	8000ea0 <__clzsi2>
 8000948:	4642      	mov	r2, r8
 800094a:	1f43      	subs	r3, r0, #5
 800094c:	409c      	lsls	r4, r3
 800094e:	1a2b      	subs	r3, r5, r0
 8000950:	3b76      	subs	r3, #118	@ 0x76
 8000952:	2100      	movs	r1, #0
 8000954:	1c5d      	adds	r5, r3, #1
 8000956:	2a0a      	cmp	r2, #10
 8000958:	dc00      	bgt.n	800095c <__aeabi_fmul+0x1b8>
 800095a:	e752      	b.n	8000802 <__aeabi_fmul+0x5e>
 800095c:	e780      	b.n	8000860 <__aeabi_fmul+0xbc>
 800095e:	2201      	movs	r2, #1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dd00      	ble.n	8000968 <__aeabi_fmul+0x1c4>
 8000966:	e758      	b.n	800081a <__aeabi_fmul+0x76>
 8000968:	359e      	adds	r5, #158	@ 0x9e
 800096a:	0022      	movs	r2, r4
 800096c:	40ac      	lsls	r4, r5
 800096e:	40da      	lsrs	r2, r3
 8000970:	1e63      	subs	r3, r4, #1
 8000972:	419c      	sbcs	r4, r3
 8000974:	4322      	orrs	r2, r4
 8000976:	0753      	lsls	r3, r2, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fmul+0x1e0>
 800097a:	230f      	movs	r3, #15
 800097c:	4013      	ands	r3, r2
 800097e:	2b04      	cmp	r3, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fmul+0x1e0>
 8000982:	3204      	adds	r2, #4
 8000984:	0153      	lsls	r3, r2, #5
 8000986:	d537      	bpl.n	80009f8 <__aeabi_fmul+0x254>
 8000988:	2001      	movs	r0, #1
 800098a:	2200      	movs	r2, #0
 800098c:	e747      	b.n	800081e <__aeabi_fmul+0x7a>
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	464a      	mov	r2, r9
 8000992:	0424      	lsls	r4, r4, #16
 8000994:	0c24      	lsrs	r4, r4, #16
 8000996:	0027      	movs	r7, r4
 8000998:	0c10      	lsrs	r0, r2, #16
 800099a:	0412      	lsls	r2, r2, #16
 800099c:	0c12      	lsrs	r2, r2, #16
 800099e:	4344      	muls	r4, r0
 80009a0:	4357      	muls	r7, r2
 80009a2:	4348      	muls	r0, r1
 80009a4:	4351      	muls	r1, r2
 80009a6:	0c3a      	lsrs	r2, r7, #16
 80009a8:	1909      	adds	r1, r1, r4
 80009aa:	1852      	adds	r2, r2, r1
 80009ac:	4294      	cmp	r4, r2
 80009ae:	d903      	bls.n	80009b8 <__aeabi_fmul+0x214>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	0249      	lsls	r1, r1, #9
 80009b4:	468c      	mov	ip, r1
 80009b6:	4460      	add	r0, ip
 80009b8:	043f      	lsls	r7, r7, #16
 80009ba:	0411      	lsls	r1, r2, #16
 80009bc:	0c3f      	lsrs	r7, r7, #16
 80009be:	19c9      	adds	r1, r1, r7
 80009c0:	018c      	lsls	r4, r1, #6
 80009c2:	1e67      	subs	r7, r4, #1
 80009c4:	41bc      	sbcs	r4, r7
 80009c6:	0c12      	lsrs	r2, r2, #16
 80009c8:	0e89      	lsrs	r1, r1, #26
 80009ca:	1812      	adds	r2, r2, r0
 80009cc:	430c      	orrs	r4, r1
 80009ce:	0192      	lsls	r2, r2, #6
 80009d0:	4314      	orrs	r4, r2
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	d50e      	bpl.n	80009f4 <__aeabi_fmul+0x250>
 80009d6:	2301      	movs	r3, #1
 80009d8:	0862      	lsrs	r2, r4, #1
 80009da:	401c      	ands	r4, r3
 80009dc:	4314      	orrs	r4, r2
 80009de:	e749      	b.n	8000874 <__aeabi_fmul+0xd0>
 80009e0:	003e      	movs	r6, r7
 80009e2:	46a1      	mov	r9, r4
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	464b      	mov	r3, r9
 80009e8:	03d2      	lsls	r2, r2, #15
 80009ea:	431a      	orrs	r2, r3
 80009ec:	0252      	lsls	r2, r2, #9
 80009ee:	20ff      	movs	r0, #255	@ 0xff
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	e714      	b.n	800081e <__aeabi_fmul+0x7a>
 80009f4:	001d      	movs	r5, r3
 80009f6:	e73d      	b.n	8000874 <__aeabi_fmul+0xd0>
 80009f8:	0192      	lsls	r2, r2, #6
 80009fa:	2000      	movs	r0, #0
 80009fc:	0a52      	lsrs	r2, r2, #9
 80009fe:	e70e      	b.n	800081e <__aeabi_fmul+0x7a>
 8000a00:	290f      	cmp	r1, #15
 8000a02:	d1ed      	bne.n	80009e0 <__aeabi_fmul+0x23c>
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	464b      	mov	r3, r9
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	4213      	tst	r3, r2
 8000a0c:	d0ea      	beq.n	80009e4 <__aeabi_fmul+0x240>
 8000a0e:	4214      	tst	r4, r2
 8000a10:	d1e8      	bne.n	80009e4 <__aeabi_fmul+0x240>
 8000a12:	003e      	movs	r6, r7
 8000a14:	20ff      	movs	r0, #255	@ 0xff
 8000a16:	4322      	orrs	r2, r4
 8000a18:	e701      	b.n	800081e <__aeabi_fmul+0x7a>
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	f7ffffff 	.word	0xf7ffffff

08000a20 <__aeabi_fsub>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	4647      	mov	r7, r8
 8000a24:	46ce      	mov	lr, r9
 8000a26:	024e      	lsls	r6, r1, #9
 8000a28:	0243      	lsls	r3, r0, #9
 8000a2a:	0045      	lsls	r5, r0, #1
 8000a2c:	0a72      	lsrs	r2, r6, #9
 8000a2e:	0fc4      	lsrs	r4, r0, #31
 8000a30:	0048      	lsls	r0, r1, #1
 8000a32:	b580      	push	{r7, lr}
 8000a34:	4694      	mov	ip, r2
 8000a36:	0a5f      	lsrs	r7, r3, #9
 8000a38:	0e2d      	lsrs	r5, r5, #24
 8000a3a:	099b      	lsrs	r3, r3, #6
 8000a3c:	0e00      	lsrs	r0, r0, #24
 8000a3e:	0fc9      	lsrs	r1, r1, #31
 8000a40:	09b6      	lsrs	r6, r6, #6
 8000a42:	28ff      	cmp	r0, #255	@ 0xff
 8000a44:	d024      	beq.n	8000a90 <__aeabi_fsub+0x70>
 8000a46:	2201      	movs	r2, #1
 8000a48:	4051      	eors	r1, r2
 8000a4a:	1a2a      	subs	r2, r5, r0
 8000a4c:	428c      	cmp	r4, r1
 8000a4e:	d00f      	beq.n	8000a70 <__aeabi_fsub+0x50>
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_fsub+0x36>
 8000a54:	e16a      	b.n	8000d2c <__aeabi_fsub+0x30c>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d135      	bne.n	8000ac6 <__aeabi_fsub+0xa6>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fsub+0x40>
 8000a5e:	e0a2      	b.n	8000ba6 <__aeabi_fsub+0x186>
 8000a60:	1e51      	subs	r1, r2, #1
 8000a62:	2a01      	cmp	r2, #1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x48>
 8000a66:	e124      	b.n	8000cb2 <__aeabi_fsub+0x292>
 8000a68:	2aff      	cmp	r2, #255	@ 0xff
 8000a6a:	d021      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	e02f      	b.n	8000ad0 <__aeabi_fsub+0xb0>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_fsub+0x56>
 8000a74:	e167      	b.n	8000d46 <__aeabi_fsub+0x326>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d05e      	beq.n	8000b38 <__aeabi_fsub+0x118>
 8000a7a:	2dff      	cmp	r5, #255	@ 0xff
 8000a7c:	d018      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	04c9      	lsls	r1, r1, #19
 8000a82:	430e      	orrs	r6, r1
 8000a84:	2a1b      	cmp	r2, #27
 8000a86:	dc00      	bgt.n	8000a8a <__aeabi_fsub+0x6a>
 8000a88:	e076      	b.n	8000b78 <__aeabi_fsub+0x158>
 8000a8a:	002a      	movs	r2, r5
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	e032      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000a90:	002a      	movs	r2, r5
 8000a92:	3aff      	subs	r2, #255	@ 0xff
 8000a94:	4691      	mov	r9, r2
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d042      	beq.n	8000b20 <__aeabi_fsub+0x100>
 8000a9a:	428c      	cmp	r4, r1
 8000a9c:	d055      	beq.n	8000b4a <__aeabi_fsub+0x12a>
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x86>
 8000aa4:	e09c      	b.n	8000be0 <__aeabi_fsub+0x1c0>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fsub+0x8c>
 8000aaa:	e077      	b.n	8000b9c <__aeabi_fsub+0x17c>
 8000aac:	000c      	movs	r4, r1
 8000aae:	0033      	movs	r3, r6
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0x98>
 8000ab6:	e06e      	b.n	8000b96 <__aeabi_fsub+0x176>
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	03d2      	lsls	r2, r2, #15
 8000abc:	4313      	orrs	r3, r2
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	20ff      	movs	r0, #255	@ 0xff
 8000ac2:	0a5b      	lsrs	r3, r3, #9
 8000ac4:	e024      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000ac6:	2dff      	cmp	r5, #255	@ 0xff
 8000ac8:	d0f2      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	04c9      	lsls	r1, r1, #19
 8000ace:	430e      	orrs	r6, r1
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2a1b      	cmp	r2, #27
 8000ad4:	dc08      	bgt.n	8000ae8 <__aeabi_fsub+0xc8>
 8000ad6:	0031      	movs	r1, r6
 8000ad8:	2020      	movs	r0, #32
 8000ada:	40d1      	lsrs	r1, r2
 8000adc:	1a82      	subs	r2, r0, r2
 8000ade:	4096      	lsls	r6, r2
 8000ae0:	0032      	movs	r2, r6
 8000ae2:	1e50      	subs	r0, r2, #1
 8000ae4:	4182      	sbcs	r2, r0
 8000ae6:	4311      	orrs	r1, r2
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	015a      	lsls	r2, r3, #5
 8000aec:	d460      	bmi.n	8000bb0 <__aeabi_fsub+0x190>
 8000aee:	2107      	movs	r1, #7
 8000af0:	002a      	movs	r2, r5
 8000af2:	4019      	ands	r1, r3
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0x186>
 8000af6:	210f      	movs	r1, #15
 8000af8:	4019      	ands	r1, r3
 8000afa:	2904      	cmp	r1, #4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0xe0>
 8000afe:	3304      	adds	r3, #4
 8000b00:	0159      	lsls	r1, r3, #5
 8000b02:	d550      	bpl.n	8000ba6 <__aeabi_fsub+0x186>
 8000b04:	1c50      	adds	r0, r2, #1
 8000b06:	2afe      	cmp	r2, #254	@ 0xfe
 8000b08:	d045      	beq.n	8000b96 <__aeabi_fsub+0x176>
 8000b0a:	019b      	lsls	r3, r3, #6
 8000b0c:	b2c0      	uxtb	r0, r0
 8000b0e:	0a5b      	lsrs	r3, r3, #9
 8000b10:	05c0      	lsls	r0, r0, #23
 8000b12:	4318      	orrs	r0, r3
 8000b14:	07e4      	lsls	r4, r4, #31
 8000b16:	4320      	orrs	r0, r4
 8000b18:	bcc0      	pop	{r6, r7}
 8000b1a:	46b9      	mov	r9, r7
 8000b1c:	46b0      	mov	r8, r6
 8000b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b20:	2201      	movs	r2, #1
 8000b22:	4051      	eors	r1, r2
 8000b24:	428c      	cmp	r4, r1
 8000b26:	d1ba      	bne.n	8000a9e <__aeabi_fsub+0x7e>
 8000b28:	464a      	mov	r2, r9
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d010      	beq.n	8000b50 <__aeabi_fsub+0x130>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fsub+0x114>
 8000b32:	e098      	b.n	8000c66 <__aeabi_fsub+0x246>
 8000b34:	2300      	movs	r3, #0
 8000b36:	e7bb      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d034      	beq.n	8000ba6 <__aeabi_fsub+0x186>
 8000b3c:	1e51      	subs	r1, r2, #1
 8000b3e:	2a01      	cmp	r2, #1
 8000b40:	d06e      	beq.n	8000c20 <__aeabi_fsub+0x200>
 8000b42:	2aff      	cmp	r2, #255	@ 0xff
 8000b44:	d0b4      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000b46:	000a      	movs	r2, r1
 8000b48:	e79c      	b.n	8000a84 <__aeabi_fsub+0x64>
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0x130>
 8000b4e:	e088      	b.n	8000c62 <__aeabi_fsub+0x242>
 8000b50:	20fe      	movs	r0, #254	@ 0xfe
 8000b52:	1c6a      	adds	r2, r5, #1
 8000b54:	4210      	tst	r0, r2
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x13a>
 8000b58:	e092      	b.n	8000c80 <__aeabi_fsub+0x260>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_fsub+0x140>
 8000b5e:	e0a4      	b.n	8000caa <__aeabi_fsub+0x28a>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fsub+0x146>
 8000b64:	e0cb      	b.n	8000cfe <__aeabi_fsub+0x2de>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d000      	beq.n	8000b6c <__aeabi_fsub+0x14c>
 8000b6a:	e0ca      	b.n	8000d02 <__aeabi_fsub+0x2e2>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	b2d0      	uxtb	r0, r2
 8000b76:	e7cb      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000b78:	0031      	movs	r1, r6
 8000b7a:	2020      	movs	r0, #32
 8000b7c:	40d1      	lsrs	r1, r2
 8000b7e:	1a82      	subs	r2, r0, r2
 8000b80:	4096      	lsls	r6, r2
 8000b82:	0032      	movs	r2, r6
 8000b84:	1e50      	subs	r0, r2, #1
 8000b86:	4182      	sbcs	r2, r0
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	189b      	adds	r3, r3, r2
 8000b8c:	015a      	lsls	r2, r3, #5
 8000b8e:	d5ae      	bpl.n	8000aee <__aeabi_fsub+0xce>
 8000b90:	1c6a      	adds	r2, r5, #1
 8000b92:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b94:	d14a      	bne.n	8000c2c <__aeabi_fsub+0x20c>
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e7b9      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000b9c:	22ff      	movs	r2, #255	@ 0xff
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__aeabi_fsub+0x21a>
 8000ba2:	000c      	movs	r4, r1
 8000ba4:	0033      	movs	r3, r6
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	2aff      	cmp	r2, #255	@ 0xff
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x18e>
 8000bac:	e781      	b.n	8000ab2 <__aeabi_fsub+0x92>
 8000bae:	e7df      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000bb0:	019f      	lsls	r7, r3, #6
 8000bb2:	09bf      	lsrs	r7, r7, #6
 8000bb4:	0038      	movs	r0, r7
 8000bb6:	f000 f973 	bl	8000ea0 <__clzsi2>
 8000bba:	3805      	subs	r0, #5
 8000bbc:	4087      	lsls	r7, r0
 8000bbe:	4285      	cmp	r5, r0
 8000bc0:	dc21      	bgt.n	8000c06 <__aeabi_fsub+0x1e6>
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	1b42      	subs	r2, r0, r5
 8000bc8:	3201      	adds	r2, #1
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	4097      	lsls	r7, r2
 8000bd0:	1e7a      	subs	r2, r7, #1
 8000bd2:	4197      	sbcs	r7, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	433b      	orrs	r3, r7
 8000bd8:	0759      	lsls	r1, r3, #29
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x1be>
 8000bdc:	e78b      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000bde:	e78f      	b.n	8000b00 <__aeabi_fsub+0xe0>
 8000be0:	20fe      	movs	r0, #254	@ 0xfe
 8000be2:	1c6a      	adds	r2, r5, #1
 8000be4:	4210      	tst	r0, r2
 8000be6:	d112      	bne.n	8000c0e <__aeabi_fsub+0x1ee>
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d152      	bne.n	8000c92 <__aeabi_fsub+0x272>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d07c      	beq.n	8000cea <__aeabi_fsub+0x2ca>
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d0bb      	beq.n	8000b6c <__aeabi_fsub+0x14c>
 8000bf4:	1b9a      	subs	r2, r3, r6
 8000bf6:	0150      	lsls	r0, r2, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x1dc>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x2f4>
 8000bfc:	2401      	movs	r4, #1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	1af3      	subs	r3, r6, r3
 8000c02:	400c      	ands	r4, r1
 8000c04:	e7e8      	b.n	8000bd8 <__aeabi_fsub+0x1b8>
 8000c06:	4b56      	ldr	r3, [pc, #344]	@ (8000d60 <__aeabi_fsub+0x340>)
 8000c08:	1a2a      	subs	r2, r5, r0
 8000c0a:	403b      	ands	r3, r7
 8000c0c:	e7e4      	b.n	8000bd8 <__aeabi_fsub+0x1b8>
 8000c0e:	1b9f      	subs	r7, r3, r6
 8000c10:	017a      	lsls	r2, r7, #5
 8000c12:	d446      	bmi.n	8000ca2 <__aeabi_fsub+0x282>
 8000c14:	2f00      	cmp	r7, #0
 8000c16:	d1cd      	bne.n	8000bb4 <__aeabi_fsub+0x194>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e777      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000c20:	199b      	adds	r3, r3, r6
 8000c22:	2501      	movs	r5, #1
 8000c24:	3201      	adds	r2, #1
 8000c26:	0159      	lsls	r1, r3, #5
 8000c28:	d400      	bmi.n	8000c2c <__aeabi_fsub+0x20c>
 8000c2a:	e760      	b.n	8000aee <__aeabi_fsub+0xce>
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	484d      	ldr	r0, [pc, #308]	@ (8000d64 <__aeabi_fsub+0x344>)
 8000c30:	4019      	ands	r1, r3
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	4003      	ands	r3, r0
 8000c36:	430b      	orrs	r3, r1
 8000c38:	e7ce      	b.n	8000bd8 <__aeabi_fsub+0x1b8>
 8000c3a:	1e57      	subs	r7, r2, #1
 8000c3c:	2a01      	cmp	r2, #1
 8000c3e:	d05a      	beq.n	8000cf6 <__aeabi_fsub+0x2d6>
 8000c40:	000c      	movs	r4, r1
 8000c42:	2aff      	cmp	r2, #255	@ 0xff
 8000c44:	d033      	beq.n	8000cae <__aeabi_fsub+0x28e>
 8000c46:	2201      	movs	r2, #1
 8000c48:	2f1b      	cmp	r7, #27
 8000c4a:	dc07      	bgt.n	8000c5c <__aeabi_fsub+0x23c>
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	1bc9      	subs	r1, r1, r7
 8000c50:	001a      	movs	r2, r3
 8000c52:	408b      	lsls	r3, r1
 8000c54:	40fa      	lsrs	r2, r7
 8000c56:	1e59      	subs	r1, r3, #1
 8000c58:	418b      	sbcs	r3, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	0005      	movs	r5, r0
 8000c5e:	1ab3      	subs	r3, r6, r2
 8000c60:	e743      	b.n	8000aea <__aeabi_fsub+0xca>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d123      	bne.n	8000cae <__aeabi_fsub+0x28e>
 8000c66:	22ff      	movs	r2, #255	@ 0xff
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d09b      	beq.n	8000ba4 <__aeabi_fsub+0x184>
 8000c6c:	1e51      	subs	r1, r2, #1
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	d0d6      	beq.n	8000c20 <__aeabi_fsub+0x200>
 8000c72:	2aff      	cmp	r2, #255	@ 0xff
 8000c74:	d01b      	beq.n	8000cae <__aeabi_fsub+0x28e>
 8000c76:	291b      	cmp	r1, #27
 8000c78:	dd2c      	ble.n	8000cd4 <__aeabi_fsub+0x2b4>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1c73      	adds	r3, r6, #1
 8000c7e:	e73a      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000c80:	2aff      	cmp	r2, #255	@ 0xff
 8000c82:	d088      	beq.n	8000b96 <__aeabi_fsub+0x176>
 8000c84:	199b      	adds	r3, r3, r6
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	0759      	lsls	r1, r3, #29
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0x26e>
 8000c8c:	e733      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	e76e      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d110      	bne.n	8000cb8 <__aeabi_fsub+0x298>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d043      	beq.n	8000d22 <__aeabi_fsub+0x302>
 8000c9a:	2401      	movs	r4, #1
 8000c9c:	0033      	movs	r3, r6
 8000c9e:	400c      	ands	r4, r1
 8000ca0:	e706      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000ca2:	2401      	movs	r4, #1
 8000ca4:	1af7      	subs	r7, r6, r3
 8000ca6:	400c      	ands	r4, r1
 8000ca8:	e784      	b.n	8000bb4 <__aeabi_fsub+0x194>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d104      	bne.n	8000cb8 <__aeabi_fsub+0x298>
 8000cae:	0033      	movs	r3, r6
 8000cb0:	e6fe      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	e718      	b.n	8000aea <__aeabi_fsub+0xca>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_fsub+0x29e>
 8000cbc:	e6f8      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	03d2      	lsls	r2, r2, #15
 8000cc2:	4297      	cmp	r7, r2
 8000cc4:	d304      	bcc.n	8000cd0 <__aeabi_fsub+0x2b0>
 8000cc6:	4594      	cmp	ip, r2
 8000cc8:	d202      	bcs.n	8000cd0 <__aeabi_fsub+0x2b0>
 8000cca:	2401      	movs	r4, #1
 8000ccc:	0033      	movs	r3, r6
 8000cce:	400c      	ands	r4, r1
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	e6f1      	b.n	8000ab8 <__aeabi_fsub+0x98>
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2520      	movs	r5, #32
 8000cd8:	40ca      	lsrs	r2, r1
 8000cda:	1a69      	subs	r1, r5, r1
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	1e59      	subs	r1, r3, #1
 8000ce0:	418b      	sbcs	r3, r1
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	0005      	movs	r5, r0
 8000ce6:	199b      	adds	r3, r3, r6
 8000ce8:	e750      	b.n	8000b8c <__aeabi_fsub+0x16c>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d094      	beq.n	8000c18 <__aeabi_fsub+0x1f8>
 8000cee:	2401      	movs	r4, #1
 8000cf0:	0033      	movs	r3, r6
 8000cf2:	400c      	ands	r4, r1
 8000cf4:	e73a      	b.n	8000b6c <__aeabi_fsub+0x14c>
 8000cf6:	000c      	movs	r4, r1
 8000cf8:	2501      	movs	r5, #1
 8000cfa:	1af3      	subs	r3, r6, r3
 8000cfc:	e6f5      	b.n	8000aea <__aeabi_fsub+0xca>
 8000cfe:	0033      	movs	r3, r6
 8000d00:	e734      	b.n	8000b6c <__aeabi_fsub+0x14c>
 8000d02:	199b      	adds	r3, r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	0159      	lsls	r1, r3, #5
 8000d08:	d5c1      	bpl.n	8000c8e <__aeabi_fsub+0x26e>
 8000d0a:	4a15      	ldr	r2, [pc, #84]	@ (8000d60 <__aeabi_fsub+0x340>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	2201      	movs	r2, #1
 8000d12:	e72d      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_fsub+0x2fa>
 8000d18:	e77e      	b.n	8000c18 <__aeabi_fsub+0x1f8>
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	e726      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	2400      	movs	r4, #0
 8000d26:	20ff      	movs	r0, #255	@ 0xff
 8000d28:	03db      	lsls	r3, r3, #15
 8000d2a:	e6f1      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x312>
 8000d30:	e756      	b.n	8000be0 <__aeabi_fsub+0x1c0>
 8000d32:	1b47      	subs	r7, r0, r5
 8000d34:	003a      	movs	r2, r7
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fsub+0x31c>
 8000d3a:	e730      	b.n	8000b9e <__aeabi_fsub+0x17e>
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	04d2      	lsls	r2, r2, #19
 8000d40:	000c      	movs	r4, r1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	e77f      	b.n	8000c46 <__aeabi_fsub+0x226>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x32c>
 8000d4a:	e701      	b.n	8000b50 <__aeabi_fsub+0x130>
 8000d4c:	1b41      	subs	r1, r0, r5
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fsub+0x336>
 8000d52:	000a      	movs	r2, r1
 8000d54:	e788      	b.n	8000c68 <__aeabi_fsub+0x248>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	04d2      	lsls	r2, r2, #19
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	e78b      	b.n	8000c76 <__aeabi_fsub+0x256>
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	fbffffff 	.word	0xfbffffff
 8000d64:	7dffffff 	.word	0x7dffffff

08000d68 <__aeabi_f2iz>:
 8000d68:	0241      	lsls	r1, r0, #9
 8000d6a:	0042      	lsls	r2, r0, #1
 8000d6c:	0fc3      	lsrs	r3, r0, #31
 8000d6e:	0a49      	lsrs	r1, r1, #9
 8000d70:	2000      	movs	r0, #0
 8000d72:	0e12      	lsrs	r2, r2, #24
 8000d74:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d76:	dd03      	ble.n	8000d80 <__aeabi_f2iz+0x18>
 8000d78:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d7a:	dd02      	ble.n	8000d82 <__aeabi_f2iz+0x1a>
 8000d7c:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <__aeabi_f2iz+0x3c>)
 8000d7e:	1898      	adds	r0, r3, r2
 8000d80:	4770      	bx	lr
 8000d82:	2080      	movs	r0, #128	@ 0x80
 8000d84:	0400      	lsls	r0, r0, #16
 8000d86:	4301      	orrs	r1, r0
 8000d88:	2a95      	cmp	r2, #149	@ 0x95
 8000d8a:	dc07      	bgt.n	8000d9c <__aeabi_f2iz+0x34>
 8000d8c:	2096      	movs	r0, #150	@ 0x96
 8000d8e:	1a82      	subs	r2, r0, r2
 8000d90:	40d1      	lsrs	r1, r2
 8000d92:	4248      	negs	r0, r1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f3      	bne.n	8000d80 <__aeabi_f2iz+0x18>
 8000d98:	0008      	movs	r0, r1
 8000d9a:	e7f1      	b.n	8000d80 <__aeabi_f2iz+0x18>
 8000d9c:	3a96      	subs	r2, #150	@ 0x96
 8000d9e:	4091      	lsls	r1, r2
 8000da0:	e7f7      	b.n	8000d92 <__aeabi_f2iz+0x2a>
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	7fffffff 	.word	0x7fffffff

08000da8 <__aeabi_ui2f>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	1e04      	subs	r4, r0, #0
 8000dac:	d00e      	beq.n	8000dcc <__aeabi_ui2f+0x24>
 8000dae:	f000 f877 	bl	8000ea0 <__clzsi2>
 8000db2:	239e      	movs	r3, #158	@ 0x9e
 8000db4:	0001      	movs	r1, r0
 8000db6:	1a1b      	subs	r3, r3, r0
 8000db8:	2b96      	cmp	r3, #150	@ 0x96
 8000dba:	dc0c      	bgt.n	8000dd6 <__aeabi_ui2f+0x2e>
 8000dbc:	2808      	cmp	r0, #8
 8000dbe:	d02f      	beq.n	8000e20 <__aeabi_ui2f+0x78>
 8000dc0:	3908      	subs	r1, #8
 8000dc2:	408c      	lsls	r4, r1
 8000dc4:	0264      	lsls	r4, r4, #9
 8000dc6:	0a64      	lsrs	r4, r4, #9
 8000dc8:	b2d8      	uxtb	r0, r3
 8000dca:	e001      	b.n	8000dd0 <__aeabi_ui2f+0x28>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	2400      	movs	r4, #0
 8000dd0:	05c0      	lsls	r0, r0, #23
 8000dd2:	4320      	orrs	r0, r4
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
 8000dd6:	2b99      	cmp	r3, #153	@ 0x99
 8000dd8:	dc16      	bgt.n	8000e08 <__aeabi_ui2f+0x60>
 8000dda:	1f42      	subs	r2, r0, #5
 8000ddc:	2805      	cmp	r0, #5
 8000dde:	d000      	beq.n	8000de2 <__aeabi_ui2f+0x3a>
 8000de0:	4094      	lsls	r4, r2
 8000de2:	0022      	movs	r2, r4
 8000de4:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <__aeabi_ui2f+0x80>)
 8000de6:	4002      	ands	r2, r0
 8000de8:	0765      	lsls	r5, r4, #29
 8000dea:	d009      	beq.n	8000e00 <__aeabi_ui2f+0x58>
 8000dec:	250f      	movs	r5, #15
 8000dee:	402c      	ands	r4, r5
 8000df0:	2c04      	cmp	r4, #4
 8000df2:	d005      	beq.n	8000e00 <__aeabi_ui2f+0x58>
 8000df4:	3204      	adds	r2, #4
 8000df6:	0154      	lsls	r4, r2, #5
 8000df8:	d502      	bpl.n	8000e00 <__aeabi_ui2f+0x58>
 8000dfa:	239f      	movs	r3, #159	@ 0x9f
 8000dfc:	4002      	ands	r2, r0
 8000dfe:	1a5b      	subs	r3, r3, r1
 8000e00:	0192      	lsls	r2, r2, #6
 8000e02:	0a54      	lsrs	r4, r2, #9
 8000e04:	b2d8      	uxtb	r0, r3
 8000e06:	e7e3      	b.n	8000dd0 <__aeabi_ui2f+0x28>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	321b      	adds	r2, #27
 8000e0e:	4090      	lsls	r0, r2
 8000e10:	0002      	movs	r2, r0
 8000e12:	1e50      	subs	r0, r2, #1
 8000e14:	4182      	sbcs	r2, r0
 8000e16:	2005      	movs	r0, #5
 8000e18:	1a40      	subs	r0, r0, r1
 8000e1a:	40c4      	lsrs	r4, r0
 8000e1c:	4314      	orrs	r4, r2
 8000e1e:	e7e0      	b.n	8000de2 <__aeabi_ui2f+0x3a>
 8000e20:	0264      	lsls	r4, r4, #9
 8000e22:	2096      	movs	r0, #150	@ 0x96
 8000e24:	0a64      	lsrs	r4, r4, #9
 8000e26:	e7d3      	b.n	8000dd0 <__aeabi_ui2f+0x28>
 8000e28:	fbffffff 	.word	0xfbffffff

08000e2c <__aeabi_cfrcmple>:
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	0008      	movs	r0, r1
 8000e30:	4661      	mov	r1, ip
 8000e32:	e7ff      	b.n	8000e34 <__aeabi_cfcmpeq>

08000e34 <__aeabi_cfcmpeq>:
 8000e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e36:	f000 f8c9 	bl	8000fcc <__lesf2>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d401      	bmi.n	8000e42 <__aeabi_cfcmpeq+0xe>
 8000e3e:	2100      	movs	r1, #0
 8000e40:	42c8      	cmn	r0, r1
 8000e42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e44 <__aeabi_fcmpeq>:
 8000e44:	b510      	push	{r4, lr}
 8000e46:	f000 f849 	bl	8000edc <__eqsf2>
 8000e4a:	4240      	negs	r0, r0
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	bd10      	pop	{r4, pc}

08000e50 <__aeabi_fcmplt>:
 8000e50:	b510      	push	{r4, lr}
 8000e52:	f000 f8bb 	bl	8000fcc <__lesf2>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	db01      	blt.n	8000e5e <__aeabi_fcmplt+0xe>
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	bd10      	pop	{r4, pc}
 8000e5e:	2001      	movs	r0, #1
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)

08000e64 <__aeabi_fcmple>:
 8000e64:	b510      	push	{r4, lr}
 8000e66:	f000 f8b1 	bl	8000fcc <__lesf2>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	dd01      	ble.n	8000e72 <__aeabi_fcmple+0xe>
 8000e6e:	2000      	movs	r0, #0
 8000e70:	bd10      	pop	{r4, pc}
 8000e72:	2001      	movs	r0, #1
 8000e74:	bd10      	pop	{r4, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)

08000e78 <__aeabi_fcmpgt>:
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	f000 f857 	bl	8000f2c <__gesf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	dc01      	bgt.n	8000e86 <__aeabi_fcmpgt+0xe>
 8000e82:	2000      	movs	r0, #0
 8000e84:	bd10      	pop	{r4, pc}
 8000e86:	2001      	movs	r0, #1
 8000e88:	bd10      	pop	{r4, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)

08000e8c <__aeabi_fcmpge>:
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	f000 f84d 	bl	8000f2c <__gesf2>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	da01      	bge.n	8000e9a <__aeabi_fcmpge+0xe>
 8000e96:	2000      	movs	r0, #0
 8000e98:	bd10      	pop	{r4, pc}
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)

08000ea0 <__clzsi2>:
 8000ea0:	211c      	movs	r1, #28
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	4298      	cmp	r0, r3
 8000ea8:	d301      	bcc.n	8000eae <__clzsi2+0xe>
 8000eaa:	0c00      	lsrs	r0, r0, #16
 8000eac:	3910      	subs	r1, #16
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	4298      	cmp	r0, r3
 8000eb2:	d301      	bcc.n	8000eb8 <__clzsi2+0x18>
 8000eb4:	0a00      	lsrs	r0, r0, #8
 8000eb6:	3908      	subs	r1, #8
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	4298      	cmp	r0, r3
 8000ebc:	d301      	bcc.n	8000ec2 <__clzsi2+0x22>
 8000ebe:	0900      	lsrs	r0, r0, #4
 8000ec0:	3904      	subs	r1, #4
 8000ec2:	a202      	add	r2, pc, #8	@ (adr r2, 8000ecc <__clzsi2+0x2c>)
 8000ec4:	5c10      	ldrb	r0, [r2, r0]
 8000ec6:	1840      	adds	r0, r0, r1
 8000ec8:	4770      	bx	lr
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	02020304 	.word	0x02020304
 8000ed0:	01010101 	.word	0x01010101
	...

08000edc <__eqsf2>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	0042      	lsls	r2, r0, #1
 8000ee0:	024e      	lsls	r6, r1, #9
 8000ee2:	004c      	lsls	r4, r1, #1
 8000ee4:	0245      	lsls	r5, r0, #9
 8000ee6:	0a6d      	lsrs	r5, r5, #9
 8000ee8:	0e12      	lsrs	r2, r2, #24
 8000eea:	0fc3      	lsrs	r3, r0, #31
 8000eec:	0a76      	lsrs	r6, r6, #9
 8000eee:	0e24      	lsrs	r4, r4, #24
 8000ef0:	0fc9      	lsrs	r1, r1, #31
 8000ef2:	2aff      	cmp	r2, #255	@ 0xff
 8000ef4:	d010      	beq.n	8000f18 <__eqsf2+0x3c>
 8000ef6:	2cff      	cmp	r4, #255	@ 0xff
 8000ef8:	d00c      	beq.n	8000f14 <__eqsf2+0x38>
 8000efa:	2001      	movs	r0, #1
 8000efc:	42a2      	cmp	r2, r4
 8000efe:	d10a      	bne.n	8000f16 <__eqsf2+0x3a>
 8000f00:	42b5      	cmp	r5, r6
 8000f02:	d108      	bne.n	8000f16 <__eqsf2+0x3a>
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d00f      	beq.n	8000f28 <__eqsf2+0x4c>
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d104      	bne.n	8000f16 <__eqsf2+0x3a>
 8000f0c:	0028      	movs	r0, r5
 8000f0e:	1e43      	subs	r3, r0, #1
 8000f10:	4198      	sbcs	r0, r3
 8000f12:	e000      	b.n	8000f16 <__eqsf2+0x3a>
 8000f14:	2001      	movs	r0, #1
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	2001      	movs	r0, #1
 8000f1a:	2cff      	cmp	r4, #255	@ 0xff
 8000f1c:	d1fb      	bne.n	8000f16 <__eqsf2+0x3a>
 8000f1e:	4335      	orrs	r5, r6
 8000f20:	d1f9      	bne.n	8000f16 <__eqsf2+0x3a>
 8000f22:	404b      	eors	r3, r1
 8000f24:	0018      	movs	r0, r3
 8000f26:	e7f6      	b.n	8000f16 <__eqsf2+0x3a>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e7f4      	b.n	8000f16 <__eqsf2+0x3a>

08000f2c <__gesf2>:
 8000f2c:	b530      	push	{r4, r5, lr}
 8000f2e:	0042      	lsls	r2, r0, #1
 8000f30:	0244      	lsls	r4, r0, #9
 8000f32:	024d      	lsls	r5, r1, #9
 8000f34:	0fc3      	lsrs	r3, r0, #31
 8000f36:	0048      	lsls	r0, r1, #1
 8000f38:	0a64      	lsrs	r4, r4, #9
 8000f3a:	0e12      	lsrs	r2, r2, #24
 8000f3c:	0a6d      	lsrs	r5, r5, #9
 8000f3e:	0e00      	lsrs	r0, r0, #24
 8000f40:	0fc9      	lsrs	r1, r1, #31
 8000f42:	2aff      	cmp	r2, #255	@ 0xff
 8000f44:	d019      	beq.n	8000f7a <__gesf2+0x4e>
 8000f46:	28ff      	cmp	r0, #255	@ 0xff
 8000f48:	d00b      	beq.n	8000f62 <__gesf2+0x36>
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	d11e      	bne.n	8000f8c <__gesf2+0x60>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d10b      	bne.n	8000f6a <__gesf2+0x3e>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d027      	beq.n	8000fa6 <__gesf2+0x7a>
 8000f56:	2c00      	cmp	r4, #0
 8000f58:	d134      	bne.n	8000fc4 <__gesf2+0x98>
 8000f5a:	2900      	cmp	r1, #0
 8000f5c:	d02f      	beq.n	8000fbe <__gesf2+0x92>
 8000f5e:	0008      	movs	r0, r1
 8000f60:	bd30      	pop	{r4, r5, pc}
 8000f62:	2d00      	cmp	r5, #0
 8000f64:	d128      	bne.n	8000fb8 <__gesf2+0x8c>
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	d101      	bne.n	8000f6e <__gesf2+0x42>
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	d0f5      	beq.n	8000f5a <__gesf2+0x2e>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d107      	bne.n	8000f82 <__gesf2+0x56>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d023      	beq.n	8000fbe <__gesf2+0x92>
 8000f76:	0018      	movs	r0, r3
 8000f78:	e7f2      	b.n	8000f60 <__gesf2+0x34>
 8000f7a:	2c00      	cmp	r4, #0
 8000f7c:	d11c      	bne.n	8000fb8 <__gesf2+0x8c>
 8000f7e:	28ff      	cmp	r0, #255	@ 0xff
 8000f80:	d014      	beq.n	8000fac <__gesf2+0x80>
 8000f82:	1e58      	subs	r0, r3, #1
 8000f84:	2302      	movs	r3, #2
 8000f86:	4018      	ands	r0, r3
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e7e9      	b.n	8000f60 <__gesf2+0x34>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d0f8      	beq.n	8000f82 <__gesf2+0x56>
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d1f6      	bne.n	8000f82 <__gesf2+0x56>
 8000f94:	4282      	cmp	r2, r0
 8000f96:	dcf4      	bgt.n	8000f82 <__gesf2+0x56>
 8000f98:	dbeb      	blt.n	8000f72 <__gesf2+0x46>
 8000f9a:	42ac      	cmp	r4, r5
 8000f9c:	d8f1      	bhi.n	8000f82 <__gesf2+0x56>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	42ac      	cmp	r4, r5
 8000fa2:	d2dd      	bcs.n	8000f60 <__gesf2+0x34>
 8000fa4:	e7e5      	b.n	8000f72 <__gesf2+0x46>
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d0da      	beq.n	8000f60 <__gesf2+0x34>
 8000faa:	e7ea      	b.n	8000f82 <__gesf2+0x56>
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d103      	bne.n	8000fb8 <__gesf2+0x8c>
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d1e6      	bne.n	8000f82 <__gesf2+0x56>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e7d3      	b.n	8000f60 <__gesf2+0x34>
 8000fb8:	2002      	movs	r0, #2
 8000fba:	4240      	negs	r0, r0
 8000fbc:	e7d0      	b.n	8000f60 <__gesf2+0x34>
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	e7cd      	b.n	8000f60 <__gesf2+0x34>
 8000fc4:	428b      	cmp	r3, r1
 8000fc6:	d0e8      	beq.n	8000f9a <__gesf2+0x6e>
 8000fc8:	e7db      	b.n	8000f82 <__gesf2+0x56>
 8000fca:	46c0      	nop			@ (mov r8, r8)

08000fcc <__lesf2>:
 8000fcc:	b530      	push	{r4, r5, lr}
 8000fce:	0042      	lsls	r2, r0, #1
 8000fd0:	0244      	lsls	r4, r0, #9
 8000fd2:	024d      	lsls	r5, r1, #9
 8000fd4:	0fc3      	lsrs	r3, r0, #31
 8000fd6:	0048      	lsls	r0, r1, #1
 8000fd8:	0a64      	lsrs	r4, r4, #9
 8000fda:	0e12      	lsrs	r2, r2, #24
 8000fdc:	0a6d      	lsrs	r5, r5, #9
 8000fde:	0e00      	lsrs	r0, r0, #24
 8000fe0:	0fc9      	lsrs	r1, r1, #31
 8000fe2:	2aff      	cmp	r2, #255	@ 0xff
 8000fe4:	d01a      	beq.n	800101c <__lesf2+0x50>
 8000fe6:	28ff      	cmp	r0, #255	@ 0xff
 8000fe8:	d00e      	beq.n	8001008 <__lesf2+0x3c>
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d11e      	bne.n	800102c <__lesf2+0x60>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d10e      	bne.n	8001010 <__lesf2+0x44>
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d02a      	beq.n	800104c <__lesf2+0x80>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d00c      	beq.n	8001014 <__lesf2+0x48>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d01d      	beq.n	800103a <__lesf2+0x6e>
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	2302      	movs	r3, #2
 8001002:	4018      	ands	r0, r3
 8001004:	3801      	subs	r0, #1
 8001006:	e010      	b.n	800102a <__lesf2+0x5e>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d10d      	bne.n	8001028 <__lesf2+0x5c>
 800100c:	2a00      	cmp	r2, #0
 800100e:	d120      	bne.n	8001052 <__lesf2+0x86>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d11e      	bne.n	8001052 <__lesf2+0x86>
 8001014:	2900      	cmp	r1, #0
 8001016:	d023      	beq.n	8001060 <__lesf2+0x94>
 8001018:	0008      	movs	r0, r1
 800101a:	e006      	b.n	800102a <__lesf2+0x5e>
 800101c:	2c00      	cmp	r4, #0
 800101e:	d103      	bne.n	8001028 <__lesf2+0x5c>
 8001020:	28ff      	cmp	r0, #255	@ 0xff
 8001022:	d1ec      	bne.n	8000ffe <__lesf2+0x32>
 8001024:	2d00      	cmp	r5, #0
 8001026:	d017      	beq.n	8001058 <__lesf2+0x8c>
 8001028:	2002      	movs	r0, #2
 800102a:	bd30      	pop	{r4, r5, pc}
 800102c:	2800      	cmp	r0, #0
 800102e:	d0e6      	beq.n	8000ffe <__lesf2+0x32>
 8001030:	428b      	cmp	r3, r1
 8001032:	d1e4      	bne.n	8000ffe <__lesf2+0x32>
 8001034:	4282      	cmp	r2, r0
 8001036:	dce2      	bgt.n	8000ffe <__lesf2+0x32>
 8001038:	db04      	blt.n	8001044 <__lesf2+0x78>
 800103a:	42ac      	cmp	r4, r5
 800103c:	d8df      	bhi.n	8000ffe <__lesf2+0x32>
 800103e:	2000      	movs	r0, #0
 8001040:	42ac      	cmp	r4, r5
 8001042:	d2f2      	bcs.n	800102a <__lesf2+0x5e>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00b      	beq.n	8001060 <__lesf2+0x94>
 8001048:	0018      	movs	r0, r3
 800104a:	e7ee      	b.n	800102a <__lesf2+0x5e>
 800104c:	2c00      	cmp	r4, #0
 800104e:	d0ec      	beq.n	800102a <__lesf2+0x5e>
 8001050:	e7d5      	b.n	8000ffe <__lesf2+0x32>
 8001052:	428b      	cmp	r3, r1
 8001054:	d1d3      	bne.n	8000ffe <__lesf2+0x32>
 8001056:	e7f5      	b.n	8001044 <__lesf2+0x78>
 8001058:	2000      	movs	r0, #0
 800105a:	428b      	cmp	r3, r1
 800105c:	d0e5      	beq.n	800102a <__lesf2+0x5e>
 800105e:	e7ce      	b.n	8000ffe <__lesf2+0x32>
 8001060:	2001      	movs	r0, #1
 8001062:	4240      	negs	r0, r0
 8001064:	e7e1      	b.n	800102a <__lesf2+0x5e>
 8001066:	46c0      	nop			@ (mov r8, r8)

08001068 <process_data>:
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;
uint8_t last_reg_address = 0; // Initialize to 0 or a sensible default

void process_data(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
    // Validate buffer boundaries early
    if (rxcount >= RxSIZE || RxData[0] >= REGISTER_COUNT) {
 800106e:	4b7f      	ldr	r3, [pc, #508]	@ (800126c <process_data+0x204>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b29      	cmp	r3, #41	@ 0x29
 8001074:	d803      	bhi.n	800107e <process_data+0x16>
 8001076:	4b7e      	ldr	r3, [pc, #504]	@ (8001270 <process_data+0x208>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b2f      	cmp	r3, #47	@ 0x2f
 800107c:	d909      	bls.n	8001092 <process_data+0x2a>
        memset(RxData, 0, RxSIZE);
 800107e:	4b7c      	ldr	r3, [pc, #496]	@ (8001270 <process_data+0x208>)
 8001080:	222a      	movs	r2, #42	@ 0x2a
 8001082:	2100      	movs	r1, #0
 8001084:	0018      	movs	r0, r3
 8001086:	f004 fd71 	bl	8005b6c <memset>
        rxcount = 0;
 800108a:	4b78      	ldr	r3, [pc, #480]	@ (800126c <process_data+0x204>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
        return;
 8001090:	e0e9      	b.n	8001266 <process_data+0x1fe>
    }

    int startREG = RxData[0];             // Starting register
 8001092:	4b77      	ldr	r3, [pc, #476]	@ (8001270 <process_data+0x208>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
    int numREG = rxcount - 1;             // Total register values received
 8001098:	4b74      	ldr	r3, [pc, #464]	@ (800126c <process_data+0x204>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
    int endREG = startREG + numREG - 1;   // Ending register
 80010a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	18d3      	adds	r3, r2, r3
 80010a6:	3b01      	subs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]

    if (endREG >= REGISTER_COUNT) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80010ae:	dd09      	ble.n	80010c4 <process_data+0x5c>
        // Prevent overflow into invalid registers
        memset(RxData, 0, RxSIZE);
 80010b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001270 <process_data+0x208>)
 80010b2:	222a      	movs	r2, #42	@ 0x2a
 80010b4:	2100      	movs	r1, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f004 fd58 	bl	8005b6c <memset>
        rxcount = 0;
 80010bc:	4b6b      	ldr	r3, [pc, #428]	@ (800126c <process_data+0x204>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
        return;
 80010c2:	e0d0      	b.n	8001266 <process_data+0x1fe>
    }

    int indx = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < numREG; i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	e02b      	b.n	8001126 <process_data+0xbe>
        uint32_t value = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
        for (int byteIndex = 0; byteIndex < 4 && indx < rxcount; byteIndex++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e00f      	b.n	80010f8 <process_data+0x90>
            value |= (uint32_t)RxData[indx++] << (byteIndex * 8);
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	623a      	str	r2, [r7, #32]
 80010de:	4a64      	ldr	r2, [pc, #400]	@ (8001270 <process_data+0x208>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	001a      	movs	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        for (int byteIndex = 0; byteIndex < 4 && indx < rxcount; byteIndex++) {
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	dc05      	bgt.n	800110a <process_data+0xa2>
 80010fe:	4b5b      	ldr	r3, [pc, #364]	@ (800126c <process_data+0x204>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	001a      	movs	r2, r3
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	4293      	cmp	r3, r2
 8001108:	dbe6      	blt.n	80010d8 <process_data+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110a:	b672      	cpsid	i
}
 800110c:	46c0      	nop			@ (mov r8, r8)
        }
        __disable_irq();
        I2C_REGISTERS[startREG++] = value;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	627a      	str	r2, [r7, #36]	@ 0x24
 8001114:	4a57      	ldr	r2, [pc, #348]	@ (8001274 <process_data+0x20c>)
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	69b9      	ldr	r1, [r7, #24]
 800111a:	5099      	str	r1, [r3, r2]
  __ASM volatile ("cpsie i" : : : "memory");
 800111c:	b662      	cpsie	i
}
 800111e:	46c0      	nop			@ (mov r8, r8)
    for (int i = 0; i < numREG; i++) {
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3301      	adds	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbcf      	blt.n	80010ce <process_data+0x66>
        __enable_irq();
    }

    // Control PB0–PB2, PB10–PB14 based on I2C_REGISTERS[8–15]
    for (int i = 0; i < 8; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	e037      	b.n	80011a4 <process_data+0x13c>
        uint16_t pin;
        if (i < 3) {
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2b02      	cmp	r3, #2
 8001138:	dc06      	bgt.n	8001148 <process_data+0xe0>
            pin = GPIO_PIN_0 << i;
 800113a:	2201      	movs	r2, #1
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	409a      	lsls	r2, r3
 8001140:	230e      	movs	r3, #14
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	801a      	strh	r2, [r3, #0]
 8001146:	e019      	b.n	800117c <process_data+0x114>
        } else if (i == 3) {
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d105      	bne.n	800115a <process_data+0xf2>
            pin = GPIO_PIN_10;
 800114e:	230e      	movs	r3, #14
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	801a      	strh	r2, [r3, #0]
 8001158:	e010      	b.n	800117c <process_data+0x114>
        } else if (i == 4) {
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d105      	bne.n	800116c <process_data+0x104>
            pin = GPIO_PIN_11;
 8001160:	230e      	movs	r3, #14
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2280      	movs	r2, #128	@ 0x80
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	e007      	b.n	800117c <process_data+0x114>
        } else {
            pin = GPIO_PIN_12 << (i - 5);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	3b05      	subs	r3, #5
 8001170:	2280      	movs	r2, #128	@ 0x80
 8001172:	0152      	lsls	r2, r2, #5
 8001174:	409a      	lsls	r2, r3
 8001176:	230e      	movs	r3, #14
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	801a      	strh	r2, [r3, #0]
        }

        HAL_GPIO_WritePin(GPIOB, pin, I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3308      	adds	r3, #8
 8001180:	001a      	movs	r2, r3
 8001182:	4b3c      	ldr	r3, [pc, #240]	@ (8001274 <process_data+0x20c>)
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	58d3      	ldr	r3, [r2, r3]
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	4193      	sbcs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	001a      	movs	r2, r3
 8001190:	230e      	movs	r3, #14
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	4838      	ldr	r0, [pc, #224]	@ (8001278 <process_data+0x210>)
 8001198:	0019      	movs	r1, r3
 800119a:	f002 f9ce 	bl	800353a <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	ddc4      	ble.n	8001134 <process_data+0xcc>
  __ASM volatile ("cpsid i" : : : "memory");
 80011aa:	b672      	cpsid	i
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
    }

    // Read digital inputs into I2C_REGISTERS[24–31]
    __disable_irq();
    I2C_REGISTERS[24] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <process_data+0x214>)
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	0018      	movs	r0, r3
 80011b4:	f002 f9a4 	bl	8003500 <HAL_GPIO_ReadPin>
 80011b8:	0003      	movs	r3, r0
 80011ba:	001a      	movs	r2, r3
 80011bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <process_data+0x20c>)
 80011be:	661a      	str	r2, [r3, #96]	@ 0x60
    I2C_REGISTERS[25] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80011c0:	2380      	movs	r3, #128	@ 0x80
 80011c2:	021a      	lsls	r2, r3, #8
 80011c4:	2390      	movs	r3, #144	@ 0x90
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f002 f998 	bl	8003500 <HAL_GPIO_ReadPin>
 80011d0:	0003      	movs	r3, r0
 80011d2:	001a      	movs	r2, r3
 80011d4:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <process_data+0x20c>)
 80011d6:	665a      	str	r2, [r3, #100]	@ 0x64
    I2C_REGISTERS[26] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <process_data+0x210>)
 80011da:	2108      	movs	r1, #8
 80011dc:	0018      	movs	r0, r3
 80011de:	f002 f98f 	bl	8003500 <HAL_GPIO_ReadPin>
 80011e2:	0003      	movs	r3, r0
 80011e4:	001a      	movs	r2, r3
 80011e6:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <process_data+0x20c>)
 80011e8:	669a      	str	r2, [r3, #104]	@ 0x68
    I2C_REGISTERS[27] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <process_data+0x210>)
 80011ec:	2110      	movs	r1, #16
 80011ee:	0018      	movs	r0, r3
 80011f0:	f002 f986 	bl	8003500 <HAL_GPIO_ReadPin>
 80011f4:	0003      	movs	r3, r0
 80011f6:	001a      	movs	r2, r3
 80011f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <process_data+0x20c>)
 80011fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    I2C_REGISTERS[28] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <process_data+0x210>)
 80011fe:	2120      	movs	r1, #32
 8001200:	0018      	movs	r0, r3
 8001202:	f002 f97d 	bl	8003500 <HAL_GPIO_ReadPin>
 8001206:	0003      	movs	r3, r0
 8001208:	001a      	movs	r2, r3
 800120a:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <process_data+0x20c>)
 800120c:	671a      	str	r2, [r3, #112]	@ 0x70
    I2C_REGISTERS[29] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <process_data+0x210>)
 8001214:	0019      	movs	r1, r3
 8001216:	0010      	movs	r0, r2
 8001218:	f002 f972 	bl	8003500 <HAL_GPIO_ReadPin>
 800121c:	0003      	movs	r3, r0
 800121e:	001a      	movs	r2, r3
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <process_data+0x20c>)
 8001222:	675a      	str	r2, [r3, #116]	@ 0x74
    I2C_REGISTERS[30] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4a13      	ldr	r2, [pc, #76]	@ (8001278 <process_data+0x210>)
 800122a:	0019      	movs	r1, r3
 800122c:	0010      	movs	r0, r2
 800122e:	f002 f967 	bl	8003500 <HAL_GPIO_ReadPin>
 8001232:	0003      	movs	r3, r0
 8001234:	001a      	movs	r2, r3
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <process_data+0x20c>)
 8001238:	679a      	str	r2, [r3, #120]	@ 0x78
    I2C_REGISTERS[31] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <process_data+0x218>)
 8001240:	0019      	movs	r1, r3
 8001242:	0010      	movs	r0, r2
 8001244:	f002 f95c 	bl	8003500 <HAL_GPIO_ReadPin>
 8001248:	0003      	movs	r3, r0
 800124a:	001a      	movs	r2, r3
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <process_data+0x20c>)
 800124e:	67da      	str	r2, [r3, #124]	@ 0x7c
  __ASM volatile ("cpsie i" : : : "memory");
 8001250:	b662      	cpsie	i
}
 8001252:	46c0      	nop			@ (mov r8, r8)
    __enable_irq();

    // Clear receive buffer
    memset(RxData, 0, RxSIZE);
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <process_data+0x208>)
 8001256:	222a      	movs	r2, #42	@ 0x2a
 8001258:	2100      	movs	r1, #0
 800125a:	0018      	movs	r0, r3
 800125c:	f004 fc86 	bl	8005b6c <memset>
    rxcount = 0;
 8001260:	4b02      	ldr	r3, [pc, #8]	@ (800126c <process_data+0x204>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	46bd      	mov	sp, r7
 8001268:	b00a      	add	sp, #40	@ 0x28
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000112 	.word	0x20000112
 8001270:	200000e8 	.word	0x200000e8
 8001274:	20000028 	.word	0x20000028
 8001278:	48000400 	.word	0x48000400
 800127c:	48001400 	.word	0x48001400
 8001280:	48000800 	.word	0x48000800

08001284 <HAL_I2C_ListenCpltCallback>:


void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	0018      	movs	r0, r3
 8001290:	f002 fbc8 	bl	8003a24 <HAL_I2C_EnableListen_IT>
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_I2C_AddrCallback>:
//        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[startPosition], sizeof(uint32_t), I2C_FIRST_FRAME);
//    }
//}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	0008      	movs	r0, r1
 80012a6:	0011      	movs	r1, r2
 80012a8:	1cfb      	adds	r3, r7, #3
 80012aa:	1c02      	adds	r2, r0, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	003b      	movs	r3, r7
 80012b0:	1c0a      	adds	r2, r1, #0
 80012b2:	801a      	strh	r2, [r3, #0]
    if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // Master writes to slave
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_I2C_AddrCallback+0x3c>
    {
        rxcount = 0;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_I2C_AddrCallback+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_FIRST_FRAME);
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_I2C_AddrCallback+0x74>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001a      	movs	r2, r3
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_I2C_AddrCallback+0x78>)
 80012ca:	18d1      	adds	r1, r2, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2201      	movs	r2, #1
 80012d2:	f002 fae5 	bl	80038a0 <HAL_I2C_Slave_Seq_Receive_IT>
        if (reg_to_read >= REGISTER_COUNT) { // Use REGISTER_COUNT defined in i2c_slave.c
            reg_to_read = 0;  // Fallback
        }
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[reg_to_read], sizeof(uint32_t), I2C_FIRST_FRAME);
    }
}
 80012d6:	e017      	b.n	8001308 <HAL_I2C_AddrCallback+0x6c>
        uint8_t reg_to_read = last_reg_address;
 80012d8:	210f      	movs	r1, #15
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <HAL_I2C_AddrCallback+0x7c>)
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	701a      	strb	r2, [r3, #0]
        if (reg_to_read >= REGISTER_COUNT) { // Use REGISTER_COUNT defined in i2c_slave.c
 80012e2:	000a      	movs	r2, r1
 80012e4:	18bb      	adds	r3, r7, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80012ea:	d902      	bls.n	80012f2 <HAL_I2C_AddrCallback+0x56>
            reg_to_read = 0;  // Fallback
 80012ec:	18bb      	adds	r3, r7, r2
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[reg_to_read], sizeof(uint32_t), I2C_FIRST_FRAME);
 80012f2:	230f      	movs	r3, #15
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	009a      	lsls	r2, r3, #2
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_I2C_AddrCallback+0x80>)
 80012fc:	18d1      	adds	r1, r2, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	2300      	movs	r3, #0
 8001302:	2204      	movs	r2, #4
 8001304:	f002 fa0c 	bl	8003720 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000112 	.word	0x20000112
 8001314:	200000e8 	.word	0x200000e8
 8001318:	20000114 	.word	0x20000114
 800131c:	20000028 	.word	0x20000028

08001320 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    rxcount++;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8001332:	701a      	strb	r2, [r3, #0]
    // If this is the *first* byte received in a master write (which is the register address)
    if (rxcount == 1 && bytesRrecvd == 0) // Assuming bytesRrecvd tracks if a new transaction started
 8001334:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <HAL_I2C_SlaveRxCpltCallback+0x2c>
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_I2C_SlaveRxCpltCallback+0x8c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_I2C_SlaveRxCpltCallback+0x2c>
    {
        last_reg_address = RxData[0]; // Store the register address
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 800134a:	701a      	strb	r2, [r3, #0]
    }

    if (rxcount < RxSIZE)
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b29      	cmp	r3, #41	@ 0x29
 8001352:	d81a      	bhi.n	800138a <HAL_I2C_SlaveRxCpltCallback+0x6a>
    {
        if (rxcount == RxSIZE - 1)
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b29      	cmp	r3, #41	@ 0x29
 800135a:	d10b      	bne.n	8001374 <HAL_I2C_SlaveRxCpltCallback+0x54>
        {
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_LAST_FRAME);
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	001a      	movs	r2, r3
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8001364:	18d1      	adds	r1, r2, r3
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	049b      	lsls	r3, r3, #18
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f002 fa97 	bl	80038a0 <HAL_I2C_Slave_Seq_Receive_IT>
 8001372:	e00a      	b.n	800138a <HAL_I2C_SlaveRxCpltCallback+0x6a>
        }
        else
        {
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_NEXT_FRAME);
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	001a      	movs	r2, r3
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 800137c:	18d1      	adds	r1, r2, r3
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	045b      	lsls	r3, r3, #17
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f002 fa8b 	bl	80038a0 <HAL_I2C_Slave_Seq_Receive_IT>
        }
    }

    if (rxcount == RxSIZE || hi2c->XferSize == 0) // Consider if XferSize becomes 0 indicating end of transfer
 800138a:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001390:	d003      	beq.n	800139a <HAL_I2C_SlaveRxCpltCallback+0x7a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_I2C_SlaveRxCpltCallback+0x7e>
    {
        process_data();  // Process received data
 800139a:	f7ff fe65 	bl	8001068 <process_data>
    }
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	20000112 	.word	0x20000112
 80013ac:	20000113 	.word	0x20000113
 80013b0:	200000e8 	.word	0x200000e8
 80013b4:	20000114 	.word	0x20000114

080013b8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    uint32_t errorcode = HAL_I2C_GetError(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 fbf3 	bl	8003bae <HAL_I2C_GetError>
 80013c8:	0003      	movs	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
    if (errorcode == HAL_I2C_ERROR_AF)  // Acknowledge failure
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d102      	bne.n	80013d8 <HAL_I2C_ErrorCallback+0x20>
    {
        // Process the received data in case of an ACK failure
        process_data();
 80013d2:	f7ff fe49 	bl	8001068 <process_data>
 80013d6:	e013      	b.n	8001400 <HAL_I2C_ErrorCallback+0x48>
    }
    else if (errorcode == HAL_I2C_ERROR_BERR)  // Bus error
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d110      	bne.n	8001400 <HAL_I2C_ErrorCallback+0x48>
    {
        HAL_I2C_DeInit(hi2c);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f002 f96d 	bl	80036c0 <HAL_I2C_DeInit>
        HAL_I2C_Init(hi2c);  // Reinitialize the I2C
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 f8c3 	bl	8003574 <HAL_I2C_Init>
        memset(RxData, '\0', RxSIZE);  // Reset the Rx buffer
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_I2C_ErrorCallback+0x58>)
 80013f0:	222a      	movs	r2, #42	@ 0x2a
 80013f2:	2100      	movs	r1, #0
 80013f4:	0018      	movs	r0, r3
 80013f6:	f004 fbb9 	bl	8005b6c <memset>
        rxcount = 0;  // Reset the count
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_I2C_ErrorCallback+0x5c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    }

    HAL_I2C_EnableListen_IT(hi2c);  // Re-enable listen mode
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0018      	movs	r0, r3
 8001404:	f002 fb0e 	bl	8003a24 <HAL_I2C_EnableListen_IT>
}
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b004      	add	sp, #16
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000e8 	.word	0x200000e8
 8001414:	20000112 	.word	0x20000112

08001418 <Kalman_Init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
  * @brief Initializes Kalman Filter
  */
void Kalman_Init(KalmanFilter *kf, float q, float r) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
    kf->Q = q;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	601a      	str	r2, [r3, #0]
    kf->R = r;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
    kf->P = 1.0f;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	22fe      	movs	r2, #254	@ 0xfe
 8001434:	0592      	lsls	r2, r2, #22
 8001436:	609a      	str	r2, [r3, #8]
    kf->x = 0.0f;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}

08001446 <Kalman_Update>:

/**
  * @brief Updates Kalman Filter with new measurement
  */
float Kalman_Update(KalmanFilter *kf, float measurement) {
 8001446:	b5b0      	push	{r4, r5, r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
    // Prediction update
    kf->P = kf->P + kf->Q;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1c19      	adds	r1, r3, #0
 800145a:	1c10      	adds	r0, r2, #0
 800145c:	f7fe fef8 	bl	8000250 <__aeabi_fadd>
 8001460:	1c03      	adds	r3, r0, #0
 8001462:	1c1a      	adds	r2, r3, #0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689c      	ldr	r4, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	1c19      	adds	r1, r3, #0
 8001476:	1c10      	adds	r0, r2, #0
 8001478:	f7fe feea 	bl	8000250 <__aeabi_fadd>
 800147c:	1c03      	adds	r3, r0, #0
 800147e:	1c19      	adds	r1, r3, #0
 8001480:	1c20      	adds	r0, r4, #0
 8001482:	f7ff f86f 	bl	8000564 <__aeabi_fdiv>
 8001486:	1c03      	adds	r3, r0, #0
 8001488:	1c1a      	adds	r2, r3, #0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60da      	str	r2, [r3, #12]
    kf->x = kf->x + kf->K * (measurement - kf->x);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691c      	ldr	r4, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68dd      	ldr	r5, [r3, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	1c19      	adds	r1, r3, #0
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff fabf 	bl	8000a20 <__aeabi_fsub>
 80014a2:	1c03      	adds	r3, r0, #0
 80014a4:	1c19      	adds	r1, r3, #0
 80014a6:	1c28      	adds	r0, r5, #0
 80014a8:	f7ff f97c 	bl	80007a4 <__aeabi_fmul>
 80014ac:	1c03      	adds	r3, r0, #0
 80014ae:	1c19      	adds	r1, r3, #0
 80014b0:	1c20      	adds	r0, r4, #0
 80014b2:	f7fe fecd 	bl	8000250 <__aeabi_fadd>
 80014b6:	1c03      	adds	r3, r0, #0
 80014b8:	1c1a      	adds	r2, r3, #0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
    kf->P = (1 - kf->K) * kf->P;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	1c19      	adds	r1, r3, #0
 80014c4:	20fe      	movs	r0, #254	@ 0xfe
 80014c6:	0580      	lsls	r0, r0, #22
 80014c8:	f7ff faaa 	bl	8000a20 <__aeabi_fsub>
 80014cc:	1c03      	adds	r3, r0, #0
 80014ce:	1c1a      	adds	r2, r3, #0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	1c19      	adds	r1, r3, #0
 80014d6:	1c10      	adds	r0, r2, #0
 80014d8:	f7ff f964 	bl	80007a4 <__aeabi_fmul>
 80014dc:	1c03      	adds	r3, r0, #0
 80014de:	1c1a      	adds	r2, r3, #0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]

    return kf->x;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
}
 80014e8:	1c18      	adds	r0, r3, #0
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bdb0      	pop	{r4, r5, r7, pc}

080014f0 <Perform_Calibration>:

/**
  * @brief Performs zero-current calibration
  */
void Perform_Calibration(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	@ 0x30
 80014f4:	af00      	add	r7, sp, #0
    uint32_t sums[ADC_CHANNELS] = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	0018      	movs	r0, r3
 80014fa:	2320      	movs	r3, #32
 80014fc:	001a      	movs	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	f004 fb34 	bl	8005b6c <memset>

    // Take multiple samples
    for (int s = 0; s < CALIBRATION_SAMPLES; s++) {
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001508:	e024      	b.n	8001554 <Perform_Calibration+0x64>
        HAL_ADC_Start_DMA(&hadc, ADC_Reads, ADC_CHANNELS);
 800150a:	4928      	ldr	r1, [pc, #160]	@ (80015ac <Perform_Calibration+0xbc>)
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <Perform_Calibration+0xc0>)
 800150e:	2208      	movs	r2, #8
 8001510:	0018      	movs	r0, r3
 8001512:	f001 f82b 	bl	800256c <HAL_ADC_Start_DMA>
        HAL_Delay(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f000 fec4 	bl	80022a4 <HAL_Delay>

        for (int i = 0; i < ADC_CHANNELS; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001520:	e00f      	b.n	8001542 <Perform_Calibration+0x52>
            sums[i] += ADC_Reads[i];
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	58d2      	ldr	r2, [r2, r3]
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <Perform_Calibration+0xbc>)
 800152c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800152e:	0089      	lsls	r1, r1, #2
 8001530:	58cb      	ldr	r3, [r1, r3]
 8001532:	18d1      	adds	r1, r2, r3
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < ADC_CHANNELS; i++) {
 800153c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153e:	3301      	adds	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	2b07      	cmp	r3, #7
 8001546:	ddec      	ble.n	8001522 <Perform_Calibration+0x32>
        }
        HAL_Delay(5);
 8001548:	2005      	movs	r0, #5
 800154a:	f000 feab 	bl	80022a4 <HAL_Delay>
    for (int s = 0; s < CALIBRATION_SAMPLES; s++) {
 800154e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001550:	3301      	adds	r3, #1
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001556:	2b63      	cmp	r3, #99	@ 0x63
 8001558:	ddd7      	ble.n	800150a <Perform_Calibration+0x1a>
    }

    // Calculate averages
    for (int i = 0; i < ADC_CHANNELS; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
 800155e:	e01a      	b.n	8001596 <Perform_Calibration+0xa6>
        calibration_data[i] = sums[i] / CALIBRATION_SAMPLES;
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	58d3      	ldr	r3, [r2, r3]
 8001568:	2164      	movs	r1, #100	@ 0x64
 800156a:	0018      	movs	r0, r3
 800156c:	f7fe fdcc 	bl	8000108 <__udivsi3>
 8001570:	0003      	movs	r3, r0
 8001572:	0019      	movs	r1, r3
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <Perform_Calibration+0xc4>)
 8001576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	50d1      	str	r1, [r2, r3]
        I2C_REGISTERS[40 + i] = calibration_data[i]; // Store in registers 40-47
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	3328      	adds	r3, #40	@ 0x28
 8001580:	001a      	movs	r2, r3
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <Perform_Calibration+0xc4>)
 8001584:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001586:	0089      	lsls	r1, r1, #2
 8001588:	58c9      	ldr	r1, [r1, r3]
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <Perform_Calibration+0xc8>)
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < ADC_CHANNELS; i++) {
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	3301      	adds	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	2b07      	cmp	r3, #7
 800159a:	dde1      	ble.n	8001560 <Perform_Calibration+0x70>
    }

    calibration_done = true;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <Perform_Calibration+0xcc>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b00c      	add	sp, #48	@ 0x30
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	200001f4 	.word	0x200001f4
 80015b0:	20000118 	.word	0x20000118
 80015b4:	20000288 	.word	0x20000288
 80015b8:	20000028 	.word	0x20000028
 80015bc:	20000284 	.word	0x20000284

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f000 fe09 	bl	80021dc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 fa0d 	bl	80019e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 fb75 	bl	8001cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80015d2:	f000 fb55 	bl	8001c80 <MX_DMA_Init>
  MX_ADC_Init();
 80015d6:	f000 fa65 	bl	8001aa4 <MX_ADC_Init>
  MX_I2C1_Init();
 80015da:	f000 fb19 	bl	8001c10 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  // Enable I2C slave listen mode
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
 80015de:	4bcc      	ldr	r3, [pc, #816]	@ (8001910 <main+0x350>)
 80015e0:	0018      	movs	r0, r3
 80015e2:	f002 fa1f 	bl	8003a24 <HAL_I2C_EnableListen_IT>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <main+0x2e>
    Error_Handler();
 80015ea:	f000 fc6f 	bl	8001ecc <Error_Handler>
  }

  // Initialize Kalman Filters with tuned parameters
  for (int i = 0; i < ADC_CHANNELS; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e00f      	b.n	8001614 <main+0x54>
    Kalman_Init(&kalmanFilters[i], 1.0f, 100.0f);
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	0013      	movs	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	189b      	adds	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4ac5      	ldr	r2, [pc, #788]	@ (8001914 <main+0x354>)
 8001600:	189b      	adds	r3, r3, r2
 8001602:	4ac5      	ldr	r2, [pc, #788]	@ (8001918 <main+0x358>)
 8001604:	21fe      	movs	r1, #254	@ 0xfe
 8001606:	0589      	lsls	r1, r1, #22
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff05 	bl	8001418 <Kalman_Init>
  for (int i = 0; i < ADC_CHANNELS; i++) {
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b07      	cmp	r3, #7
 8001618:	ddec      	ble.n	80015f4 <main+0x34>
//	  Kalman_Init(&kalmanFilters[i], 4.0f, 50.0f);
  }

  // Perform initial calibration
  Perform_Calibration();
 800161a:	f7ff ff69 	bl	80014f0 <Perform_Calibration>
  /* USER CODE BEGIN WHILE */
  while (1) {
    // Start ADC conversion
//    HAL_ADC_Start_DMA(&hadc, ADC_Reads, ADC_CHANNELS);
//    HAL_Delay(1);  // Allow sampling to complete
	  adc_done = false;
 800161e:	4bbf      	ldr	r3, [pc, #764]	@ (800191c <main+0x35c>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_DMA(&hadc, ADC_Reads, ADC_CHANNELS);
 8001624:	49be      	ldr	r1, [pc, #760]	@ (8001920 <main+0x360>)
 8001626:	4bbf      	ldr	r3, [pc, #764]	@ (8001924 <main+0x364>)
 8001628:	2208      	movs	r2, #8
 800162a:	0018      	movs	r0, r3
 800162c:	f000 ff9e 	bl	800256c <HAL_ADC_Start_DMA>
	  while (!adc_done);  // Wait here until DMA completes safely
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	4bba      	ldr	r3, [pc, #744]	@ (800191c <main+0x35c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2201      	movs	r2, #1
 800163a:	4053      	eors	r3, r2
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f7      	bne.n	8001632 <main+0x72>
	  for (int i = 0; i < ADC_CHANNELS; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e0a9      	b.n	800179c <main+0x1dc>
	      uint32_t current_sample = ADC_Reads[i];
 8001648:	4bb5      	ldr	r3, [pc, #724]	@ (8001920 <main+0x360>)
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	58d3      	ldr	r3, [r2, r3]
 8001650:	613b      	str	r3, [r7, #16]
	      int32_t adjusted_sample = (int32_t)current_sample - (int32_t)calibration_data[i];
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4ab4      	ldr	r2, [pc, #720]	@ (8001928 <main+0x368>)
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	0089      	lsls	r1, r1, #2
 800165a:	588a      	ldr	r2, [r1, r2]
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	46c0      	nop			@ (mov r8, r8)

	      // Save raw ADC data to registers 0–7
	      __disable_irq();
	      I2C_REGISTERS[i] = current_sample;
 8001664:	4bb1      	ldr	r3, [pc, #708]	@ (800192c <main+0x36c>)
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("cpsie i" : : : "memory");
 800166e:	b662      	cpsie	i
}
 8001670:	46c0      	nop			@ (mov r8, r8)
	      __enable_irq();

	      // Zero detection: if adjusted value is near zero
	      if (abs(adjusted_sample) < NOISE_THRESHOLD) {
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3309      	adds	r3, #9
 8001676:	db25      	blt.n	80016c4 <main+0x104>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b09      	cmp	r3, #9
 800167c:	dc22      	bgt.n	80016c4 <main+0x104>
	          zero_count[i]++;
 800167e:	4bac      	ldr	r3, [pc, #688]	@ (8001930 <main+0x370>)
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	0052      	lsls	r2, r2, #1
 8001684:	5ad3      	ldrh	r3, [r2, r3]
 8001686:	3301      	adds	r3, #1
 8001688:	b299      	uxth	r1, r3
 800168a:	4ba9      	ldr	r3, [pc, #676]	@ (8001930 <main+0x370>)
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	0052      	lsls	r2, r2, #1
 8001690:	52d1      	strh	r1, [r2, r3]
	          if (zero_count[i] >= 5) {  // 5 consecutive near-zero readings
 8001692:	4ba7      	ldr	r3, [pc, #668]	@ (8001930 <main+0x370>)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	0052      	lsls	r2, r2, #1
 8001698:	5ad3      	ldrh	r3, [r2, r3]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d94c      	bls.n	8001738 <main+0x178>
	              max_value[i] = 0;
 800169e:	4ba5      	ldr	r3, [pc, #660]	@ (8001934 <main+0x374>)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	2100      	movs	r1, #0
 80016a6:	50d1      	str	r1, [r2, r3]
	              Kalman_Init(&kalmanFilters[i], 1.0f, 100.0f);
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	0013      	movs	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	189b      	adds	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4a98      	ldr	r2, [pc, #608]	@ (8001914 <main+0x354>)
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	4a98      	ldr	r2, [pc, #608]	@ (8001918 <main+0x358>)
 80016b8:	21fe      	movs	r1, #254	@ 0xfe
 80016ba:	0589      	lsls	r1, r1, #22
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff feab 	bl	8001418 <Kalman_Init>
	          if (zero_count[i] >= 5) {  // 5 consecutive near-zero readings
 80016c2:	e039      	b.n	8001738 <main+0x178>
	          }
	      } else {
	          zero_count[i] = 0;
 80016c4:	4b9a      	ldr	r3, [pc, #616]	@ (8001930 <main+0x370>)
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	2100      	movs	r1, #0
 80016cc:	52d1      	strh	r1, [r2, r3]
	          if ((uint32_t)abs(adjusted_sample) > max_value[i]) {
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	17da      	asrs	r2, r3, #31
 80016d2:	189b      	adds	r3, r3, r2
 80016d4:	4053      	eors	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	4b96      	ldr	r3, [pc, #600]	@ (8001934 <main+0x374>)
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	58d3      	ldr	r3, [r2, r3]
 80016e0:	4299      	cmp	r1, r3
 80016e2:	d909      	bls.n	80016f8 <main+0x138>
	              max_value[i] = (uint32_t)abs(adjusted_sample);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	17da      	asrs	r2, r3, #31
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	4053      	eors	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	4b91      	ldr	r3, [pc, #580]	@ (8001934 <main+0x374>)
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	50d1      	str	r1, [r2, r3]
 80016f6:	e01f      	b.n	8001738 <main+0x178>
	          } else {
	              max_value[i] *= 0.998f;  // decay
 80016f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001934 <main+0x374>)
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	58d3      	ldr	r3, [r2, r3]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fb51 	bl	8000da8 <__aeabi_ui2f>
 8001706:	1c03      	adds	r3, r0, #0
 8001708:	498b      	ldr	r1, [pc, #556]	@ (8001938 <main+0x378>)
 800170a:	1c18      	adds	r0, r3, #0
 800170c:	f7ff f84a 	bl	80007a4 <__aeabi_fmul>
 8001710:	1c03      	adds	r3, r0, #0
 8001712:	1c18      	adds	r0, r3, #0
 8001714:	f7fe fd84 	bl	8000220 <__aeabi_f2uiz>
 8001718:	0001      	movs	r1, r0
 800171a:	4b86      	ldr	r3, [pc, #536]	@ (8001934 <main+0x374>)
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	50d1      	str	r1, [r2, r3]
	              if (max_value[i] < 1) max_value[i] = 0;
 8001722:	4b84      	ldr	r3, [pc, #528]	@ (8001934 <main+0x374>)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	58d3      	ldr	r3, [r2, r3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d104      	bne.n	8001738 <main+0x178>
 800172e:	4b81      	ldr	r3, [pc, #516]	@ (8001934 <main+0x374>)
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	2100      	movs	r1, #0
 8001736:	50d1      	str	r1, [r2, r3]
	          }
	      }

	      float filtered_peak = Kalman_Update(&kalmanFilters[i], (float)max_value[i]);
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	0013      	movs	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	189b      	adds	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4a74      	ldr	r2, [pc, #464]	@ (8001914 <main+0x354>)
 8001744:	189c      	adds	r4, r3, r2
 8001746:	4b7b      	ldr	r3, [pc, #492]	@ (8001934 <main+0x374>)
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	58d3      	ldr	r3, [r2, r3]
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fb2a 	bl	8000da8 <__aeabi_ui2f>
 8001754:	1c03      	adds	r3, r0, #0
 8001756:	1c19      	adds	r1, r3, #0
 8001758:	0020      	movs	r0, r4
 800175a:	f7ff fe74 	bl	8001446 <Kalman_Update>
 800175e:	1c03      	adds	r3, r0, #0
 8001760:	60bb      	str	r3, [r7, #8]
	      float amps = filtered_peak * 0.00403f;
 8001762:	4976      	ldr	r1, [pc, #472]	@ (800193c <main+0x37c>)
 8001764:	68b8      	ldr	r0, [r7, #8]
 8001766:	f7ff f81d 	bl	80007a4 <__aeabi_fmul>
 800176a:	1c03      	adds	r3, r0, #0
 800176c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800176e:	b672      	cpsid	i
}
 8001770:	46c0      	nop			@ (mov r8, r8)
	      __disable_irq();
	      I2C_REGISTERS[32 + i] = (uint32_t)(amps * 1000.0f);  // store in mA
 8001772:	4973      	ldr	r1, [pc, #460]	@ (8001940 <main+0x380>)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f815 	bl	80007a4 <__aeabi_fmul>
 800177a:	1c03      	adds	r3, r0, #0
 800177c:	1c1a      	adds	r2, r3, #0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	3320      	adds	r3, #32
 8001782:	001c      	movs	r4, r3
 8001784:	1c10      	adds	r0, r2, #0
 8001786:	f7fe fd4b 	bl	8000220 <__aeabi_f2uiz>
 800178a:	0001      	movs	r1, r0
 800178c:	4b67      	ldr	r3, [pc, #412]	@ (800192c <main+0x36c>)
 800178e:	00a2      	lsls	r2, r4, #2
 8001790:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("cpsie i" : : : "memory");
 8001792:	b662      	cpsie	i
}
 8001794:	46c0      	nop			@ (mov r8, r8)
	  for (int i = 0; i < ADC_CHANNELS; i++) {
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	3301      	adds	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	dc00      	bgt.n	80017a4 <main+0x1e4>
 80017a2:	e751      	b.n	8001648 <main+0x88>
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	46c0      	nop			@ (mov r8, r8)
    // ... (Unchanged from your original implementation) ...
    // Update digital input feedback values to I2C registers 16-23
    __disable_irq();
    // write I2C_REGISTERS[x]

           I2C_REGISTERS[16] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4a65      	ldr	r2, [pc, #404]	@ (8001944 <main+0x384>)
 80017ae:	0019      	movs	r1, r3
 80017b0:	0010      	movs	r0, r2
 80017b2:	f001 fea5 	bl	8003500 <HAL_GPIO_ReadPin>
 80017b6:	0003      	movs	r3, r0
 80017b8:	001a      	movs	r2, r3
 80017ba:	4b5c      	ldr	r3, [pc, #368]	@ (800192c <main+0x36c>)
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
           I2C_REGISTERS[17] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	01db      	lsls	r3, r3, #7
 80017c2:	4a60      	ldr	r2, [pc, #384]	@ (8001944 <main+0x384>)
 80017c4:	0019      	movs	r1, r3
 80017c6:	0010      	movs	r0, r2
 80017c8:	f001 fe9a 	bl	8003500 <HAL_GPIO_ReadPin>
 80017cc:	0003      	movs	r3, r0
 80017ce:	001a      	movs	r2, r3
 80017d0:	4b56      	ldr	r3, [pc, #344]	@ (800192c <main+0x36c>)
 80017d2:	645a      	str	r2, [r3, #68]	@ 0x44
           I2C_REGISTERS[18] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 80017d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001948 <main+0x388>)
 80017d6:	2102      	movs	r1, #2
 80017d8:	0018      	movs	r0, r3
 80017da:	f001 fe91 	bl	8003500 <HAL_GPIO_ReadPin>
 80017de:	0003      	movs	r3, r0
 80017e0:	001a      	movs	r2, r3
 80017e2:	4b52      	ldr	r3, [pc, #328]	@ (800192c <main+0x36c>)
 80017e4:	649a      	str	r2, [r3, #72]	@ 0x48
           I2C_REGISTERS[19] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0);
 80017e6:	4b58      	ldr	r3, [pc, #352]	@ (8001948 <main+0x388>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	0018      	movs	r0, r3
 80017ec:	f001 fe88 	bl	8003500 <HAL_GPIO_ReadPin>
 80017f0:	0003      	movs	r3, r0
 80017f2:	001a      	movs	r2, r3
 80017f4:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <main+0x36c>)
 80017f6:	64da      	str	r2, [r3, #76]	@ 0x4c
           I2C_REGISTERS[20] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4a53      	ldr	r2, [pc, #332]	@ (800194c <main+0x38c>)
 80017fe:	0019      	movs	r1, r3
 8001800:	0010      	movs	r0, r2
 8001802:	f001 fe7d 	bl	8003500 <HAL_GPIO_ReadPin>
 8001806:	0003      	movs	r3, r0
 8001808:	001a      	movs	r2, r3
 800180a:	4b48      	ldr	r3, [pc, #288]	@ (800192c <main+0x36c>)
 800180c:	651a      	str	r2, [r3, #80]	@ 0x50
           I2C_REGISTERS[21] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	005a      	lsls	r2, r3, #1
 8001812:	2390      	movs	r3, #144	@ 0x90
 8001814:	05db      	lsls	r3, r3, #23
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f001 fe71 	bl	8003500 <HAL_GPIO_ReadPin>
 800181e:	0003      	movs	r3, r0
 8001820:	001a      	movs	r2, r3
 8001822:	4b42      	ldr	r3, [pc, #264]	@ (800192c <main+0x36c>)
 8001824:	655a      	str	r2, [r3, #84]	@ 0x54
           I2C_REGISTERS[22] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	009a      	lsls	r2, r3, #2
 800182a:	2390      	movs	r3, #144	@ 0x90
 800182c:	05db      	lsls	r3, r3, #23
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f001 fe65 	bl	8003500 <HAL_GPIO_ReadPin>
 8001836:	0003      	movs	r3, r0
 8001838:	001a      	movs	r2, r3
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <main+0x36c>)
 800183c:	659a      	str	r2, [r3, #88]	@ 0x58
           I2C_REGISTERS[23] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	00da      	lsls	r2, r3, #3
 8001842:	2390      	movs	r3, #144	@ 0x90
 8001844:	05db      	lsls	r3, r3, #23
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f001 fe59 	bl	8003500 <HAL_GPIO_ReadPin>
 800184e:	0003      	movs	r3, r0
 8001850:	001a      	movs	r2, r3
 8001852:	4b36      	ldr	r3, [pc, #216]	@ (800192c <main+0x36c>)
 8001854:	65da      	str	r2, [r3, #92]	@ 0x5c

           // Read the button states (GPIO pins configured as inputs with pull-down)
           currentButtonState[0] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);   // PF7
 8001856:	4b3c      	ldr	r3, [pc, #240]	@ (8001948 <main+0x388>)
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	0018      	movs	r0, r3
 800185c:	f001 fe50 	bl	8003500 <HAL_GPIO_ReadPin>
 8001860:	0003      	movs	r3, r0
 8001862:	001a      	movs	r2, r3
 8001864:	4b3a      	ldr	r3, [pc, #232]	@ (8001950 <main+0x390>)
 8001866:	601a      	str	r2, [r3, #0]
           currentButtonState[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);  // PA15
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	021a      	lsls	r2, r3, #8
 800186c:	2390      	movs	r3, #144	@ 0x90
 800186e:	05db      	lsls	r3, r3, #23
 8001870:	0011      	movs	r1, r2
 8001872:	0018      	movs	r0, r3
 8001874:	f001 fe44 	bl	8003500 <HAL_GPIO_ReadPin>
 8001878:	0003      	movs	r3, r0
 800187a:	001a      	movs	r2, r3
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <main+0x390>)
 800187e:	605a      	str	r2, [r3, #4]
           currentButtonState[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);   // PB3
 8001880:	4b32      	ldr	r3, [pc, #200]	@ (800194c <main+0x38c>)
 8001882:	2108      	movs	r1, #8
 8001884:	0018      	movs	r0, r3
 8001886:	f001 fe3b 	bl	8003500 <HAL_GPIO_ReadPin>
 800188a:	0003      	movs	r3, r0
 800188c:	001a      	movs	r2, r3
 800188e:	4b30      	ldr	r3, [pc, #192]	@ (8001950 <main+0x390>)
 8001890:	609a      	str	r2, [r3, #8]
           currentButtonState[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);   // PB4
 8001892:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <main+0x38c>)
 8001894:	2110      	movs	r1, #16
 8001896:	0018      	movs	r0, r3
 8001898:	f001 fe32 	bl	8003500 <HAL_GPIO_ReadPin>
 800189c:	0003      	movs	r3, r0
 800189e:	001a      	movs	r2, r3
 80018a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <main+0x390>)
 80018a2:	60da      	str	r2, [r3, #12]
           currentButtonState[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);   // PB5
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <main+0x38c>)
 80018a6:	2120      	movs	r1, #32
 80018a8:	0018      	movs	r0, r3
 80018aa:	f001 fe29 	bl	8003500 <HAL_GPIO_ReadPin>
 80018ae:	0003      	movs	r3, r0
 80018b0:	001a      	movs	r2, r3
 80018b2:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <main+0x390>)
 80018b4:	611a      	str	r2, [r3, #16]
           currentButtonState[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);   // PB8
 80018b6:	2380      	movs	r3, #128	@ 0x80
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4a24      	ldr	r2, [pc, #144]	@ (800194c <main+0x38c>)
 80018bc:	0019      	movs	r1, r3
 80018be:	0010      	movs	r0, r2
 80018c0:	f001 fe1e 	bl	8003500 <HAL_GPIO_ReadPin>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <main+0x390>)
 80018ca:	615a      	str	r2, [r3, #20]
           currentButtonState[6] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);  // PC13 (Note: PC13 is out of order here, but consistent with original code)
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	019b      	lsls	r3, r3, #6
 80018d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <main+0x384>)
 80018d2:	0019      	movs	r1, r3
 80018d4:	0010      	movs	r0, r2
 80018d6:	f001 fe13 	bl	8003500 <HAL_GPIO_ReadPin>
 80018da:	0003      	movs	r3, r0
 80018dc:	001a      	movs	r2, r3
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <main+0x390>)
 80018e0:	619a      	str	r2, [r3, #24]
           currentButtonState[7] =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);   // PB9
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4a19      	ldr	r2, [pc, #100]	@ (800194c <main+0x38c>)
 80018e8:	0019      	movs	r1, r3
 80018ea:	0010      	movs	r0, r2
 80018ec:	f001 fe08 	bl	8003500 <HAL_GPIO_ReadPin>
 80018f0:	0003      	movs	r3, r0
 80018f2:	001a      	movs	r2, r3
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <main+0x390>)
 80018f6:	61da      	str	r2, [r3, #28]


           // Update I2C_REGISTERS 24-31 with the current button states using memcpy for efficiency
           memcpy(&I2C_REGISTERS[24], currentButtonState, ADC_CHANNELS * sizeof(uint32_t));
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <main+0x36c>)
 80018fa:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <main+0x390>)
 80018fc:	3360      	adds	r3, #96	@ 0x60
 80018fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001900:	c313      	stmia	r3!, {r0, r1, r4}
 8001902:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001904:	c313      	stmia	r3!, {r0, r1, r4}
 8001906:	ca03      	ldmia	r2!, {r0, r1}
 8001908:	c303      	stmia	r3!, {r0, r1}

           // Toggle LEDs based on button states (I2C_REGISTERS 8-15)
           // This implements a simple toggle functionality for LEDs linked to button presses.
           for (int i = 0; i < ADC_CHANNELS; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e057      	b.n	80019c0 <main+0x400>
 8001910:	2000019c 	.word	0x2000019c
 8001914:	200002a8 	.word	0x200002a8
 8001918:	42c80000 	.word	0x42c80000
 800191c:	200001f0 	.word	0x200001f0
 8001920:	200001f4 	.word	0x200001f4
 8001924:	20000118 	.word	0x20000118
 8001928:	20000288 	.word	0x20000288
 800192c:	20000028 	.word	0x20000028
 8001930:	20000254 	.word	0x20000254
 8001934:	20000234 	.word	0x20000234
 8001938:	3f7f7cee 	.word	0x3f7f7cee
 800193c:	3b840e17 	.word	0x3b840e17
 8001940:	447a0000 	.word	0x447a0000
 8001944:	48000800 	.word	0x48000800
 8001948:	48001400 	.word	0x48001400
 800194c:	48000400 	.word	0x48000400
 8001950:	20000264 	.word	0x20000264
               // Check for a falling edge (button pressed: was HIGH, now LOW)
               if (currentButtonState[i] == GPIO_PIN_RESET && lastButtonState[i] == GPIO_PIN_SET) {
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <main+0x414>)
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	58d3      	ldr	r3, [r2, r3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d124      	bne.n	80019aa <main+0x3ea>
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <main+0x418>)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	58d3      	ldr	r3, [r2, r3]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d11e      	bne.n	80019aa <main+0x3ea>
                   // Toggle the corresponding LED state in I2C_REGISTERS (0 to 1, or 1 to 0)
                   I2C_REGISTERS[8 + i] ^= 1; // XOR with 1 to toggle
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3308      	adds	r3, #8
 8001970:	001a      	movs	r2, r3
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <main+0x41c>)
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	58d3      	ldr	r3, [r2, r3]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	3208      	adds	r2, #8
 800197c:	2101      	movs	r1, #1
 800197e:	4059      	eors	r1, r3
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <main+0x41c>)
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	50d1      	str	r1, [r2, r3]
                   // Update the physical state of the LEDs based on the toggled register value
                   HAL_GPIO_WritePin(GPIOB, ledPins[i], I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <main+0x420>)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	0052      	lsls	r2, r2, #1
 800198c:	5ad1      	ldrh	r1, [r2, r3]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3308      	adds	r3, #8
 8001992:	001a      	movs	r2, r3
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <main+0x41c>)
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	58d3      	ldr	r3, [r2, r3]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	4193      	sbcs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	001a      	movs	r2, r3
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <main+0x424>)
 80019a4:	0018      	movs	r0, r3
 80019a6:	f001 fdc8 	bl	800353a <HAL_GPIO_WritePin>
               }
               lastButtonState[i] = currentButtonState[i]; // Update last button state for the next iteration
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <main+0x414>)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	58d1      	ldr	r1, [r2, r3]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <main+0x418>)
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	50d1      	str	r1, [r2, r3]
           for (int i = 0; i < ADC_CHANNELS; i++) {
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	ddc6      	ble.n	8001954 <main+0x394>
  __ASM volatile ("cpsie i" : : : "memory");
 80019c6:	b662      	cpsie	i
}
 80019c8:	46c0      	nop			@ (mov r8, r8)
           }
           __enable_irq();
    HAL_Delay(100);  // Main loop delay
 80019ca:	2064      	movs	r0, #100	@ 0x64
 80019cc:	f000 fc6a 	bl	80022a4 <HAL_Delay>
	  adc_done = false;
 80019d0:	e625      	b.n	800161e <main+0x5e>
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	20000264 	.word	0x20000264
 80019d8:	20000214 	.word	0x20000214
 80019dc:	20000028 	.word	0x20000028
 80019e0:	08005c58 	.word	0x08005c58
 80019e4:	48000400 	.word	0x48000400

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b095      	sub	sp, #84	@ 0x54
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	2420      	movs	r4, #32
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	2330      	movs	r3, #48	@ 0x30
 80019f6:	001a      	movs	r2, r3
 80019f8:	2100      	movs	r1, #0
 80019fa:	f004 f8b7 	bl	8005b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fe:	2310      	movs	r3, #16
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	0018      	movs	r0, r3
 8001a04:	2310      	movs	r3, #16
 8001a06:	001a      	movs	r2, r3
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f004 f8af 	bl	8005b6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0e:	003b      	movs	r3, r7
 8001a10:	0018      	movs	r0, r3
 8001a12:	2310      	movs	r3, #16
 8001a14:	001a      	movs	r2, r3
 8001a16:	2100      	movs	r1, #0
 8001a18:	f004 f8a8 	bl	8005b6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001a1c:	0021      	movs	r1, r4
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2212      	movs	r2, #18
 8001a22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2201      	movs	r2, #1
 8001a28:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2210      	movs	r2, #16
 8001a34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2210      	movs	r2, #16
 8001a3a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; // PLL is not used in this configuration
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	0018      	movs	r0, r3
 8001a46:	f003 fb85 	bl	8005154 <HAL_RCC_OscConfig>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a4e:	f000 fa3d 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	2110      	movs	r1, #16
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2207      	movs	r2, #7
 8001a58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1; // Configure HCLK, SYSCLK, and PCLK1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI; // System clock sourced from HSI
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1; // AHB clock not divided
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1; // APB1 clock not divided
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2100      	movs	r1, #0
 8001a70:	0018      	movs	r0, r3
 8001a72:	f003 fe89 	bl	8005788 <HAL_RCC_ClockConfig>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a7a:	f000 fa27 	bl	8001ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1; // Select I2C1 peripheral clock
 8001a7e:	003b      	movs	r3, r7
 8001a80:	2220      	movs	r2, #32
 8001a82:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI; // I2C1 clock sourced from HSI
 8001a84:	003b      	movs	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8a:	003b      	movs	r3, r7
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f003 ff9f 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a96:	f000 fa19 	bl	8001ecc <Error_Handler>
  }
}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b015      	add	sp, #84	@ 0x54
 8001aa0:	bd90      	pop	{r4, r7, pc}
	...

08001aa4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	0018      	movs	r0, r3
 8001aae:	230c      	movs	r3, #12
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f004 f85a 	bl	8005b6c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1; // Use ADC1 peripheral
 8001ab8:	4b53      	ldr	r3, [pc, #332]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001aba:	4a54      	ldr	r2, [pc, #336]	@ (8001c0c <MX_ADC_Init+0x168>)
 8001abc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1; // Asynchronous clock, no prescaler
 8001abe:	4b52      	ldr	r3, [pc, #328]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B; // 12-bit resolution
 8001ac4:	4b50      	ldr	r3, [pc, #320]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT; // Right alignment of data
 8001aca:	4b4f      	ldr	r3, [pc, #316]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD; // Scan all configured channels in forward direction
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV; // End of conversion flag for single conversion
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ad8:	2204      	movs	r2, #4
 8001ada:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE; // Disable low power auto wait
 8001adc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE; // Disable low power auto power off
 8001ae2:	4b49      	ldr	r3, [pc, #292]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE; // Disable continuous conversion mode
 8001ae8:	4b47      	ldr	r3, [pc, #284]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE; // Disable discontinuous conversion mode
 8001aee:	4b46      	ldr	r3, [pc, #280]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START; // Conversion triggered by software
 8001af4:	4b44      	ldr	r3, [pc, #272]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001af6:	22c2      	movs	r2, #194	@ 0xc2
 8001af8:	32ff      	adds	r2, #255	@ 0xff
 8001afa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE; // No external trigger edge
 8001afc:	4b42      	ldr	r3, [pc, #264]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE; // Enable DMA continuous requests for ADC
 8001b02:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b04:	2224      	movs	r2, #36	@ 0x24
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED; // Preserve data on overrun
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001b10:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 fbea 	bl	80022ec <HAL_ADC_Init>
 8001b18:	1e03      	subs	r3, r0, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001b1c:	f000 f9d6 	bl	8001ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   * Channels are configured sequentially for scan mode.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER; // Rank is determined by channel number in scan mode
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	0152      	lsls	r2, r2, #5
 8001b2c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5; // Shortest sampling time
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2280      	movs	r2, #128	@ 0x80
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b36:	1d3a      	adds	r2, r7, #4
 8001b38:	4b33      	ldr	r3, [pc, #204]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 fda7 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001b46:	f000 f9c1 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b50:	1d3a      	adds	r2, r7, #4
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fd9a 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001b60:	f000 f9b4 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_2;
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b6a:	1d3a      	adds	r2, r7, #4
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fd8d 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d001      	beq.n	8001b7e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001b7a:	f000 f9a7 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2203      	movs	r2, #3
 8001b82:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b84:	1d3a      	adds	r2, r7, #4
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001b88:	0011      	movs	r1, r2
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fd80 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d001      	beq.n	8001b98 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001b94:	f000 f99a 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_4;
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b9e:	1d3a      	adds	r2, r7, #4
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fd73 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001bae:	f000 f98d 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_5;
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bb8:	1d3a      	adds	r2, r7, #4
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001bbc:	0011      	movs	r1, r2
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 fd66 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8001bc8:	f000 f980 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_6;
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2206      	movs	r2, #6
 8001bd0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bd2:	1d3a      	adds	r2, r7, #4
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f000 fd59 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8001be2:	f000 f973 	bl	8001ecc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_7;
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bec:	1d3a      	adds	r2, r7, #4
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_ADC_Init+0x164>)
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fd4c 	bl	8002690 <HAL_ADC_ConfigChannel>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8001bfc:	f000 f966 	bl	8001ecc <Error_Handler>
  }
}
 8001c00:	46c0      	nop			@ (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b004      	add	sp, #16
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000118 	.word	0x20000118
 8001c0c:	40012400 	.word	0x40012400

08001c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1; // Use I2C1 peripheral
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c16:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <MX_I2C1_Init+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E; // I2C timing register value (specific to target frequency)
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c1c:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <MX_I2C1_Init+0x6c>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36; // Primary I2C slave address
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c22:	2224      	movs	r2, #36	@ 0x24
 8001c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; // 7-bit addressing mode
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE; // Enable dual addressing mode
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c2e:	2280      	movs	r2, #128	@ 0x80
 8001c30:	0212      	lsls	r2, r2, #8
 8001c32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0x45<<1; // Secondary I2C slave address (shifted left by 1 as per standard)
 8001c34:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c36:	228a      	movs	r2, #138	@ 0x8a
 8001c38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK; // No mask for secondary address
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE; // Enable general call recognition
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	0312      	lsls	r2, r2, #12
 8001c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; // Disable clock stretching
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <MX_I2C1_Init+0x64>)
 8001c50:	0018      	movs	r0, r3
 8001c52:	f001 fc8f 	bl	8003574 <HAL_I2C_Init>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001c5a:	f000 f937 	bl	8001ecc <Error_Handler>
//  }

  /* USER CODE BEGIN I2C1_Init 2 */
  // Set I2C interrupt priorities. Lower priority than ADC DMA (0,0) to prevent preemption.
  // For STM32F0 series, I2C events and errors often share a single IRQn.
  HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0); // I2C Interrupt (Events and Errors) priority group 1, subpriority 0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2101      	movs	r1, #1
 8001c62:	2017      	movs	r0, #23
 8001c64:	f000 ffe0 	bl	8002c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_IRQn); // Enable I2C1 global interrupt
 8001c68:	2017      	movs	r0, #23
 8001c6a:	f000 fff2 	bl	8002c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE END I2C1_Init 2 */
}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000019c 	.word	0x2000019c
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	2000090e 	.word	0x2000090e

08001c80 <MX_DMA_Init>:
  * @brief Enable DMA controller clock and configure DMA interrupts.
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE(); // Enable clock for DMA1 peripheral
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <MX_DMA_Init+0x38>)
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <MX_DMA_Init+0x38>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <MX_DMA_Init+0x38>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0); // ADC DMA priority is 0,0 (highest priority)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2009      	movs	r0, #9
 8001ca4:	f000 ffc0 	bl	8002c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); // Enable DMA1 Channel1 global interrupt
 8001ca8:	2009      	movs	r0, #9
 8001caa:	f000 ffd2 	bl	8002c52 <HAL_NVIC_EnableIRQ>
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b08b      	sub	sp, #44	@ 0x2c
 8001cc0:	af00      	add	r7, sp, #0
  // Enable the required GPIO Ports Clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	4b75      	ldr	r3, [pc, #468]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cc8:	2180      	movs	r1, #128	@ 0x80
 8001cca:	0289      	lsls	r1, r1, #10
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	4b72      	ldr	r3, [pc, #456]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b6f      	ldr	r3, [pc, #444]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001ce4:	2180      	movs	r1, #128	@ 0x80
 8001ce6:	02c9      	lsls	r1, r1, #11
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	4b6b      	ldr	r3, [pc, #428]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	02db      	lsls	r3, r3, #11
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b68      	ldr	r3, [pc, #416]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	4b67      	ldr	r3, [pc, #412]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	0309      	lsls	r1, r1, #12
 8001d04:	430a      	orrs	r2, r1
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	4b64      	ldr	r3, [pc, #400]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	031b      	lsls	r3, r3, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d16:	4b61      	ldr	r3, [pc, #388]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b60      	ldr	r3, [pc, #384]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	03c9      	lsls	r1, r1, #15
 8001d20:	430a      	orrs	r2, r1
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	4b5d      	ldr	r3, [pc, #372]	@ (8001e9c <MX_GPIO_Init+0x1e0>)
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	03db      	lsls	r3, r3, #15
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	2414      	movs	r4, #20
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	0018      	movs	r0, r3
 8001d38:	2314      	movs	r3, #20
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f003 ff15 	bl	8005b6c <memset>

  // Configure PA0-PA7 as Analog Inputs for ADC
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	22ff      	movs	r2, #255	@ 0xff
 8001d46:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; // Set mode to analog for ADC inputs
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down for analog pins
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	193a      	adds	r2, r7, r4
 8001d56:	2390      	movs	r3, #144	@ 0x90
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	0011      	movs	r1, r2
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f001 f98f 	bl	8003080 <HAL_GPIO_Init>

  // Configure PB0, PB1, PB2, PB10, PB11, PB12, PB13, PB14 as Output Pins (for LEDs)
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 |
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	4a4e      	ldr	r2, [pc, #312]	@ (8001ea0 <MX_GPIO_Init+0x1e4>)
 8001d66:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Set mode to push-pull output
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down for outputs
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low output speed
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001d7e:	0019      	movs	r1, r3
 8001d80:	0010      	movs	r0, r2
 8001d82:	f001 f97d 	bl	8003080 <HAL_GPIO_Init>

  // Configure PC15, PC14, PF1, PF0, PB15, PA8, PA9, PA10 as Digital Input Pins with Pull-Down
  // These are general purpose digital inputs
  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14;
 8001d86:	0021      	movs	r1, r4
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	22c0      	movs	r2, #192	@ 0xc0
 8001d8c:	0212      	lsls	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set mode to input
 8001d90:	000c      	movs	r4, r1
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Set pull-down for input pins
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	4a41      	ldr	r2, [pc, #260]	@ (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001da2:	0019      	movs	r1, r3
 8001da4:	0010      	movs	r0, r2
 8001da6:	f001 f96b 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_0;
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	2203      	movs	r2, #3
 8001dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Ensure mode is set for these as well
 8001db0:	193b      	adds	r3, r7, r4
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db6:	193b      	adds	r3, r7, r4
 8001db8:	2202      	movs	r2, #2
 8001dba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dbc:	193b      	adds	r3, r7, r4
 8001dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8001eac <MX_GPIO_Init+0x1f0>)
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	0010      	movs	r0, r2
 8001dc4:	f001 f95c 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dc8:	0021      	movs	r1, r4
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	0212      	lsls	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Ensure mode is set
 8001dd2:	000c      	movs	r4, r1
 8001dd4:	193b      	adds	r3, r7, r4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	2202      	movs	r2, #2
 8001dde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	4a30      	ldr	r2, [pc, #192]	@ (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001de4:	0019      	movs	r1, r3
 8001de6:	0010      	movs	r0, r2
 8001de8:	f001 f94a 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	22e0      	movs	r2, #224	@ 0xe0
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Ensure mode is set
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	193a      	adds	r2, r7, r4
 8001e02:	2390      	movs	r3, #144	@ 0x90
 8001e04:	05db      	lsls	r3, r3, #23
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f001 f939 	bl	8003080 <HAL_GPIO_Init>

  // Configure PF7, PA15, PB3, PB4, PB5, PB8, PB9, PC13 as Digital Input Pins with Pull-Down
  // These are specifically for button inputs
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	2280      	movs	r2, #128	@ 0x80
 8001e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	4a22      	ldr	r2, [pc, #136]	@ (8001eac <MX_GPIO_Init+0x1f0>)
 8001e24:	0019      	movs	r1, r3
 8001e26:	0010      	movs	r0, r2
 8001e28:	f001 f92a 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	193a      	adds	r2, r7, r4
 8001e42:	2390      	movs	r3, #144	@ 0x90
 8001e44:	05db      	lsls	r3, r3, #23
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f001 f919 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9;
 8001e4e:	0021      	movs	r1, r4
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	22ce      	movs	r2, #206	@ 0xce
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	000c      	movs	r4, r1
 8001e5a:	193b      	adds	r3, r7, r4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e60:	193b      	adds	r3, r7, r4
 8001e62:	2202      	movs	r2, #2
 8001e64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea4 <MX_GPIO_Init+0x1e8>)
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	0010      	movs	r0, r2
 8001e6e:	f001 f907 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e72:	0021      	movs	r1, r4
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2280      	movs	r2, #128	@ 0x80
 8001e78:	0192      	lsls	r2, r2, #6
 8001e7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2202      	movs	r2, #2
 8001e86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <MX_GPIO_Init+0x1ec>)
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0010      	movs	r0, r2
 8001e90:	f001 f8f6 	bl	8003080 <HAL_GPIO_Init>
}
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b00b      	add	sp, #44	@ 0x2c
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	00007c07 	.word	0x00007c07
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48001400 	.word	0x48001400

08001eb0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    adc_done = true;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_ADC_ConvCpltCallback+0x18>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	200001f0 	.word	0x200001f0

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq(); // Disable global interrupts to prevent further execution
  while (1)
 8001ed4:	46c0      	nop			@ (mov r8, r8)
 8001ed6:	e7fd      	b.n	8001ed4 <Error_Handler+0x8>

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	619a      	str	r2, [r3, #24]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <HAL_MspInit+0x44>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_MspInit+0x44>)
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	0549      	lsls	r1, r1, #21
 8001f00:	430a      	orrs	r2, r1
 8001f02:	61da      	str	r2, [r3, #28]
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_MspInit+0x44>)
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	055b      	lsls	r3, r3, #21
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000

08001f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b08b      	sub	sp, #44	@ 0x2c
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	2414      	movs	r4, #20
 8001f2a:	193b      	adds	r3, r7, r4
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	2314      	movs	r3, #20
 8001f30:	001a      	movs	r2, r3
 8001f32:	2100      	movs	r1, #0
 8001f34:	f003 fe1a 	bl	8005b6c <memset>
  if(hadc->Instance==ADC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff4 <HAL_ADC_MspInit+0xd4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d153      	bne.n	8001fea <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	0089      	lsls	r1, r1, #2
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f64:	2180      	movs	r1, #128	@ 0x80
 8001f66:	0289      	lsls	r1, r1, #10
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	615a      	str	r2, [r3, #20]
 8001f6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <HAL_ADC_MspInit+0xd8>)
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	22ff      	movs	r2, #255	@ 0xff
 8001f7e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	2203      	movs	r2, #3
 8001f84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	193a      	adds	r2, r7, r4
 8001f8e:	2390      	movs	r3, #144	@ 0x90
 8001f90:	05db      	lsls	r3, r3, #23
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f001 f873 	bl	8003080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001f9c:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_ADC_MspInit+0xe0>)
 8001f9e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fb4:	2280      	movs	r2, #128	@ 0x80
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 fe6b 	bl	8002cac <HAL_DMA_Init>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001fda:	f7ff ff77 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_ADC_MspInit+0xdc>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b00b      	add	sp, #44	@ 0x2c
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	40012400 	.word	0x40012400
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	20000158 	.word	0x20000158
 8002000:	40020008 	.word	0x40020008

08002004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b08b      	sub	sp, #44	@ 0x2c
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	2414      	movs	r4, #20
 800200e:	193b      	adds	r3, r7, r4
 8002010:	0018      	movs	r0, r3
 8002012:	2314      	movs	r3, #20
 8002014:	001a      	movs	r2, r3
 8002016:	2100      	movs	r1, #0
 8002018:	f003 fda8 	bl	8005b6c <memset>
  if(hi2c->Instance==I2C1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a20      	ldr	r2, [pc, #128]	@ (80020a4 <HAL_I2C_MspInit+0xa0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d139      	bne.n	800209a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_I2C_MspInit+0xa4>)
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_I2C_MspInit+0xa4>)
 800202c:	2180      	movs	r1, #128	@ 0x80
 800202e:	02c9      	lsls	r1, r1, #11
 8002030:	430a      	orrs	r2, r1
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <HAL_I2C_MspInit+0xa4>)
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	02db      	lsls	r3, r3, #11
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002042:	0021      	movs	r1, r4
 8002044:	187b      	adds	r3, r7, r1
 8002046:	22c0      	movs	r2, #192	@ 0xc0
 8002048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2212      	movs	r2, #18
 800204e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	187b      	adds	r3, r7, r1
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002056:	187b      	adds	r3, r7, r1
 8002058:	2203      	movs	r2, #3
 800205a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2201      	movs	r2, #1
 8002060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	187b      	adds	r3, r7, r1
 8002064:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <HAL_I2C_MspInit+0xa8>)
 8002066:	0019      	movs	r1, r3
 8002068:	0010      	movs	r0, r2
 800206a:	f001 f809 	bl	8003080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_I2C_MspInit+0xa4>)
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_I2C_MspInit+0xa4>)
 8002074:	2180      	movs	r1, #128	@ 0x80
 8002076:	0389      	lsls	r1, r1, #14
 8002078:	430a      	orrs	r2, r1
 800207a:	61da      	str	r2, [r3, #28]
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_I2C_MspInit+0xa4>)
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	039b      	lsls	r3, r3, #14
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2017      	movs	r0, #23
 8002090:	f000 fdca 	bl	8002c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002094:	2017      	movs	r0, #23
 8002096:	f000 fddc 	bl	8002c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b00b      	add	sp, #44	@ 0x2c
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	40005400 	.word	0x40005400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400

080020b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	@ (80020f0 <HAL_I2C_MspDeInit+0x40>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d112      	bne.n	80020e8 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <HAL_I2C_MspDeInit+0x44>)
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_I2C_MspDeInit+0x44>)
 80020c8:	490b      	ldr	r1, [pc, #44]	@ (80020f8 <HAL_I2C_MspDeInit+0x48>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_I2C_MspDeInit+0x4c>)
 80020d0:	2140      	movs	r1, #64	@ 0x40
 80020d2:	0018      	movs	r0, r3
 80020d4:	f001 f944 	bl	8003360 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_I2C_MspDeInit+0x4c>)
 80020da:	2180      	movs	r1, #128	@ 0x80
 80020dc:	0018      	movs	r0, r3
 80020de:	f001 f93f 	bl	8003360 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 80020e2:	2017      	movs	r0, #23
 80020e4:	f000 fdc5 	bl	8002c72 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005400 	.word	0x40005400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	ffdfffff 	.word	0xffdfffff
 80020fc:	48000400 	.word	0x48000400

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	e7fd      	b.n	8002104 <NMI_Handler+0x4>

08002108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	e7fd      	b.n	800210c <HardFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002114:	46c0      	nop			@ (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 f8a0 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <DMA1_Channel1_IRQHandler+0x14>)
 800213a:	0018      	movs	r0, r3
 800213c:	f000 fea9 	bl	8002e92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	20000158 	.word	0x20000158

0800214c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <I2C1_IRQHandler+0x2c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	23e0      	movs	r3, #224	@ 0xe0
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4013      	ands	r3, r2
 800215c:	d004      	beq.n	8002168 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <I2C1_IRQHandler+0x2c>)
 8002160:	0018      	movs	r0, r3
 8002162:	f001 fc9b 	bl	8003a9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002166:	e003      	b.n	8002170 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <I2C1_IRQHandler+0x2c>)
 800216a:	0018      	movs	r0, r3
 800216c:	f001 fc7c 	bl	8003a68 <HAL_I2C_EV_IRQHandler>
}
 8002170:	46c0      	nop			@ (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	2000019c 	.word	0x2000019c

0800217c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8002188:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800218a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800218c:	f7ff fff6 	bl	800217c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	@ (80021c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <LoopForever+0xe>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	@ (80021d4 <LoopForever+0x16>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021b6:	f003 fce1 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ba:	f7ff fa01 	bl	80015c0 <main>

080021be <LoopForever>:

LoopForever:
    b LoopForever
 80021be:	e7fe      	b.n	80021be <LoopForever>
   ldr   r0, =_estack
 80021c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021cc:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 80021d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021d4:	2000034c 	.word	0x2000034c

080021d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC1_IRQHandler>
	...

080021dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <HAL_Init+0x24>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_Init+0x24>)
 80021e6:	2110      	movs	r1, #16
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f809 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f2:	f7ff fe71 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	40022000 	.word	0x40022000

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800220c:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <HAL_InitTick+0x5c>)
 800220e:	681c      	ldr	r4, [r3, #0]
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_InitTick+0x60>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	0019      	movs	r1, r3
 8002216:	23fa      	movs	r3, #250	@ 0xfa
 8002218:	0098      	lsls	r0, r3, #2
 800221a:	f7fd ff75 	bl	8000108 <__udivsi3>
 800221e:	0003      	movs	r3, r0
 8002220:	0019      	movs	r1, r3
 8002222:	0020      	movs	r0, r4
 8002224:	f7fd ff70 	bl	8000108 <__udivsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fd31 	bl	8002c92 <HAL_SYSTICK_Config>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d001      	beq.n	8002238 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e00f      	b.n	8002258 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d80b      	bhi.n	8002256 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	2301      	movs	r3, #1
 8002242:	425b      	negs	r3, r3
 8002244:	2200      	movs	r2, #0
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fcee 	bl	8002c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_InitTick+0x64>)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b003      	add	sp, #12
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	20000000 	.word	0x20000000
 8002264:	20000008 	.word	0x20000008
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */

__weak void HAL_IncTick(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_IncTick+0x1c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	001a      	movs	r2, r3
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_IncTick+0x20>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	18d2      	adds	r2, r2, r3
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_IncTick+0x20>)
 800227e:	601a      	str	r2, [r3, #0]
}
 8002280:	46c0      	nop			@ (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	20000008 	.word	0x20000008
 800228c:	20000348 	.word	0x20000348

08002290 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b02      	ldr	r3, [pc, #8]	@ (80022a0 <HAL_GetTick+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	20000348 	.word	0x20000348

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff fff0 	bl	8002290 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3301      	adds	r3, #1
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	001a      	movs	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	f7ff ffe0 	bl	8002290 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f4:	230f      	movs	r3, #15
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e125      	b.n	8002556 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2234      	movs	r2, #52	@ 0x34
 800231c:	2100      	movs	r1, #0
 800231e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff fdfc 	bl	8001f20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	2210      	movs	r2, #16
 800232e:	4013      	ands	r3, r2
 8002330:	d000      	beq.n	8002334 <HAL_ADC_Init+0x48>
 8002332:	e103      	b.n	800253c <HAL_ADC_Init+0x250>
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d000      	beq.n	8002340 <HAL_ADC_Init+0x54>
 800233e:	e0fd      	b.n	800253c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2204      	movs	r2, #4
 8002348:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800234a:	d000      	beq.n	800234e <HAL_ADC_Init+0x62>
 800234c:	e0f6      	b.n	800253c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	4a83      	ldr	r2, [pc, #524]	@ (8002560 <HAL_ADC_Init+0x274>)
 8002354:	4013      	ands	r3, r2
 8002356:	2202      	movs	r2, #2
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	2b01      	cmp	r3, #1
 800236a:	d112      	bne.n	8002392 <HAL_ADC_Init+0xa6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	4013      	ands	r3, r2
 8002376:	2b01      	cmp	r3, #1
 8002378:	d009      	beq.n	800238e <HAL_ADC_Init+0xa2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	401a      	ands	r2, r3
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	429a      	cmp	r2, r3
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0xa6>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_ADC_Init+0xa8>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d116      	bne.n	80023c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2218      	movs	r2, #24
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	0899      	lsrs	r1, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4964      	ldr	r1, [pc, #400]	@ (8002564 <HAL_ADC_Init+0x278>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7e1b      	ldrb	r3, [r3, #24]
 80023da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e5b      	ldrb	r3, [r3, #25]
 80023e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e9b      	ldrb	r3, [r3, #26]
 80023e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d002      	beq.n	80023fa <HAL_ADC_Init+0x10e>
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	015b      	lsls	r3, r3, #5
 80023f8:	e000      	b.n	80023fc <HAL_ADC_Init+0x110>
 80023fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002402:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d101      	bne.n	8002410 <HAL_ADC_Init+0x124>
 800240c:	2304      	movs	r3, #4
 800240e:	e000      	b.n	8002412 <HAL_ADC_Init+0x126>
 8002410:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002412:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2124      	movs	r1, #36	@ 0x24
 8002418:	5c5b      	ldrb	r3, [r3, r1]
 800241a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800241c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4313      	orrs	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7edb      	ldrb	r3, [r3, #27]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d115      	bne.n	8002458 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7e9b      	ldrb	r3, [r3, #26]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	0252      	lsls	r2, r2, #9
 800243a:	4313      	orrs	r3, r2
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	e00b      	b.n	8002458 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002444:	2220      	movs	r2, #32
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	2201      	movs	r2, #1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	23c2      	movs	r3, #194	@ 0xc2
 800245e:	33ff      	adds	r3, #255	@ 0xff
 8002460:	429a      	cmp	r2, r3
 8002462:	d007      	beq.n	8002474 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800246c:	4313      	orrs	r3, r2
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4313      	orrs	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	055b      	lsls	r3, r3, #21
 800248c:	429a      	cmp	r2, r3
 800248e:	d01b      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d017      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	2b02      	cmp	r3, #2
 800249e:	d013      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d00f      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00b      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d007      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	2b06      	cmp	r3, #6
 80024be:	d003      	beq.n	80024c8 <HAL_ADC_Init+0x1dc>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	2b07      	cmp	r3, #7
 80024c6:	d112      	bne.n	80024ee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2107      	movs	r1, #7
 80024d4:	438a      	bics	r2, r1
 80024d6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6959      	ldr	r1, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	2207      	movs	r2, #7
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <HAL_ADC_Init+0x27c>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d10b      	bne.n	8002516 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	2203      	movs	r2, #3
 800250a:	4393      	bics	r3, r2
 800250c:	2201      	movs	r2, #1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002514:	e01c      	b.n	8002550 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251a:	2212      	movs	r2, #18
 800251c:	4393      	bics	r3, r2
 800251e:	2210      	movs	r2, #16
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2201      	movs	r2, #1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002532:	230f      	movs	r3, #15
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800253a:	e009      	b.n	8002550 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	2210      	movs	r2, #16
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002550:	230f      	movs	r3, #15
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	781b      	ldrb	r3, [r3, #0]
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b004      	add	sp, #16
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	fffffefd 	.word	0xfffffefd
 8002564:	fffe0219 	.word	0xfffe0219
 8002568:	833fffe7 	.word	0x833fffe7

0800256c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002578:	2317      	movs	r3, #23
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2204      	movs	r2, #4
 8002588:	4013      	ands	r3, r2
 800258a:	d15e      	bne.n	800264a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2234      	movs	r2, #52	@ 0x34
 8002590:	5c9b      	ldrb	r3, [r3, r2]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_ADC_Start_DMA+0x2e>
 8002596:	2302      	movs	r3, #2
 8002598:	e05e      	b.n	8002658 <HAL_ADC_Start_DMA+0xec>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2234      	movs	r2, #52	@ 0x34
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	7e5b      	ldrb	r3, [r3, #25]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d007      	beq.n	80025ba <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fc      	adds	r4, r7, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f963 	bl	800287c <ADC_Enable>
 80025b6:	0003      	movs	r3, r0
 80025b8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025ba:	2317      	movs	r3, #23
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d146      	bne.n	8002652 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <HAL_ADC_Start_DMA+0xf4>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	0052      	lsls	r2, r2, #1
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2234      	movs	r2, #52	@ 0x34
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002664 <HAL_ADC_Start_DMA+0xf8>)
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002668 <HAL_ADC_Start_DMA+0xfc>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <HAL_ADC_Start_DMA+0x100>)
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	221c      	movs	r2, #28
 8002602:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2110      	movs	r1, #16
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3340      	adds	r3, #64	@ 0x40
 800262e:	0019      	movs	r1, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f000 fb82 	bl	8002d3c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2104      	movs	r1, #4
 8002644:	430a      	orrs	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	e003      	b.n	8002652 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264a:	2317      	movs	r3, #23
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	781b      	ldrb	r3, [r3, #0]
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b007      	add	sp, #28
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	fffff0fe 	.word	0xfffff0fe
 8002664:	08002985 	.word	0x08002985
 8002668:	08002a39 	.word	0x08002a39
 800266c:	08002a57 	.word	0x08002a57

08002670 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002688:	46c0      	nop			@ (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	230f      	movs	r3, #15
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	055b      	lsls	r3, r3, #21
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d011      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x46>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d00d      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x46>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d009      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x46>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d005      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x46>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d001      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x46>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2234      	movs	r2, #52	@ 0x34
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x54>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0bb      	b.n	800285c <HAL_ADC_ConfigChannel+0x1cc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2234      	movs	r2, #52	@ 0x34
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d000      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x6a>
 80026f8:	e09f      	b.n	800283a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a59      	ldr	r2, [pc, #356]	@ (8002864 <HAL_ADC_ConfigChannel+0x1d4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d100      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x76>
 8002704:	e077      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002720:	2380      	movs	r3, #128	@ 0x80
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	429a      	cmp	r2, r3
 8002726:	d037      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d033      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	2b02      	cmp	r3, #2
 8002736:	d02f      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	2b03      	cmp	r3, #3
 800273e:	d02b      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	2b04      	cmp	r3, #4
 8002746:	d027      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	2b05      	cmp	r3, #5
 800274e:	d023      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	2b06      	cmp	r3, #6
 8002756:	d01f      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	2b07      	cmp	r3, #7
 800275e:	d01b      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2107      	movs	r1, #7
 800276c:	400b      	ands	r3, r1
 800276e:	429a      	cmp	r2, r3
 8002770:	d012      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2107      	movs	r1, #7
 800277e:	438a      	bics	r2, r1
 8002780:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6959      	ldr	r1, [r3, #20]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2207      	movs	r2, #7
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b10      	cmp	r3, #16
 800279e:	d003      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x118>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	d152      	bne.n	800284e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80027a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <HAL_ADC_ConfigChannel+0x1d8>)
 80027aa:	6819      	ldr	r1, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d102      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x12a>
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	e001      	b.n	80027be <HAL_ADC_ConfigChannel+0x12e>
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	03db      	lsls	r3, r3, #15
 80027be:	4a2a      	ldr	r2, [pc, #168]	@ (8002868 <HAL_ADC_ConfigChannel+0x1d8>)
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d140      	bne.n	800284e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027cc:	4b27      	ldr	r3, [pc, #156]	@ (800286c <HAL_ADC_ConfigChannel+0x1dc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4927      	ldr	r1, [pc, #156]	@ (8002870 <HAL_ADC_ConfigChannel+0x1e0>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fd fc98 	bl	8000108 <__udivsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	001a      	movs	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	189b      	adds	r3, r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027e6:	e002      	b.n	80027ee <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x158>
 80027f4:	e02b      	b.n	800284e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	4099      	lsls	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b10      	cmp	r3, #16
 8002816:	d003      	beq.n	8002820 <HAL_ADC_ConfigChannel+0x190>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b11      	cmp	r3, #17
 800281e:	d116      	bne.n	800284e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_ADC_ConfigChannel+0x1d8>)
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1a0>
 800282c:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <HAL_ADC_ConfigChannel+0x1e4>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1a2>
 8002830:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_ADC_ConfigChannel+0x1e8>)
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <HAL_ADC_ConfigChannel+0x1d8>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e009      	b.n	800284e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	2220      	movs	r2, #32
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002846:	230f      	movs	r3, #15
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2234      	movs	r2, #52	@ 0x34
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002856:	230f      	movs	r3, #15
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b004      	add	sp, #16
 8002862:	bd80      	pop	{r7, pc}
 8002864:	00001001 	.word	0x00001001
 8002868:	40012708 	.word	0x40012708
 800286c:	20000000 	.word	0x20000000
 8002870:	000f4240 	.word	0x000f4240
 8002874:	ff7fffff 	.word	0xff7fffff
 8002878:	ffbfffff 	.word	0xffbfffff

0800287c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2203      	movs	r2, #3
 8002894:	4013      	ands	r3, r2
 8002896:	2b01      	cmp	r3, #1
 8002898:	d112      	bne.n	80028c0 <ADC_Enable+0x44>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d009      	beq.n	80028bc <ADC_Enable+0x40>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	401a      	ands	r2, r3
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d101      	bne.n	80028c0 <ADC_Enable+0x44>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <ADC_Enable+0x46>
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d152      	bne.n	800296c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <ADC_Enable+0xfc>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	d00d      	beq.n	80028ee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d6:	2210      	movs	r2, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e2:	2201      	movs	r2, #1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e03f      	b.n	800296e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028fe:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <ADC_Enable+0x100>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	491f      	ldr	r1, [pc, #124]	@ (8002980 <ADC_Enable+0x104>)
 8002904:	0018      	movs	r0, r3
 8002906:	f7fd fbff 	bl	8000108 <__udivsi3>
 800290a:	0003      	movs	r3, r0
 800290c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800290e:	e002      	b.n	8002916 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	3b01      	subs	r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f9      	bne.n	8002910 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800291c:	f7ff fcb8 	bl	8002290 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002924:	e01b      	b.n	800295e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002926:	f7ff fcb3 	bl	8002290 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d914      	bls.n	800295e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00d      	beq.n	800295e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	2210      	movs	r2, #16
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002952:	2201      	movs	r2, #1
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e007      	b.n	800296e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
 8002968:	2b01      	cmp	r3, #1
 800296a:	d1dc      	bne.n	8002926 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b004      	add	sp, #16
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	80000017 	.word	0x80000017
 800297c:	20000000 	.word	0x20000000
 8002980:	000f4240 	.word	0x000f4240

08002984 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	2250      	movs	r2, #80	@ 0x50
 8002998:	4013      	ands	r3, r2
 800299a:	d140      	bne.n	8002a1e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	2280      	movs	r2, #128	@ 0x80
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	23c0      	movs	r3, #192	@ 0xc0
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4013      	ands	r3, r2
 80029b6:	d12d      	bne.n	8002a14 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d129      	bne.n	8002a14 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2208      	movs	r2, #8
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d122      	bne.n	8002a14 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2204      	movs	r2, #4
 80029d6:	4013      	ands	r3, r2
 80029d8:	d110      	bne.n	80029fc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	210c      	movs	r1, #12
 80029e6:	438a      	bics	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	4a11      	ldr	r2, [pc, #68]	@ (8002a34 <ADC_DMAConvCplt+0xb0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	2201      	movs	r2, #1
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80029fa:	e00b      	b.n	8002a14 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	2220      	movs	r2, #32
 8002a02:	431a      	orrs	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7ff fa4a 	bl	8001eb0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002a1c:	e005      	b.n	8002a2a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	0010      	movs	r0, r2
 8002a28:	4798      	blx	r3
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	fffffefe 	.word	0xfffffefe

08002a38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff fe11 	bl	8002670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	2240      	movs	r2, #64	@ 0x40
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	2204      	movs	r2, #4
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7ff fdfe 	bl	8002680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	0002      	movs	r2, r0
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a9e:	d809      	bhi.n	8002ab4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	231f      	movs	r3, #31
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <__NVIC_EnableIRQ+0x30>)
 8002aac:	2101      	movs	r1, #1
 8002aae:	4091      	lsls	r1, r2
 8002ab0:	000a      	movs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
  }
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ad2:	d810      	bhi.n	8002af6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad4:	1dfb      	adds	r3, r7, #7
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	001a      	movs	r2, r3
 8002ada:	231f      	movs	r3, #31
 8002adc:	4013      	ands	r3, r2
 8002ade:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <__NVIC_DisableIRQ+0x40>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	2280      	movs	r2, #128	@ 0x80
 8002ae8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002aea:	f3bf 8f4f 	dsb	sy
}
 8002aee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002af0:	f3bf 8f6f 	isb	sy
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b18:	d828      	bhi.n	8002b6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd8 <__NVIC_SetPriority+0xd4>)
 8002b1c:	1dfb      	adds	r3, r7, #7
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	33c0      	adds	r3, #192	@ 0xc0
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	589b      	ldr	r3, [r3, r2]
 8002b2a:	1dfa      	adds	r2, r7, #7
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	2203      	movs	r2, #3
 8002b32:	400a      	ands	r2, r1
 8002b34:	00d2      	lsls	r2, r2, #3
 8002b36:	21ff      	movs	r1, #255	@ 0xff
 8002b38:	4091      	lsls	r1, r2
 8002b3a:	000a      	movs	r2, r1
 8002b3c:	43d2      	mvns	r2, r2
 8002b3e:	401a      	ands	r2, r3
 8002b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	22ff      	movs	r2, #255	@ 0xff
 8002b48:	401a      	ands	r2, r3
 8002b4a:	1dfb      	adds	r3, r7, #7
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	2303      	movs	r3, #3
 8002b52:	4003      	ands	r3, r0
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b58:	481f      	ldr	r0, [pc, #124]	@ (8002bd8 <__NVIC_SetPriority+0xd4>)
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	430a      	orrs	r2, r1
 8002b64:	33c0      	adds	r3, #192	@ 0xc0
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b6a:	e031      	b.n	8002bd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <__NVIC_SetPriority+0xd8>)
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	0019      	movs	r1, r3
 8002b74:	230f      	movs	r3, #15
 8002b76:	400b      	ands	r3, r1
 8002b78:	3b08      	subs	r3, #8
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3306      	adds	r3, #6
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	18d3      	adds	r3, r2, r3
 8002b82:	3304      	adds	r3, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1dfa      	adds	r2, r7, #7
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	400a      	ands	r2, r1
 8002b90:	00d2      	lsls	r2, r2, #3
 8002b92:	21ff      	movs	r1, #255	@ 0xff
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	43d2      	mvns	r2, r2
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	1dfb      	adds	r3, r7, #7
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	0018      	movs	r0, r3
 8002bac:	2303      	movs	r3, #3
 8002bae:	4003      	ands	r3, r0
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bb4:	4809      	ldr	r0, [pc, #36]	@ (8002bdc <__NVIC_SetPriority+0xd8>)
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	001c      	movs	r4, r3
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	4023      	ands	r3, r4
 8002bc0:	3b08      	subs	r3, #8
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	3306      	adds	r3, #6
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	18c3      	adds	r3, r0, r3
 8002bcc:	3304      	adds	r3, #4
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	46c0      	nop			@ (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b003      	add	sp, #12
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	e000e100 	.word	0xe000e100
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	1e5a      	subs	r2, r3, #1
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	045b      	lsls	r3, r3, #17
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d301      	bcc.n	8002bf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e010      	b.n	8002c1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <SysTick_Config+0x44>)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c00:	2301      	movs	r3, #1
 8002c02:	425b      	negs	r3, r3
 8002c04:	2103      	movs	r1, #3
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff ff7c 	bl	8002b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SysTick_Config+0x44>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <SysTick_Config+0x44>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	210f      	movs	r1, #15
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	1c02      	adds	r2, r0, #0
 8002c38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff ff5d 	bl	8002b04 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	0002      	movs	r2, r0
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c5e:	1dfb      	adds	r3, r7, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff ff11 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	0002      	movs	r2, r0
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c7e:	1dfb      	adds	r3, r7, #7
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff ff1b 	bl	8002ac0 <__NVIC_DisableIRQ>
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff ff9f 	bl	8002be0 <SysTick_Config>
 8002ca2:	0003      	movs	r3, r0
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e036      	b.n	8002d30 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2221      	movs	r2, #33	@ 0x21
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	@ (8002d38 <HAL_DMA_Init+0x8c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f998 	bl	8003048 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2221      	movs	r2, #33	@ 0x21
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b004      	add	sp, #16
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	ffffc00f 	.word	0xffffc00f

08002d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2317      	movs	r3, #23
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	5c9b      	ldrb	r3, [r3, r2]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Start_IT+0x24>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e04f      	b.n	8002e00 <HAL_DMA_Start_IT+0xc4>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	2101      	movs	r1, #1
 8002d66:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2221      	movs	r2, #33	@ 0x21
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d13a      	bne.n	8002dea <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2221      	movs	r2, #33	@ 0x21
 8002d78:	2102      	movs	r1, #2
 8002d7a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f928 	bl	8002fee <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	210e      	movs	r1, #14
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e00f      	b.n	8002dd8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	210a      	movs	r1, #10
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e007      	b.n	8002dfa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002df2:	2317      	movs	r3, #23
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b006      	add	sp, #24
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	210f      	movs	r1, #15
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2221      	movs	r2, #33	@ 0x21
 8002e1c:	5c9b      	ldrb	r3, [r3, r2]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d006      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e028      	b.n	8002e84 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	210e      	movs	r1, #14
 8002e3e:	438a      	bics	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	438a      	bics	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4091      	lsls	r1, r2
 8002e5e:	000a      	movs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2221      	movs	r2, #33	@ 0x21
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	2100      	movs	r1, #0
 8002e70:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	0010      	movs	r0, r2
 8002e82:	4798      	blx	r3
    }
  }
  return status;
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	781b      	ldrb	r3, [r3, #0]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2204      	movs	r2, #4
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d024      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x72>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d020      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d107      	bne.n	8002ede <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2104      	movs	r1, #4
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4091      	lsls	r1, r2
 8002eea:	000a      	movs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x66>
 8002ef6:	e06a      	b.n	8002fce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	0010      	movs	r0, r2
 8002f00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f02:	e064      	b.n	8002fce <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	2202      	movs	r2, #2
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	d02b      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xda>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d027      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2220      	movs	r2, #32
 8002f24:	4013      	ands	r3, r2
 8002f26:	d10b      	bne.n	8002f40 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	210a      	movs	r1, #10
 8002f34:	438a      	bics	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2221      	movs	r2, #33	@ 0x21
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4091      	lsls	r1, r2
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	0010      	movs	r0, r2
 8002f68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f6a:	e030      	b.n	8002fce <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	2208      	movs	r2, #8
 8002f72:	409a      	lsls	r2, r3
 8002f74:	0013      	movs	r3, r2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d028      	beq.n	8002fce <HAL_DMA_IRQHandler+0x13c>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2208      	movs	r2, #8
 8002f80:	4013      	ands	r3, r2
 8002f82:	d024      	beq.n	8002fce <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	210e      	movs	r1, #14
 8002f90:	438a      	bics	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4091      	lsls	r1, r2
 8002fa0:	000a      	movs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2221      	movs	r2, #33	@ 0x21
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	0010      	movs	r0, r2
 8002fca:	4798      	blx	r3
    }
  }
}
 8002fcc:	e7ff      	b.n	8002fce <HAL_DMA_IRQHandler+0x13c>
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2221      	movs	r2, #33	@ 0x21
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	b2db      	uxtb	r3, r3
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b002      	add	sp, #8
 8002fec:	bd80      	pop	{r7, pc}

08002fee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	2101      	movs	r1, #1
 8003006:	4091      	lsls	r1, r2
 8003008:	000a      	movs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b10      	cmp	r3, #16
 800301a:	d108      	bne.n	800302e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800302c:	e007      	b.n	800303e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	60da      	str	r2, [r3, #12]
}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a08      	ldr	r2, [pc, #32]	@ (8003078 <DMA_CalcBaseAndBitshift+0x30>)
 8003056:	4694      	mov	ip, r2
 8003058:	4463      	add	r3, ip
 800305a:	2114      	movs	r1, #20
 800305c:	0018      	movs	r0, r3
 800305e:	f7fd f853 	bl	8000108 <__udivsi3>
 8003062:	0003      	movs	r3, r0
 8003064:	009a      	lsls	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a03      	ldr	r2, [pc, #12]	@ (800307c <DMA_CalcBaseAndBitshift+0x34>)
 800306e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}
 8003078:	bffdfff8 	.word	0xbffdfff8
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	e14f      	b.n	8003330 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4091      	lsls	r1, r2
 800309a:	000a      	movs	r2, r1
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d100      	bne.n	80030a8 <HAL_GPIO_Init+0x28>
 80030a6:	e140      	b.n	800332a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d005      	beq.n	80030c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d130      	bne.n	8003122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	409a      	lsls	r2, r3
 80030ce:	0013      	movs	r3, r2
 80030d0:	43da      	mvns	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	0013      	movs	r3, r2
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f6:	2201      	movs	r2, #1
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	43da      	mvns	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	2201      	movs	r2, #1
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2203      	movs	r2, #3
 8003128:	4013      	ands	r3, r2
 800312a:	2b03      	cmp	r3, #3
 800312c:	d017      	beq.n	800315e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	409a      	lsls	r2, r3
 800313c:	0013      	movs	r3, r2
 800313e:	43da      	mvns	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	0013      	movs	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	4013      	ands	r3, r2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d123      	bne.n	80031b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	08da      	lsrs	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	58d3      	ldr	r3, [r2, r3]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2207      	movs	r2, #7
 800317c:	4013      	ands	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	409a      	lsls	r2, r3
 8003184:	0013      	movs	r3, r2
 8003186:	43da      	mvns	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2107      	movs	r1, #7
 8003196:	400b      	ands	r3, r1
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	08da      	lsrs	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3208      	adds	r2, #8
 80031ac:	0092      	lsls	r2, r2, #2
 80031ae:	6939      	ldr	r1, [r7, #16]
 80031b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	409a      	lsls	r2, r3
 80031c0:	0013      	movs	r3, r2
 80031c2:	43da      	mvns	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2203      	movs	r2, #3
 80031d0:	401a      	ands	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	0013      	movs	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	23c0      	movs	r3, #192	@ 0xc0
 80031ec:	029b      	lsls	r3, r3, #10
 80031ee:	4013      	ands	r3, r2
 80031f0:	d100      	bne.n	80031f4 <HAL_GPIO_Init+0x174>
 80031f2:	e09a      	b.n	800332a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f4:	4b54      	ldr	r3, [pc, #336]	@ (8003348 <HAL_GPIO_Init+0x2c8>)
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_GPIO_Init+0x2c8>)
 80031fa:	2101      	movs	r1, #1
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
 8003200:	4b51      	ldr	r3, [pc, #324]	@ (8003348 <HAL_GPIO_Init+0x2c8>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2201      	movs	r2, #1
 8003206:	4013      	ands	r3, r2
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800320c:	4a4f      	ldr	r2, [pc, #316]	@ (800334c <HAL_GPIO_Init+0x2cc>)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	589b      	ldr	r3, [r3, r2]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2203      	movs	r2, #3
 800321e:	4013      	ands	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	220f      	movs	r2, #15
 8003224:	409a      	lsls	r2, r3
 8003226:	0013      	movs	r3, r2
 8003228:	43da      	mvns	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	2390      	movs	r3, #144	@ 0x90
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	429a      	cmp	r2, r3
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0x1e2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a44      	ldr	r2, [pc, #272]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00d      	beq.n	800325e <HAL_GPIO_Init+0x1de>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a43      	ldr	r2, [pc, #268]	@ (8003354 <HAL_GPIO_Init+0x2d4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <HAL_GPIO_Init+0x1da>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a42      	ldr	r2, [pc, #264]	@ (8003358 <HAL_GPIO_Init+0x2d8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_GPIO_Init+0x1d6>
 8003252:	2303      	movs	r3, #3
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x1e4>
 8003256:	2305      	movs	r3, #5
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x1e4>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x1e4>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x1e4>
 8003262:	2300      	movs	r3, #0
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	2103      	movs	r1, #3
 8003268:	400a      	ands	r2, r1
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003274:	4935      	ldr	r1, [pc, #212]	@ (800334c <HAL_GPIO_Init+0x2cc>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	43da      	mvns	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	035b      	lsls	r3, r3, #13
 800329a:	4013      	ands	r3, r2
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032a6:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032ac:	4b2b      	ldr	r3, [pc, #172]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43da      	mvns	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	2380      	movs	r3, #128	@ 0x80
 80032c2:	039b      	lsls	r3, r3, #14
 80032c4:	4013      	ands	r3, r2
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032d0:	4b22      	ldr	r3, [pc, #136]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032d6:	4b21      	ldr	r3, [pc, #132]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43da      	mvns	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	029b      	lsls	r3, r3, #10
 80032ee:	4013      	ands	r3, r2
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003300:	4b16      	ldr	r3, [pc, #88]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43da      	mvns	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	4013      	ands	r3, r2
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003324:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <HAL_GPIO_Init+0x2dc>)
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	40da      	lsrs	r2, r3
 8003338:	1e13      	subs	r3, r2, #0
 800333a:	d000      	beq.n	800333e <HAL_GPIO_Init+0x2be>
 800333c:	e6a8      	b.n	8003090 <HAL_GPIO_Init+0x10>
  } 
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46c0      	nop			@ (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	40010000 	.word	0x40010000
 8003350:	48000400 	.word	0x48000400
 8003354:	48000800 	.word	0x48000800
 8003358:	48000c00 	.word	0x48000c00
 800335c:	40010400 	.word	0x40010400

08003360 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800336e:	e0b1      	b.n	80034d4 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003370:	2201      	movs	r2, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	409a      	lsls	r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d100      	bne.n	8003384 <HAL_GPIO_DeInit+0x24>
 8003382:	e0a4      	b.n	80034ce <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003384:	4a59      	ldr	r2, [pc, #356]	@ (80034ec <HAL_GPIO_DeInit+0x18c>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	589b      	ldr	r3, [r3, r2]
 8003390:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2203      	movs	r2, #3
 8003396:	4013      	ands	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	409a      	lsls	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	2390      	movs	r3, #144	@ 0x90
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_DeInit+0x76>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4f      	ldr	r2, [pc, #316]	@ (80034f0 <HAL_GPIO_DeInit+0x190>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_DeInit+0x72>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4e      	ldr	r2, [pc, #312]	@ (80034f4 <HAL_GPIO_DeInit+0x194>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_DeInit+0x6e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4d      	ldr	r2, [pc, #308]	@ (80034f8 <HAL_GPIO_DeInit+0x198>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_DeInit+0x6a>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_DeInit+0x78>
 80033ca:	2305      	movs	r3, #5
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_DeInit+0x78>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_DeInit+0x78>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_DeInit+0x78>
 80033d6:	2300      	movs	r3, #0
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	2103      	movs	r1, #3
 80033dc:	400a      	ands	r2, r1
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d132      	bne.n	800344e <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033e8:	4b44      	ldr	r3, [pc, #272]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	4b42      	ldr	r3, [pc, #264]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033f6:	4b41      	ldr	r3, [pc, #260]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	43d9      	mvns	r1, r3
 80033fe:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 8003400:	400a      	ands	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003404:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43d9      	mvns	r1, r3
 800340c:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 800340e:	400a      	ands	r2, r1
 8003410:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003412:	4b3a      	ldr	r3, [pc, #232]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43d9      	mvns	r1, r3
 800341a:	4b38      	ldr	r3, [pc, #224]	@ (80034fc <HAL_GPIO_DeInit+0x19c>)
 800341c:	400a      	ands	r2, r1
 800341e:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2203      	movs	r2, #3
 8003424:	4013      	ands	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	409a      	lsls	r2, r3
 800342c:	0013      	movs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003430:	4a2e      	ldr	r2, [pc, #184]	@ (80034ec <HAL_GPIO_DeInit+0x18c>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	589a      	ldr	r2, [r3, r2]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43d9      	mvns	r1, r3
 8003440:	482a      	ldr	r0, [pc, #168]	@ (80034ec <HAL_GPIO_DeInit+0x18c>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	400a      	ands	r2, r1
 8003448:	3302      	adds	r3, #2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	0052      	lsls	r2, r2, #1
 8003456:	2103      	movs	r1, #3
 8003458:	4091      	lsls	r1, r2
 800345a:	000a      	movs	r2, r1
 800345c:	43d2      	mvns	r2, r2
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	0092      	lsls	r2, r2, #2
 800346e:	58d3      	ldr	r3, [r2, r3]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	2107      	movs	r1, #7
 8003474:	400a      	ands	r2, r1
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	210f      	movs	r1, #15
 800347a:	4091      	lsls	r1, r2
 800347c:	000a      	movs	r2, r1
 800347e:	43d1      	mvns	r1, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	08d2      	lsrs	r2, r2, #3
 8003484:	4019      	ands	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	0052      	lsls	r2, r2, #1
 8003496:	2103      	movs	r1, #3
 8003498:	4091      	lsls	r1, r2
 800349a:	000a      	movs	r2, r1
 800349c:	43d2      	mvns	r2, r2
 800349e:	401a      	ands	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2101      	movs	r1, #1
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4091      	lsls	r1, r2
 80034ae:	000a      	movs	r2, r1
 80034b0:	43d2      	mvns	r2, r2
 80034b2:	401a      	ands	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	0052      	lsls	r2, r2, #1
 80034c0:	2103      	movs	r1, #3
 80034c2:	4091      	lsls	r1, r2
 80034c4:	000a      	movs	r2, r1
 80034c6:	43d2      	mvns	r2, r2
 80034c8:	401a      	ands	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]

    }

    position++;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	40da      	lsrs	r2, r3
 80034da:	1e13      	subs	r3, r2, #0
 80034dc:	d000      	beq.n	80034e0 <HAL_GPIO_DeInit+0x180>
 80034de:	e747      	b.n	8003370 <HAL_GPIO_DeInit+0x10>
  }
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b006      	add	sp, #24
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	40010000 	.word	0x40010000
 80034f0:	48000400 	.word	0x48000400
 80034f4:	48000800 	.word	0x48000800
 80034f8:	48000c00 	.word	0x48000c00
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	000a      	movs	r2, r1
 800350a:	1cbb      	adds	r3, r7, #2
 800350c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	1cba      	adds	r2, r7, #2
 8003514:	8812      	ldrh	r2, [r2, #0]
 8003516:	4013      	ands	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800351a:	230f      	movs	r3, #15
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e003      	b.n	800352c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003524:	230f      	movs	r3, #15
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800352c:	230f      	movs	r3, #15
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	781b      	ldrb	r3, [r3, #0]
  }
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	0008      	movs	r0, r1
 8003544:	0011      	movs	r1, r2
 8003546:	1cbb      	adds	r3, r7, #2
 8003548:	1c02      	adds	r2, r0, #0
 800354a:	801a      	strh	r2, [r3, #0]
 800354c:	1c7b      	adds	r3, r7, #1
 800354e:	1c0a      	adds	r2, r1, #0
 8003550:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003552:	1c7b      	adds	r3, r7, #1
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800355a:	1cbb      	adds	r3, r7, #2
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003562:	e003      	b.n	800356c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003564:	1cbb      	adds	r3, r7, #2
 8003566:	881a      	ldrh	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08f      	b.n	80036a6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2241      	movs	r2, #65	@ 0x41
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d107      	bne.n	80035a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2240      	movs	r2, #64	@ 0x40
 8003596:	2100      	movs	r1, #0
 8003598:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe fd31 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2241      	movs	r2, #65	@ 0x41
 80035a6:	2124      	movs	r1, #36	@ 0x24
 80035a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	438a      	bics	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	493b      	ldr	r1, [pc, #236]	@ (80036b0 <HAL_I2C_Init+0x13c>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4938      	ldr	r1, [pc, #224]	@ (80036b4 <HAL_I2C_Init+0x140>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d108      	bne.n	80035f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2180      	movs	r1, #128	@ 0x80
 80035ea:	0209      	lsls	r1, r1, #8
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e007      	b.n	8003602 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2184      	movs	r1, #132	@ 0x84
 80035fc:	0209      	lsls	r1, r1, #8
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d109      	bne.n	800361e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2180      	movs	r1, #128	@ 0x80
 8003616:	0109      	lsls	r1, r1, #4
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	e007      	b.n	800362e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4923      	ldr	r1, [pc, #140]	@ (80036b8 <HAL_I2C_Init+0x144>)
 800362a:	400a      	ands	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4920      	ldr	r1, [pc, #128]	@ (80036bc <HAL_I2C_Init+0x148>)
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	491a      	ldr	r1, [pc, #104]	@ (80036b4 <HAL_I2C_Init+0x140>)
 800364a:	400a      	ands	r2, r1
 800364c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	431a      	orrs	r2, r3
 8003658:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2241      	movs	r2, #65	@ 0x41
 8003692:	2120      	movs	r1, #32
 8003694:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2242      	movs	r2, #66	@ 0x42
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	f0ffffff 	.word	0xf0ffffff
 80036b4:	ffff7fff 	.word	0xffff7fff
 80036b8:	fffff7ff 	.word	0xfffff7ff
 80036bc:	02008000 	.word	0x02008000

080036c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2241      	movs	r2, #65	@ 0x41
 80036d6:	2124      	movs	r1, #36	@ 0x24
 80036d8:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	438a      	bics	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fe fcdf 	bl	80020b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2241      	movs	r2, #65	@ 0x41
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2242      	movs	r2, #66	@ 0x42
 800370a:	2100      	movs	r1, #0
 800370c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2240      	movs	r2, #64	@ 0x40
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	1dbb      	adds	r3, r7, #6
 800372e:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2241      	movs	r2, #65	@ 0x41
 8003734:	5c9b      	ldrb	r3, [r3, r2]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	001a      	movs	r2, r3
 800373a:	2328      	movs	r3, #40	@ 0x28
 800373c:	4013      	ands	r3, r2
 800373e:	2b28      	cmp	r3, #40	@ 0x28
 8003740:	d000      	beq.n	8003744 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8003742:	e09f      	b.n	8003884 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 800374a:	1dbb      	adds	r3, r7, #6
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2280      	movs	r2, #128	@ 0x80
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e093      	b.n	8003886 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800375e:	4a4c      	ldr	r2, [pc, #304]	@ (8003890 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0011      	movs	r1, r2
 8003764:	0018      	movs	r0, r3
 8003766:	f001 fc91 	bl	800508c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2240      	movs	r2, #64	@ 0x40
 800376e:	5c9b      	ldrb	r3, [r3, r2]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8003774:	2302      	movs	r3, #2
 8003776:	e086      	b.n	8003886 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	2101      	movs	r1, #1
 800377e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2241      	movs	r2, #65	@ 0x41
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b2a      	cmp	r3, #42	@ 0x2a
 800378a:	d12c      	bne.n	80037e6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2102      	movs	r1, #2
 8003790:	0018      	movs	r0, r3
 8003792:	f001 fc7b 	bl	800508c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	401a      	ands	r2, r3
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d11d      	bne.n	80037e6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4937      	ldr	r1, [pc, #220]	@ (8003894 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d011      	beq.n	80037e6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	4a34      	ldr	r2, [pc, #208]	@ (8003898 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7ff fb1a 	bl	8002e08 <HAL_DMA_Abort_IT>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d006      	beq.n	80037e6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	0018      	movs	r0, r3
 80037e4:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2241      	movs	r2, #65	@ 0x41
 80037ea:	2129      	movs	r1, #41	@ 0x29
 80037ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2242      	movs	r2, #66	@ 0x42
 80037f2:	2120      	movs	r1, #32
 80037f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4923      	ldr	r1, [pc, #140]	@ (8003894 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003808:	400a      	ands	r2, r1
 800380a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1dba      	adds	r2, r7, #6
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a1b      	ldr	r2, [pc, #108]	@ (800389c <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 800382e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2208      	movs	r2, #8
 8003838:	4013      	ands	r3, r2
 800383a:	3b08      	subs	r3, #8
 800383c:	425a      	negs	r2, r3
 800383e:	4153      	adcs	r3, r2
 8003840:	b2da      	uxtb	r2, r3
 8003842:	2117      	movs	r1, #23
 8003844:	187b      	adds	r3, r7, r1
 8003846:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 800385c:	187b      	adds	r3, r7, r1
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2208      	movs	r2, #8
 800386a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2240      	movs	r2, #64	@ 0x40
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003874:	4a06      	ldr	r2, [pc, #24]	@ (8003890 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0011      	movs	r1, r2
 800387a:	0018      	movs	r0, r3
 800387c:	f001 fb7c 	bl	8004f78 <I2C_Enable_IRQ>

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
  }
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b006      	add	sp, #24
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	00008001 	.word	0x00008001
 8003894:	ffff7fff 	.word	0xffff7fff
 8003898:	08004ec7 	.word	0x08004ec7
 800389c:	08003bc5 	.word	0x08003bc5

080038a0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	1dbb      	adds	r3, r7, #6
 80038ae:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2241      	movs	r2, #65	@ 0x41
 80038b4:	5c9b      	ldrb	r3, [r3, r2]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	001a      	movs	r2, r3
 80038ba:	2328      	movs	r3, #40	@ 0x28
 80038bc:	4013      	ands	r3, r2
 80038be:	2b28      	cmp	r3, #40	@ 0x28
 80038c0:	d000      	beq.n	80038c4 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80038c2:	e09f      	b.n	8003a04 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2280      	movs	r2, #128	@ 0x80
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e093      	b.n	8003a06 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80038de:	4a4c      	ldr	r2, [pc, #304]	@ (8003a10 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	0011      	movs	r1, r2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f001 fbd1 	bl	800508c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2240      	movs	r2, #64	@ 0x40
 80038ee:	5c9b      	ldrb	r3, [r3, r2]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e086      	b.n	8003a06 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	@ 0x40
 80038fc:	2101      	movs	r1, #1
 80038fe:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2241      	movs	r2, #65	@ 0x41
 8003904:	5c9b      	ldrb	r3, [r3, r2]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b29      	cmp	r3, #41	@ 0x29
 800390a:	d12c      	bne.n	8003966 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2101      	movs	r1, #1
 8003910:	0018      	movs	r0, r3
 8003912:	f001 fbbb 	bl	800508c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	01db      	lsls	r3, r3, #7
 8003920:	401a      	ands	r2, r3
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	01db      	lsls	r3, r3, #7
 8003926:	429a      	cmp	r2, r3
 8003928:	d11d      	bne.n	8003966 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 8003936:	400a      	ands	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003946:	4a34      	ldr	r2, [pc, #208]	@ (8003a18 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8003948:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff fa5a 	bl	8002e08 <HAL_DMA_Abort_IT>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d006      	beq.n	8003966 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	0018      	movs	r0, r3
 8003964:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2241      	movs	r2, #65	@ 0x41
 800396a:	212a      	movs	r1, #42	@ 0x2a
 800396c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2242      	movs	r2, #66	@ 0x42
 8003972:	2120      	movs	r1, #32
 8003974:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4925      	ldr	r1, [pc, #148]	@ (8003a1c <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8003988:	400a      	ands	r2, r1
 800398a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1dba      	adds	r2, r7, #6
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 80039ae:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2208      	movs	r2, #8
 80039b8:	4013      	ands	r3, r2
 80039ba:	3b08      	subs	r3, #8
 80039bc:	425a      	negs	r2, r3
 80039be:	4153      	adcs	r3, r2
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	2117      	movs	r1, #23
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2201      	movs	r2, #1
 80039d4:	4013      	ands	r3, r2
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80039f4:	4a06      	ldr	r2, [pc, #24]	@ (8003a10 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0011      	movs	r1, r2
 80039fa:	0018      	movs	r0, r3
 80039fc:	f001 fabc 	bl	8004f78 <I2C_Enable_IRQ>

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
  }
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b006      	add	sp, #24
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	00008002 	.word	0x00008002
 8003a14:	ffffbfff 	.word	0xffffbfff
 8003a18:	08004ec7 	.word	0x08004ec7
 8003a1c:	ffff7fff 	.word	0xffff7fff
 8003a20:	08003bc5 	.word	0x08003bc5

08003a24 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2241      	movs	r2, #65	@ 0x41
 8003a30:	5c9b      	ldrb	r3, [r3, r2]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d10f      	bne.n	8003a58 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2241      	movs	r2, #65	@ 0x41
 8003a3c:	2128      	movs	r1, #40	@ 0x28
 8003a3e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a08      	ldr	r2, [pc, #32]	@ (8003a64 <HAL_I2C_EnableListen_IT+0x40>)
 8003a44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	021a      	lsls	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0011      	movs	r1, r2
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f001 fa92 	bl	8004f78 <I2C_Enable_IRQ>

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	08003bc5 	.word	0x08003bc5

08003a68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68f9      	ldr	r1, [r7, #12]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
  }
}
 8003a94:	46c0      	nop			@ (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b004      	add	sp, #16
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4013      	ands	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2280      	movs	r2, #128	@ 0x80
 8003ac2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ac4:	d00a      	beq.n	8003adc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	2201      	movs	r2, #1
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2280      	movs	r2, #128	@ 0x80
 8003ad8:	0052      	lsls	r2, r2, #1
 8003ada:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2280      	movs	r2, #128	@ 0x80
 8003aea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003aec:	d00a      	beq.n	8003b04 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	2208      	movs	r2, #8
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2280      	movs	r2, #128	@ 0x80
 8003b00:	00d2      	lsls	r2, r2, #3
 8003b02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003b14:	d00a      	beq.n	8003b2c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	220b      	movs	r2, #11
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0011      	movs	r1, r2
 8003b40:	0018      	movs	r0, r3
 8003b42:	f001 f873 	bl	8004c2c <I2C_ITError>
  }
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b006      	add	sp, #24
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b002      	add	sp, #8
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2240      	movs	r2, #64	@ 0x40
 8003bde:	5c9b      	ldrb	r3, [r3, r2]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <I2C_Slave_ISR_IT+0x24>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0e7      	b.n	8003db8 <I2C_Slave_ISR_IT+0x1f4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	@ 0x40
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d00a      	beq.n	8003c0e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bfe:	d006      	beq.n	8003c0e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	0011      	movs	r1, r2
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 fe30 	bl	800486c <I2C_ITSlaveCplt>
 8003c0c:	e0cf      	b.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2210      	movs	r2, #16
 8003c12:	4013      	ands	r3, r2
 8003c14:	d052      	beq.n	8003cbc <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c1c:	d04e      	beq.n	8003cbc <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12d      	bne.n	8003c84 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2241      	movs	r2, #65	@ 0x41
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b28      	cmp	r3, #40	@ 0x28
 8003c32:	d10b      	bne.n	8003c4c <I2C_Slave_ISR_IT+0x88>
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	049b      	lsls	r3, r3, #18
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d106      	bne.n	8003c4c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 ff99 	bl	8004b7c <I2C_ITListenCplt>
 8003c4a:	e036      	b.n	8003cba <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2241      	movs	r2, #65	@ 0x41
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b29      	cmp	r3, #41	@ 0x29
 8003c56:	d110      	bne.n	8003c7a <I2C_Slave_ISR_IT+0xb6>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4a59      	ldr	r2, [pc, #356]	@ (8003dc0 <I2C_Slave_ISR_IT+0x1fc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00c      	beq.n	8003c7a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f001 f909 	bl	8004e82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 fcc8 	bl	8004608 <I2C_ITSlaveSeqCplt>
 8003c78:	e01f      	b.n	8003cba <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c82:	e091      	b.n	8003da8 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	2204      	movs	r2, #4
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <I2C_Slave_ISR_IT+0xe6>
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	045b      	lsls	r3, r3, #17
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d000      	beq.n	8003caa <I2C_Slave_ISR_IT+0xe6>
 8003ca8:	e07e      	b.n	8003da8 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 ffba 	bl	8004c2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003cb8:	e076      	b.n	8003da8 <I2C_Slave_ISR_IT+0x1e4>
 8003cba:	e075      	b.n	8003da8 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d02f      	beq.n	8003d24 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cca:	d02b      	beq.n	8003d24 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d14c      	bne.n	8003dac <I2C_Slave_ISR_IT+0x1e8>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <I2C_Slave_ISR_IT+0x1fc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d048      	beq.n	8003dac <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 fc73 	bl	8004608 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003d22:	e043      	b.n	8003dac <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2208      	movs	r2, #8
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d00a      	beq.n	8003d42 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d32:	d006      	beq.n	8003d42 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 fb7e 	bl	800443c <I2C_ITAddrCplt>
 8003d40:	e035      	b.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2202      	movs	r2, #2
 8003d46:	4013      	ands	r3, r2
 8003d48:	d031      	beq.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d50:	d02d      	beq.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d018      	beq.n	8003d8e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003d8c:	e00f      	b.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	045b      	lsls	r3, r3, #17
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d002      	beq.n	8003d9e <I2C_Slave_ISR_IT+0x1da>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fc31 	bl	8004608 <I2C_ITSlaveSeqCplt>
 8003da6:	e002      	b.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	e000      	b.n	8003dae <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003dac:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2240      	movs	r2, #64	@ 0x40
 8003db2:	2100      	movs	r1, #0
 8003db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b006      	add	sp, #24
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	ffff0000 	.word	0xffff0000

08003dc4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b089      	sub	sp, #36	@ 0x24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	5c9b      	ldrb	r3, [r3, r2]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <I2C_Master_ISR_DMA+0x1a>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0f5      	b.n	8003fca <I2C_Master_ISR_DMA+0x206>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2240      	movs	r2, #64	@ 0x40
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2210      	movs	r2, #16
 8003dea:	4013      	ands	r3, r2
 8003dec:	d017      	beq.n	8003e1e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2210      	movs	r2, #16
 8003df2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003df4:	d013      	beq.n	8003e1e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	2204      	movs	r2, #4
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2120      	movs	r1, #32
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f001 f8b2 	bl	8004f78 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f001 f833 	bl	8004e82 <I2C_Flush_TXDR>
 8003e1c:	e0d0      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	4013      	ands	r3, r2
 8003e24:	d100      	bne.n	8003e28 <I2C_Master_ISR_DMA+0x64>
 8003e26:	e08a      	b.n	8003f3e <I2C_Master_ISR_DMA+0x17a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e2e:	d100      	bne.n	8003e32 <I2C_Master_ISR_DMA+0x6e>
 8003e30:	e085      	b.n	8003f3e <I2C_Master_ISR_DMA+0x17a>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2140      	movs	r1, #64	@ 0x40
 8003e3e:	438a      	bics	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d063      	beq.n	8003f14 <I2C_Master_ISR_DMA+0x150>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	2312      	movs	r3, #18
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	0592      	lsls	r2, r2, #22
 8003e5a:	0d92      	lsrs	r2, r2, #22
 8003e5c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2bff      	cmp	r3, #255	@ 0xff
 8003e66:	d914      	bls.n	8003e92 <I2C_Master_ISR_DMA+0xce>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2201      	movs	r2, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d103      	bne.n	8003e84 <I2C_Master_ISR_DMA+0xc0>
        {
          hi2c->XferSize = 1U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003e82:	e002      	b.n	8003e8a <I2C_Master_ISR_DMA+0xc6>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	22ff      	movs	r2, #255	@ 0xff
 8003e88:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8003e8a:	2380      	movs	r3, #128	@ 0x80
 8003e8c:	045b      	lsls	r3, r3, #17
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e010      	b.n	8003eb4 <I2C_Master_ISR_DMA+0xf0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8003fd4 <I2C_Master_ISR_DMA+0x210>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <I2C_Master_ISR_DMA+0xea>
        {
          xfermode = hi2c->XferOptions;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e002      	b.n	8003eb4 <I2C_Master_ISR_DMA+0xf0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	049b      	lsls	r3, r3, #18
 8003eb2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	697c      	ldr	r4, [r7, #20]
 8003ebc:	2312      	movs	r3, #18
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	8819      	ldrh	r1, [r3, #0]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0023      	movs	r3, r4
 8003eca:	f001 f81b 	bl	8004f04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2241      	movs	r2, #65	@ 0x41
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b22      	cmp	r3, #34	@ 0x22
 8003eea:	d109      	bne.n	8003f00 <I2C_Master_ISR_DMA+0x13c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	0209      	lsls	r1, r1, #8
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003efe:	e05f      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2180      	movs	r1, #128	@ 0x80
 8003f0c:	01c9      	lsls	r1, r1, #7
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f12:	e055      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	049b      	lsls	r3, r3, #18
 8003f1e:	401a      	ands	r2, r3
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	049b      	lsls	r3, r3, #18
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d004      	beq.n	8003f32 <I2C_Master_ISR_DMA+0x16e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 fb2a 	bl	8004584 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003f30:	e046      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2140      	movs	r1, #64	@ 0x40
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fe78 	bl	8004c2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f3c:	e040      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2240      	movs	r2, #64	@ 0x40
 8003f42:	4013      	ands	r3, r2
 8003f44:	d02c      	beq.n	8003fa0 <I2C_Master_ISR_DMA+0x1dc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2240      	movs	r2, #64	@ 0x40
 8003f4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f4c:	d028      	beq.n	8003fa0 <I2C_Master_ISR_DMA+0x1dc>
  {
    if (hi2c->XferCount == 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11d      	bne.n	8003f94 <I2C_Master_ISR_DMA+0x1d0>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	2380      	movs	r3, #128	@ 0x80
 8003f60:	049b      	lsls	r3, r3, #18
 8003f62:	401a      	ands	r2, r3
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	049b      	lsls	r3, r3, #18
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d028      	beq.n	8003fbe <I2C_Master_ISR_DMA+0x1fa>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <I2C_Master_ISR_DMA+0x210>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d109      	bne.n	8003f8a <I2C_Master_ISR_DMA+0x1c6>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2180      	movs	r1, #128	@ 0x80
 8003f82:	01c9      	lsls	r1, r1, #7
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003f88:	e019      	b.n	8003fbe <I2C_Master_ISR_DMA+0x1fa>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 faf9 	bl	8004584 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f92:	e014      	b.n	8003fbe <I2C_Master_ISR_DMA+0x1fa>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2140      	movs	r1, #64	@ 0x40
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 fe47 	bl	8004c2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f9e:	e00e      	b.n	8003fbe <I2C_Master_ISR_DMA+0x1fa>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fae:	d007      	beq.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 fb8a 	bl	80046d0 <I2C_ITMasterCplt>
 8003fbc:	e000      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1fc>
    if (hi2c->XferCount == 0U)
 8003fbe:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2240      	movs	r2, #64	@ 0x40
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b007      	add	sp, #28
 8003fd0:	bd90      	pop	{r4, r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b089      	sub	sp, #36	@ 0x24
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8004264 <I2C_Mem_ISR_DMA+0x28c>)
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2240      	movs	r2, #64	@ 0x40
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <I2C_Mem_ISR_DMA+0x1e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e132      	b.n	800425c <I2C_Mem_ISR_DMA+0x284>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2240      	movs	r2, #64	@ 0x40
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	d017      	beq.n	8004036 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2210      	movs	r2, #16
 800400a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800400c:	d013      	beq.n	8004036 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2210      	movs	r2, #16
 8004014:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	2204      	movs	r2, #4
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2120      	movs	r1, #32
 8004026:	0018      	movs	r0, r3
 8004028:	f000 ffa6 	bl	8004f78 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	0018      	movs	r0, r3
 8004030:	f000 ff27 	bl	8004e82 <I2C_Flush_TXDR>
 8004034:	e10d      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	d00d      	beq.n	800405a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004044:	d009      	beq.n	800405a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800404e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	4252      	negs	r2, r2
 8004056:	651a      	str	r2, [r3, #80]	@ 0x50
 8004058:	e0fb      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	4013      	ands	r3, r2
 8004060:	d100      	bne.n	8004064 <I2C_Mem_ISR_DMA+0x8c>
 8004062:	e072      	b.n	800414a <I2C_Mem_ISR_DMA+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2240      	movs	r2, #64	@ 0x40
 8004068:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800406a:	d100      	bne.n	800406e <I2C_Mem_ISR_DMA+0x96>
 800406c:	e06d      	b.n	800414a <I2C_Mem_ISR_DMA+0x172>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2101      	movs	r1, #1
 8004072:	0018      	movs	r0, r3
 8004074:	f001 f80a 	bl	800508c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2110      	movs	r1, #16
 800407c:	0018      	movs	r0, r3
 800407e:	f000 ff7b 	bl	8004f78 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d058      	beq.n	800413e <I2C_Mem_ISR_DMA+0x166>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2bff      	cmp	r3, #255	@ 0xff
 8004094:	d91e      	bls.n	80040d4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d103      	bne.n	80040b2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80040b0:	e002      	b.n	80040b8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	22ff      	movs	r2, #255	@ 0xff
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040bc:	b299      	uxth	r1, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	045b      	lsls	r3, r3, #17
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	2400      	movs	r4, #0
 80040cc:	9400      	str	r4, [sp, #0]
 80040ce:	f000 ff19 	bl	8004f04 <I2C_TransferConfig>
 80040d2:	e011      	b.n	80040f8 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	b299      	uxth	r1, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	049b      	lsls	r3, r3, #18
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	2400      	movs	r4, #0
 80040f2:	9400      	str	r4, [sp, #0]
 80040f4:	f000 ff06 	bl	8004f04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2241      	movs	r2, #65	@ 0x41
 800410e:	5c9b      	ldrb	r3, [r3, r2]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b22      	cmp	r3, #34	@ 0x22
 8004114:	d109      	bne.n	800412a <I2C_Mem_ISR_DMA+0x152>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2180      	movs	r1, #128	@ 0x80
 8004122:	0209      	lsls	r1, r1, #8
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004128:	e093      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2180      	movs	r1, #128	@ 0x80
 8004136:	01c9      	lsls	r1, r1, #7
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800413c:	e089      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	0018      	movs	r0, r3
 8004144:	f000 fd72 	bl	8004c2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004148:	e083      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2240      	movs	r2, #64	@ 0x40
 800414e:	4013      	ands	r3, r2
 8004150:	d100      	bne.n	8004154 <I2C_Mem_ISR_DMA+0x17c>
 8004152:	e070      	b.n	8004236 <I2C_Mem_ISR_DMA+0x25e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2240      	movs	r2, #64	@ 0x40
 8004158:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800415a:	d06c      	beq.n	8004236 <I2C_Mem_ISR_DMA+0x25e>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2101      	movs	r1, #1
 8004160:	0018      	movs	r0, r3
 8004162:	f000 ff93 	bl	800508c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2110      	movs	r1, #16
 800416a:	0018      	movs	r0, r3
 800416c:	f000 ff04 	bl	8004f78 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2241      	movs	r2, #65	@ 0x41
 8004174:	5c9b      	ldrb	r3, [r3, r2]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b22      	cmp	r3, #34	@ 0x22
 800417a:	d101      	bne.n	8004180 <I2C_Mem_ISR_DMA+0x1a8>
    {
      direction = I2C_GENERATE_START_READ;
 800417c:	4b3a      	ldr	r3, [pc, #232]	@ (8004268 <I2C_Mem_ISR_DMA+0x290>)
 800417e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2bff      	cmp	r3, #255	@ 0xff
 8004188:	d91f      	bls.n	80041ca <I2C_Mem_ISR_DMA+0x1f2>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d103      	bne.n	80041a6 <I2C_Mem_ISR_DMA+0x1ce>
      {
        hi2c->XferSize = 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041a4:	e002      	b.n	80041ac <I2C_Mem_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	22ff      	movs	r2, #255	@ 0xff
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b0:	b299      	uxth	r1, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	045c      	lsls	r4, r3, #17
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	0023      	movs	r3, r4
 80041c4:	f000 fe9e 	bl	8004f04 <I2C_TransferConfig>
 80041c8:	e012      	b.n	80041f0 <I2C_Mem_ISR_DMA+0x218>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d8:	b299      	uxth	r1, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	049c      	lsls	r4, r3, #18
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	0023      	movs	r3, r4
 80041ec:	f000 fe8a 	bl	8004f04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2241      	movs	r2, #65	@ 0x41
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b22      	cmp	r3, #34	@ 0x22
 800420c:	d109      	bne.n	8004222 <I2C_Mem_ISR_DMA+0x24a>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2180      	movs	r1, #128	@ 0x80
 800421a:	0209      	lsls	r1, r1, #8
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004220:	e017      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	01c9      	lsls	r1, r1, #7
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004234:	e00d      	b.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2220      	movs	r2, #32
 800423a:	4013      	ands	r3, r2
 800423c:	d009      	beq.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004244:	d005      	beq.n	8004252 <I2C_Mem_ISR_DMA+0x27a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f000 fa3f 	bl	80046d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2240      	movs	r2, #64	@ 0x40
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b007      	add	sp, #28
 8004262:	bd90      	pop	{r4, r7, pc}
 8004264:	80002000 	.word	0x80002000
 8004268:	80002400 	.word	0x80002400

0800426c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2240      	movs	r2, #64	@ 0x40
 8004286:	5c9b      	ldrb	r3, [r3, r2]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <I2C_Slave_ISR_DMA+0x24>
 800428c:	2302      	movs	r3, #2
 800428e:	e0ce      	b.n	800442e <I2C_Slave_ISR_DMA+0x1c2>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2240      	movs	r2, #64	@ 0x40
 8004294:	2101      	movs	r1, #1
 8004296:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
 800429e:	d00a      	beq.n	80042b6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042a6:	d006      	beq.n	80042b6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 fadc 	bl	800486c <I2C_ITSlaveCplt>
 80042b4:	e0b6      	b.n	8004424 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2210      	movs	r2, #16
 80042ba:	4013      	ands	r3, r2
 80042bc:	d100      	bne.n	80042c0 <I2C_Slave_ISR_DMA+0x54>
 80042be:	e0a3      	b.n	8004408 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2210      	movs	r2, #16
 80042c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042c6:	d100      	bne.n	80042ca <I2C_Slave_ISR_DMA+0x5e>
 80042c8:	e09e      	b.n	8004408 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	01db      	lsls	r3, r3, #7
 80042d0:	4013      	ands	r3, r2
 80042d2:	d105      	bne.n	80042e0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80042dc:	d100      	bne.n	80042e0 <I2C_Slave_ISR_DMA+0x74>
 80042de:	e08c      	b.n	80043fa <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	2380      	movs	r3, #128	@ 0x80
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	4013      	ands	r3, r2
 80042f0:	d007      	beq.n	8004302 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80042fe:	2301      	movs	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	01db      	lsls	r3, r3, #7
 8004310:	4013      	ands	r3, r2
 8004312:	d007      	beq.n	8004324 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004320:	2301      	movs	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d12d      	bne.n	8004386 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2241      	movs	r2, #65	@ 0x41
 800432e:	5c9b      	ldrb	r3, [r3, r2]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b28      	cmp	r3, #40	@ 0x28
 8004334:	d10b      	bne.n	800434e <I2C_Slave_ISR_DMA+0xe2>
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	049b      	lsls	r3, r3, #18
 800433c:	429a      	cmp	r2, r3
 800433e:	d106      	bne.n	800434e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	0011      	movs	r1, r2
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fc18 	bl	8004b7c <I2C_ITListenCplt>
 800434c:	e054      	b.n	80043f8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2241      	movs	r2, #65	@ 0x41
 8004352:	5c9b      	ldrb	r3, [r3, r2]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b29      	cmp	r3, #41	@ 0x29
 8004358:	d110      	bne.n	800437c <I2C_Slave_ISR_DMA+0x110>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	4a36      	ldr	r2, [pc, #216]	@ (8004438 <I2C_Slave_ISR_DMA+0x1cc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00c      	beq.n	800437c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 fd88 	bl	8004e82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f947 	bl	8004608 <I2C_ITSlaveSeqCplt>
 800437a:	e03d      	b.n	80043f8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2210      	movs	r2, #16
 8004382:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004384:	e03e      	b.n	8004404 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2210      	movs	r2, #16
 800438c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	2204      	movs	r2, #4
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800439a:	2317      	movs	r3, #23
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	2141      	movs	r1, #65	@ 0x41
 80043a2:	5c52      	ldrb	r2, [r2, r1]
 80043a4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <I2C_Slave_ISR_DMA+0x14a>
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	2380      	movs	r3, #128	@ 0x80
 80043b0:	045b      	lsls	r3, r3, #17
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d126      	bne.n	8004404 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043b6:	2217      	movs	r2, #23
 80043b8:	18bb      	adds	r3, r7, r2
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b21      	cmp	r3, #33	@ 0x21
 80043be:	d003      	beq.n	80043c8 <I2C_Slave_ISR_DMA+0x15c>
 80043c0:	18bb      	adds	r3, r7, r2
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b29      	cmp	r3, #41	@ 0x29
 80043c6:	d103      	bne.n	80043d0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2221      	movs	r2, #33	@ 0x21
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80043ce:	e00b      	b.n	80043e8 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043d0:	2217      	movs	r2, #23
 80043d2:	18bb      	adds	r3, r7, r2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b22      	cmp	r3, #34	@ 0x22
 80043d8:	d003      	beq.n	80043e2 <I2C_Slave_ISR_DMA+0x176>
 80043da:	18bb      	adds	r3, r7, r2
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b2a      	cmp	r3, #42	@ 0x2a
 80043e0:	d102      	bne.n	80043e8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2222      	movs	r2, #34	@ 0x22
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fc1b 	bl	8004c2c <I2C_ITError>
      if (treatdmanack == 1U)
 80043f6:	e005      	b.n	8004404 <I2C_Slave_ISR_DMA+0x198>
 80043f8:	e004      	b.n	8004404 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004402:	e00f      	b.n	8004424 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8004404:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004406:	e00d      	b.n	8004424 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2208      	movs	r2, #8
 800440c:	4013      	ands	r3, r2
 800440e:	d009      	beq.n	8004424 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2208      	movs	r2, #8
 8004414:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004416:	d005      	beq.n	8004424 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	0011      	movs	r1, r2
 800441e:	0018      	movs	r0, r3
 8004420:	f000 f80c 	bl	800443c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2240      	movs	r2, #64	@ 0x40
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b008      	add	sp, #32
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	ffff0000 	.word	0xffff0000

0800443c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800443c:	b5b0      	push	{r4, r5, r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2241      	movs	r2, #65	@ 0x41
 800444a:	5c9b      	ldrb	r3, [r3, r2]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	001a      	movs	r2, r3
 8004450:	2328      	movs	r3, #40	@ 0x28
 8004452:	4013      	ands	r3, r2
 8004454:	2b28      	cmp	r3, #40	@ 0x28
 8004456:	d000      	beq.n	800445a <I2C_ITAddrCplt+0x1e>
 8004458:	e088      	b.n	800456c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	b2da      	uxtb	r2, r3
 8004464:	250f      	movs	r5, #15
 8004466:	197b      	adds	r3, r7, r5
 8004468:	2101      	movs	r1, #1
 800446a:	400a      	ands	r2, r1
 800446c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	b29a      	uxth	r2, r3
 8004478:	200c      	movs	r0, #12
 800447a:	183b      	adds	r3, r7, r0
 800447c:	21fe      	movs	r1, #254	@ 0xfe
 800447e:	400a      	ands	r2, r1
 8004480:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	b29a      	uxth	r2, r3
 800448a:	240a      	movs	r4, #10
 800448c:	193b      	adds	r3, r7, r4
 800448e:	0592      	lsls	r2, r2, #22
 8004490:	0d92      	lsrs	r2, r2, #22
 8004492:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	b29a      	uxth	r2, r3
 800449c:	2308      	movs	r3, #8
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	21fe      	movs	r1, #254	@ 0xfe
 80044a2:	400a      	ands	r2, r1
 80044a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d148      	bne.n	8004540 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80044ae:	0021      	movs	r1, r4
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	09db      	lsrs	r3, r3, #7
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	183b      	adds	r3, r7, r0
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	4053      	eors	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	001a      	movs	r2, r3
 80044c2:	2306      	movs	r3, #6
 80044c4:	4013      	ands	r3, r2
 80044c6:	d120      	bne.n	800450a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80044c8:	183b      	adds	r3, r7, r0
 80044ca:	187a      	adds	r2, r7, r1
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d14c      	bne.n	800457c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2240      	movs	r2, #64	@ 0x40
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044f8:	183b      	adds	r3, r7, r0
 80044fa:	881a      	ldrh	r2, [r3, #0]
 80044fc:	197b      	adds	r3, r7, r5
 80044fe:	7819      	ldrb	r1, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f7fc feca 	bl	800129c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004508:	e038      	b.n	800457c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800450a:	240c      	movs	r4, #12
 800450c:	193b      	adds	r3, r7, r4
 800450e:	2208      	movs	r2, #8
 8004510:	18ba      	adds	r2, r7, r2
 8004512:	8812      	ldrh	r2, [r2, #0]
 8004514:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0011      	movs	r1, r2
 800451e:	0018      	movs	r0, r3
 8004520:	f000 fdb4 	bl	800508c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800452c:	193b      	adds	r3, r7, r4
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	7819      	ldrb	r1, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f7fc feaf 	bl	800129c <HAL_I2C_AddrCallback>
}
 800453e:	e01d      	b.n	800457c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	0011      	movs	r1, r2
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fd9f 	bl	800508c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2240      	movs	r2, #64	@ 0x40
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004556:	230c      	movs	r3, #12
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	881a      	ldrh	r2, [r3, #0]
 800455c:	230f      	movs	r3, #15
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	7819      	ldrb	r1, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f7fc fe99 	bl	800129c <HAL_I2C_AddrCallback>
}
 800456a:	e007      	b.n	800457c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2240      	movs	r2, #64	@ 0x40
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bdb0      	pop	{r4, r5, r7, pc}

08004584 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2242      	movs	r2, #66	@ 0x42
 8004590:	2100      	movs	r1, #0
 8004592:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2241      	movs	r2, #65	@ 0x41
 8004598:	5c9b      	ldrb	r3, [r3, r2]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b21      	cmp	r3, #33	@ 0x21
 800459e:	d117      	bne.n	80045d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2241      	movs	r2, #65	@ 0x41
 80045a4:	2120      	movs	r1, #32
 80045a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2211      	movs	r2, #17
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2101      	movs	r1, #1
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 fd67 	bl	800508c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2240      	movs	r2, #64	@ 0x40
 80045c2:	2100      	movs	r1, #0
 80045c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff fac0 	bl	8003b4e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045ce:	e016      	b.n	80045fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2241      	movs	r2, #65	@ 0x41
 80045d4:	2120      	movs	r1, #32
 80045d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2212      	movs	r2, #18
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2102      	movs	r1, #2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 fd4f 	bl	800508c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2240      	movs	r2, #64	@ 0x40
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff fab0 	bl	8003b5e <HAL_I2C_MasterRxCpltCallback>
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2242      	movs	r2, #66	@ 0x42
 800461c:	2100      	movs	r1, #0
 800461e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	01db      	lsls	r3, r3, #7
 8004626:	4013      	ands	r3, r2
 8004628:	d008      	beq.n	800463c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4924      	ldr	r1, [pc, #144]	@ (80046c8 <I2C_ITSlaveSeqCplt+0xc0>)
 8004636:	400a      	ands	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e00c      	b.n	8004656 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	4013      	ands	r3, r2
 8004644:	d007      	beq.n	8004656 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	491e      	ldr	r1, [pc, #120]	@ (80046cc <I2C_ITSlaveSeqCplt+0xc4>)
 8004652:	400a      	ands	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2241      	movs	r2, #65	@ 0x41
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b29      	cmp	r3, #41	@ 0x29
 8004660:	d114      	bne.n	800468c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2241      	movs	r2, #65	@ 0x41
 8004666:	2128      	movs	r1, #40	@ 0x28
 8004668:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2221      	movs	r2, #33	@ 0x21
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2101      	movs	r1, #1
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fd09 	bl	800508c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2240      	movs	r2, #64	@ 0x40
 800467e:	2100      	movs	r1, #0
 8004680:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff fa72 	bl	8003b6e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800468a:	e019      	b.n	80046c0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2241      	movs	r2, #65	@ 0x41
 8004690:	5c9b      	ldrb	r3, [r3, r2]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b2a      	cmp	r3, #42	@ 0x2a
 8004696:	d113      	bne.n	80046c0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2241      	movs	r2, #65	@ 0x41
 800469c:	2128      	movs	r1, #40	@ 0x28
 800469e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2222      	movs	r2, #34	@ 0x22
 80046a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2102      	movs	r1, #2
 80046aa:	0018      	movs	r0, r3
 80046ac:	f000 fcee 	bl	800508c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2240      	movs	r2, #64	@ 0x40
 80046b4:	2100      	movs	r1, #0
 80046b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	0018      	movs	r0, r3
 80046bc:	f7fc fe30 	bl	8001320 <HAL_I2C_SlaveRxCpltCallback>
}
 80046c0:	46c0      	nop			@ (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b004      	add	sp, #16
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	ffffbfff 	.word	0xffffbfff
 80046cc:	ffff7fff 	.word	0xffff7fff

080046d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2220      	movs	r2, #32
 80046e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2241      	movs	r2, #65	@ 0x41
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b21      	cmp	r3, #33	@ 0x21
 80046f0:	d108      	bne.n	8004704 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2101      	movs	r1, #1
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 fcc8 	bl	800508c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2211      	movs	r2, #17
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
 8004702:	e00d      	b.n	8004720 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2241      	movs	r2, #65	@ 0x41
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b22      	cmp	r3, #34	@ 0x22
 800470e:	d107      	bne.n	8004720 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2102      	movs	r1, #2
 8004714:	0018      	movs	r0, r3
 8004716:	f000 fcb9 	bl	800508c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2212      	movs	r2, #18
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	494e      	ldr	r1, [pc, #312]	@ (8004864 <I2C_ITMasterCplt+0x194>)
 800472c:	400a      	ands	r2, r1
 800472e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4b      	ldr	r2, [pc, #300]	@ (8004868 <I2C_ITMasterCplt+0x198>)
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2210      	movs	r2, #16
 8004740:	4013      	ands	r3, r2
 8004742:	d009      	beq.n	8004758 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004750:	2204      	movs	r2, #4
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2241      	movs	r2, #65	@ 0x41
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b60      	cmp	r3, #96	@ 0x60
 8004762:	d109      	bne.n	8004778 <I2C_ITMasterCplt+0xa8>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2204      	movs	r2, #4
 8004768:	4013      	ands	r3, r2
 800476a:	d005      	beq.n	8004778 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	b2db      	uxtb	r3, r3
 8004774:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004776:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 fb81 	bl	8004e82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2241      	movs	r2, #65	@ 0x41
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b60      	cmp	r3, #96	@ 0x60
 8004790:	d002      	beq.n	8004798 <I2C_ITMasterCplt+0xc8>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fa43 	bl	8004c2c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047a6:	e058      	b.n	800485a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2241      	movs	r2, #65	@ 0x41
 80047ac:	5c9b      	ldrb	r3, [r3, r2]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b21      	cmp	r3, #33	@ 0x21
 80047b2:	d126      	bne.n	8004802 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2241      	movs	r2, #65	@ 0x41
 80047b8:	2120      	movs	r1, #32
 80047ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2242      	movs	r2, #66	@ 0x42
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d10c      	bne.n	80047e8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2242      	movs	r2, #66	@ 0x42
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2240      	movs	r2, #64	@ 0x40
 80047da:	2100      	movs	r1, #0
 80047dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7ff f9cc 	bl	8003b7e <HAL_I2C_MemTxCpltCallback>
}
 80047e6:	e038      	b.n	800485a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2242      	movs	r2, #66	@ 0x42
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	2100      	movs	r1, #0
 80047f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7ff f9a7 	bl	8003b4e <HAL_I2C_MasterTxCpltCallback>
}
 8004800:	e02b      	b.n	800485a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2241      	movs	r2, #65	@ 0x41
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b22      	cmp	r3, #34	@ 0x22
 800480c:	d125      	bne.n	800485a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2241      	movs	r2, #65	@ 0x41
 8004812:	2120      	movs	r1, #32
 8004814:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2242      	movs	r2, #66	@ 0x42
 8004820:	5c9b      	ldrb	r3, [r3, r2]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b40      	cmp	r3, #64	@ 0x40
 8004826:	d10c      	bne.n	8004842 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2242      	movs	r2, #66	@ 0x42
 800482c:	2100      	movs	r1, #0
 800482e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2240      	movs	r2, #64	@ 0x40
 8004834:	2100      	movs	r1, #0
 8004836:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff f9a7 	bl	8003b8e <HAL_I2C_MemRxCpltCallback>
}
 8004840:	e00b      	b.n	800485a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2242      	movs	r2, #66	@ 0x42
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2240      	movs	r2, #64	@ 0x40
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f7ff f982 	bl	8003b5e <HAL_I2C_MasterRxCpltCallback>
}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b006      	add	sp, #24
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	fe00e800 	.word	0xfe00e800
 8004868:	ffff0000 	.word	0xffff0000

0800486c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004888:	200b      	movs	r0, #11
 800488a:	183b      	adds	r3, r7, r0
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	2141      	movs	r1, #65	@ 0x41
 8004890:	5c52      	ldrb	r2, [r2, r1]
 8004892:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2220      	movs	r2, #32
 800489a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800489c:	183b      	adds	r3, r7, r0
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b21      	cmp	r3, #33	@ 0x21
 80048a2:	d003      	beq.n	80048ac <I2C_ITSlaveCplt+0x40>
 80048a4:	183b      	adds	r3, r7, r0
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b29      	cmp	r3, #41	@ 0x29
 80048aa:	d109      	bne.n	80048c0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80048ac:	4aac      	ldr	r2, [pc, #688]	@ (8004b60 <I2C_ITSlaveCplt+0x2f4>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0011      	movs	r1, r2
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fbea 	bl	800508c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2221      	movs	r2, #33	@ 0x21
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80048be:	e020      	b.n	8004902 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048c0:	220b      	movs	r2, #11
 80048c2:	18bb      	adds	r3, r7, r2
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b22      	cmp	r3, #34	@ 0x22
 80048c8:	d003      	beq.n	80048d2 <I2C_ITSlaveCplt+0x66>
 80048ca:	18bb      	adds	r3, r7, r2
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d0:	d109      	bne.n	80048e6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80048d2:	4aa4      	ldr	r2, [pc, #656]	@ (8004b64 <I2C_ITSlaveCplt+0x2f8>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0011      	movs	r1, r2
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fbd7 	bl	800508c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2222      	movs	r2, #34	@ 0x22
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048e4:	e00d      	b.n	8004902 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80048e6:	230b      	movs	r3, #11
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b28      	cmp	r3, #40	@ 0x28
 80048ee:	d108      	bne.n	8004902 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80048f0:	4a9d      	ldr	r2, [pc, #628]	@ (8004b68 <I2C_ITSlaveCplt+0x2fc>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0011      	movs	r1, r2
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fbc8 	bl	800508c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2180      	movs	r1, #128	@ 0x80
 800490e:	0209      	lsls	r1, r1, #8
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4993      	ldr	r1, [pc, #588]	@ (8004b6c <I2C_ITSlaveCplt+0x300>)
 8004920:	400a      	ands	r2, r1
 8004922:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 faab 	bl	8004e82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	4013      	ands	r3, r2
 8004934:	d013      	beq.n	800495e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	498b      	ldr	r1, [pc, #556]	@ (8004b70 <I2C_ITSlaveCplt+0x304>)
 8004942:	400a      	ands	r2, r1
 8004944:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	2b00      	cmp	r3, #0
 800494c:	d01f      	beq.n	800498e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800495c:	e017      	b.n	800498e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	2380      	movs	r3, #128	@ 0x80
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4013      	ands	r3, r2
 8004966:	d012      	beq.n	800498e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4980      	ldr	r1, [pc, #512]	@ (8004b74 <I2C_ITSlaveCplt+0x308>)
 8004974:	400a      	ands	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2204      	movs	r2, #4
 8004992:	4013      	ands	r3, r2
 8004994:	d020      	beq.n	80049d8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2204      	movs	r2, #4
 800499a:	4393      	bics	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	2204      	movs	r2, #4
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2210      	movs	r2, #16
 80049f2:	4013      	ands	r3, r2
 80049f4:	d04f      	beq.n	8004a96 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2210      	movs	r2, #16
 80049fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80049fc:	d04b      	beq.n	8004a96 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d12d      	bne.n	8004a64 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2241      	movs	r2, #65	@ 0x41
 8004a0c:	5c9b      	ldrb	r3, [r3, r2]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b28      	cmp	r3, #40	@ 0x28
 8004a12:	d10b      	bne.n	8004a2c <I2C_ITSlaveCplt+0x1c0>
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	049b      	lsls	r3, r3, #18
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d106      	bne.n	8004a2c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	0011      	movs	r1, r2
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f8a9 	bl	8004b7c <I2C_ITListenCplt>
 8004a2a:	e034      	b.n	8004a96 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	@ 0x41
 8004a30:	5c9b      	ldrb	r3, [r3, r2]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b29      	cmp	r3, #41	@ 0x29
 8004a36:	d110      	bne.n	8004a5a <I2C_ITSlaveCplt+0x1ee>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a4f      	ldr	r2, [pc, #316]	@ (8004b78 <I2C_ITSlaveCplt+0x30c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00c      	beq.n	8004a5a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2210      	movs	r2, #16
 8004a46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 fa19 	bl	8004e82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7ff fdd8 	bl	8004608 <I2C_ITSlaveSeqCplt>
 8004a58:	e01d      	b.n	8004a96 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	61da      	str	r2, [r3, #28]
 8004a62:	e018      	b.n	8004a96 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a70:	2204      	movs	r2, #4
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d004      	beq.n	8004a88 <I2C_ITSlaveCplt+0x21c>
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	045b      	lsls	r3, r3, #17
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d106      	bne.n	8004a96 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0011      	movs	r1, r2
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f8cb 	bl	8004c2c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2242      	movs	r2, #66	@ 0x42
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f000 f8b9 	bl	8004c2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2241      	movs	r2, #65	@ 0x41
 8004abe:	5c9b      	ldrb	r3, [r3, r2]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b28      	cmp	r3, #40	@ 0x28
 8004ac4:	d147      	bne.n	8004b56 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 f855 	bl	8004b7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ad2:	e040      	b.n	8004b56 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <I2C_ITSlaveCplt+0x30c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d016      	beq.n	8004b0c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7ff fd91 	bl	8004608 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a23      	ldr	r2, [pc, #140]	@ (8004b78 <I2C_ITSlaveCplt+0x30c>)
 8004aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2241      	movs	r2, #65	@ 0x41
 8004af0:	2120      	movs	r1, #32
 8004af2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2240      	movs	r2, #64	@ 0x40
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fc fbbd 	bl	8001284 <HAL_I2C_ListenCpltCallback>
}
 8004b0a:	e024      	b.n	8004b56 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2241      	movs	r2, #65	@ 0x41
 8004b10:	5c9b      	ldrb	r3, [r3, r2]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b22      	cmp	r3, #34	@ 0x22
 8004b16:	d10f      	bne.n	8004b38 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2241      	movs	r2, #65	@ 0x41
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2240      	movs	r2, #64	@ 0x40
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fc fbf5 	bl	8001320 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b36:	e00e      	b.n	8004b56 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2241      	movs	r2, #65	@ 0x41
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7ff f80c 	bl	8003b6e <HAL_I2C_SlaveTxCpltCallback>
}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b006      	add	sp, #24
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	00008001 	.word	0x00008001
 8004b64:	00008002 	.word	0x00008002
 8004b68:	00008003 	.word	0x00008003
 8004b6c:	fe00e800 	.word	0xfe00e800
 8004b70:	ffffbfff 	.word	0xffffbfff
 8004b74:	ffff7fff 	.word	0xffff7fff
 8004b78:	ffff0000 	.word	0xffff0000

08004b7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <I2C_ITListenCplt+0xa8>)
 8004b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2241      	movs	r2, #65	@ 0x41
 8004b96:	2120      	movs	r1, #32
 8004b98:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2242      	movs	r2, #66	@ 0x42
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2204      	movs	r2, #4
 8004bac:	4013      	ands	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	2204      	movs	r2, #4
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <I2C_ITListenCplt+0xac>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fa45 	bl	800508c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2210      	movs	r2, #16
 8004c08:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2240      	movs	r2, #64	@ 0x40
 8004c0e:	2100      	movs	r1, #0
 8004c10:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7fc fb35 	bl	8001284 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	ffff0000 	.word	0xffff0000
 8004c28:	00008003 	.word	0x00008003

08004c2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c36:	200f      	movs	r0, #15
 8004c38:	183b      	adds	r3, r7, r0
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	2141      	movs	r1, #65	@ 0x41
 8004c3e:	5c52      	ldrb	r2, [r2, r1]
 8004c40:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2242      	movs	r2, #66	@ 0x42
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a72      	ldr	r2, [pc, #456]	@ (8004e18 <I2C_ITError+0x1ec>)
 8004c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c62:	183b      	adds	r3, r7, r0
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b28      	cmp	r3, #40	@ 0x28
 8004c68:	d007      	beq.n	8004c7a <I2C_ITError+0x4e>
 8004c6a:	183b      	adds	r3, r7, r0
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b29      	cmp	r3, #41	@ 0x29
 8004c70:	d003      	beq.n	8004c7a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c72:	183b      	adds	r3, r7, r0
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c78:	d10c      	bne.n	8004c94 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fa04 	bl	800508c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2241      	movs	r2, #65	@ 0x41
 8004c88:	2128      	movs	r1, #40	@ 0x28
 8004c8a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a63      	ldr	r2, [pc, #396]	@ (8004e1c <I2C_ITError+0x1f0>)
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c92:	e032      	b.n	8004cfa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c94:	4a62      	ldr	r2, [pc, #392]	@ (8004e20 <I2C_ITError+0x1f4>)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0011      	movs	r1, r2
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f9f6 	bl	800508c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f000 f8ed 	bl	8004e82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2241      	movs	r2, #65	@ 0x41
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d01f      	beq.n	8004cf4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2241      	movs	r2, #65	@ 0x41
 8004cb8:	2120      	movs	r1, #32
 8004cba:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d114      	bne.n	8004cf4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d109      	bne.n	8004cec <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d03b      	beq.n	8004d80 <I2C_ITError+0x154>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b11      	cmp	r3, #17
 8004d0c:	d002      	beq.n	8004d14 <I2C_ITError+0xe8>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b21      	cmp	r3, #33	@ 0x21
 8004d12:	d135      	bne.n	8004d80 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	401a      	ands	r2, r3
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	01db      	lsls	r3, r3, #7
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d107      	bne.n	8004d38 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	493c      	ldr	r1, [pc, #240]	@ (8004e24 <I2C_ITError+0x1f8>)
 8004d34:	400a      	ands	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fe f94a 	bl	8002fd6 <HAL_DMA_GetState>
 8004d42:	0003      	movs	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d016      	beq.n	8004d76 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	4a36      	ldr	r2, [pc, #216]	@ (8004e28 <I2C_ITError+0x1fc>)
 8004d4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7fe f853 	bl	8002e08 <HAL_DMA_Abort_IT>
 8004d62:	1e03      	subs	r3, r0, #0
 8004d64:	d051      	beq.n	8004e0a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	0018      	movs	r0, r3
 8004d72:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d74:	e049      	b.n	8004e0a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 f859 	bl	8004e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d7e:	e044      	b.n	8004e0a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d03b      	beq.n	8004e00 <I2C_ITError+0x1d4>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b12      	cmp	r3, #18
 8004d8c:	d002      	beq.n	8004d94 <I2C_ITError+0x168>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b22      	cmp	r3, #34	@ 0x22
 8004d92:	d135      	bne.n	8004e00 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	401a      	ands	r2, r3
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d107      	bne.n	8004db8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	491e      	ldr	r1, [pc, #120]	@ (8004e2c <I2C_ITError+0x200>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fe f90a 	bl	8002fd6 <HAL_DMA_GetState>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d016      	beq.n	8004df6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	4a16      	ldr	r2, [pc, #88]	@ (8004e28 <I2C_ITError+0x1fc>)
 8004dce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2240      	movs	r2, #64	@ 0x40
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7fe f813 	bl	8002e08 <HAL_DMA_Abort_IT>
 8004de2:	1e03      	subs	r3, r0, #0
 8004de4:	d013      	beq.n	8004e0e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df0:	0018      	movs	r0, r3
 8004df2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004df4:	e00b      	b.n	8004e0e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 f819 	bl	8004e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dfe:	e006      	b.n	8004e0e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f000 f814 	bl	8004e30 <I2C_TreatErrorCallback>
  }
}
 8004e08:	e002      	b.n	8004e10 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	e000      	b.n	8004e10 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e0e:	46c0      	nop			@ (mov r8, r8)
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b004      	add	sp, #16
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	ffff0000 	.word	0xffff0000
 8004e1c:	08003bc5 	.word	0x08003bc5
 8004e20:	00008003 	.word	0x00008003
 8004e24:	ffffbfff 	.word	0xffffbfff
 8004e28:	08004ec7 	.word	0x08004ec7
 8004e2c:	ffff7fff 	.word	0xffff7fff

08004e30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2241      	movs	r2, #65	@ 0x41
 8004e3c:	5c9b      	ldrb	r3, [r3, r2]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b60      	cmp	r3, #96	@ 0x60
 8004e42:	d10f      	bne.n	8004e64 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2241      	movs	r2, #65	@ 0x41
 8004e48:	2120      	movs	r1, #32
 8004e4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2240      	movs	r2, #64	@ 0x40
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fe fe9e 	bl	8003b9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e62:	e00a      	b.n	8004e7a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2240      	movs	r2, #64	@ 0x40
 8004e6e:	2100      	movs	r1, #0
 8004e70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7fc fa9f 	bl	80013b8 <HAL_I2C_ErrorCallback>
}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b002      	add	sp, #8
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2202      	movs	r2, #2
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d103      	bne.n	8004ea0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d007      	beq.n	8004ebe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
  }
}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff ff9a 	bl	8004e30 <I2C_TreatErrorCallback>
}
 8004efc:	46c0      	nop			@ (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b004      	add	sp, #16
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	0008      	movs	r0, r1
 8004f0e:	0011      	movs	r1, r2
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	240a      	movs	r4, #10
 8004f14:	193b      	adds	r3, r7, r4
 8004f16:	1c02      	adds	r2, r0, #0
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	2009      	movs	r0, #9
 8004f1c:	183b      	adds	r3, r7, r0
 8004f1e:	1c0a      	adds	r2, r1, #0
 8004f20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	059b      	lsls	r3, r3, #22
 8004f28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f2a:	183b      	adds	r3, r7, r0
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	0419      	lsls	r1, r3, #16
 8004f30:	23ff      	movs	r3, #255	@ 0xff
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4e:	0d51      	lsrs	r1, r2, #21
 8004f50:	2280      	movs	r2, #128	@ 0x80
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	400a      	ands	r2, r1
 8004f56:	4907      	ldr	r1, [pc, #28]	@ (8004f74 <I2C_TransferConfig+0x70>)
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	43d2      	mvns	r2, r2
 8004f5c:	401a      	ands	r2, r3
 8004f5e:	0011      	movs	r1, r2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b007      	add	sp, #28
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	03ff63ff 	.word	0x03ff63ff

08004f78 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	000a      	movs	r2, r1
 8004f82:	1cbb      	adds	r3, r7, #2
 8004f84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005080 <I2C_Enable_IRQ+0x108>)
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d035      	beq.n	8005000 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004f98:	4b3a      	ldr	r3, [pc, #232]	@ (8005084 <I2C_Enable_IRQ+0x10c>)
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d030      	beq.n	8005000 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004fa2:	4b39      	ldr	r3, [pc, #228]	@ (8005088 <I2C_Enable_IRQ+0x110>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d02b      	beq.n	8005000 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fa8:	1cbb      	adds	r3, r7, #2
 8004faa:	2200      	movs	r2, #0
 8004fac:	5e9b      	ldrsh	r3, [r3, r2]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da03      	bge.n	8004fba <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	22b8      	movs	r2, #184	@ 0xb8
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fba:	1cbb      	adds	r3, r7, #2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	22f2      	movs	r2, #242	@ 0xf2
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fcc:	1cbb      	adds	r3, r7, #2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d003      	beq.n	8004fde <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	22f4      	movs	r2, #244	@ 0xf4
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004fde:	1cbb      	adds	r3, r7, #2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d103      	bne.n	8004fee <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2290      	movs	r2, #144	@ 0x90
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fee:	1cbb      	adds	r3, r7, #2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d137      	bne.n	8005066 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ffe:	e032      	b.n	8005066 <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005000:	1cbb      	adds	r3, r7, #2
 8005002:	2200      	movs	r2, #0
 8005004:	5e9b      	ldrsh	r3, [r3, r2]
 8005006:	2b00      	cmp	r3, #0
 8005008:	da03      	bge.n	8005012 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	22b8      	movs	r2, #184	@ 0xb8
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005012:	1cbb      	adds	r3, r7, #2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	4013      	ands	r3, r2
 800501a:	d003      	beq.n	8005024 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	22f2      	movs	r2, #242	@ 0xf2
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005024:	1cbb      	adds	r3, r7, #2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	2202      	movs	r2, #2
 800502a:	4013      	ands	r3, r2
 800502c:	d003      	beq.n	8005036 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	22f4      	movs	r2, #244	@ 0xf4
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005036:	1cbb      	adds	r3, r7, #2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	2b10      	cmp	r3, #16
 800503c:	d103      	bne.n	8005046 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2290      	movs	r2, #144	@ 0x90
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005046:	1cbb      	adds	r3, r7, #2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	2b20      	cmp	r3, #32
 800504c:	d103      	bne.n	8005056 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2260      	movs	r2, #96	@ 0x60
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005056:	1cbb      	adds	r3, r7, #2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d103      	bne.n	8005066 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2240      	movs	r2, #64	@ 0x40
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b004      	add	sp, #16
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	08003dc5 	.word	0x08003dc5
 8005084:	0800426d 	.word	0x0800426d
 8005088:	08003fd9 	.word	0x08003fd9

0800508c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	000a      	movs	r2, r1
 8005096:	1cbb      	adds	r3, r7, #2
 8005098:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800509e:	1cbb      	adds	r3, r7, #2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	2201      	movs	r2, #1
 80050a4:	4013      	ands	r3, r2
 80050a6:	d010      	beq.n	80050ca <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2242      	movs	r2, #66	@ 0x42
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2241      	movs	r2, #65	@ 0x41
 80050b4:	5c9b      	ldrb	r3, [r3, r2]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	001a      	movs	r2, r3
 80050ba:	2328      	movs	r3, #40	@ 0x28
 80050bc:	4013      	ands	r3, r2
 80050be:	2b28      	cmp	r3, #40	@ 0x28
 80050c0:	d003      	beq.n	80050ca <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22b0      	movs	r2, #176	@ 0xb0
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050ca:	1cbb      	adds	r3, r7, #2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	2202      	movs	r2, #2
 80050d0:	4013      	ands	r3, r2
 80050d2:	d010      	beq.n	80050f6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2244      	movs	r2, #68	@ 0x44
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2241      	movs	r2, #65	@ 0x41
 80050e0:	5c9b      	ldrb	r3, [r3, r2]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	001a      	movs	r2, r3
 80050e6:	2328      	movs	r3, #40	@ 0x28
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b28      	cmp	r3, #40	@ 0x28
 80050ec:	d003      	beq.n	80050f6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	22b0      	movs	r2, #176	@ 0xb0
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050f6:	1cbb      	adds	r3, r7, #2
 80050f8:	2200      	movs	r2, #0
 80050fa:	5e9b      	ldrsh	r3, [r3, r2]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	da03      	bge.n	8005108 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	22b8      	movs	r2, #184	@ 0xb8
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005108:	1cbb      	adds	r3, r7, #2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	2b10      	cmp	r3, #16
 800510e:	d103      	bne.n	8005118 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2290      	movs	r2, #144	@ 0x90
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005118:	1cbb      	adds	r3, r7, #2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	2b20      	cmp	r3, #32
 800511e:	d103      	bne.n	8005128 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005128:	1cbb      	adds	r3, r7, #2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d103      	bne.n	8005138 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43d9      	mvns	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	400a      	ands	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b004      	add	sp, #16
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e301      	b.n	800576a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2201      	movs	r2, #1
 800516c:	4013      	ands	r3, r2
 800516e:	d100      	bne.n	8005172 <HAL_RCC_OscConfig+0x1e>
 8005170:	e08d      	b.n	800528e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005172:	4bc3      	ldr	r3, [pc, #780]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	220c      	movs	r2, #12
 8005178:	4013      	ands	r3, r2
 800517a:	2b04      	cmp	r3, #4
 800517c:	d00e      	beq.n	800519c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800517e:	4bc0      	ldr	r3, [pc, #768]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	220c      	movs	r2, #12
 8005184:	4013      	ands	r3, r2
 8005186:	2b08      	cmp	r3, #8
 8005188:	d116      	bne.n	80051b8 <HAL_RCC_OscConfig+0x64>
 800518a:	4bbd      	ldr	r3, [pc, #756]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	025b      	lsls	r3, r3, #9
 8005192:	401a      	ands	r2, r3
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	025b      	lsls	r3, r3, #9
 8005198:	429a      	cmp	r2, r3
 800519a:	d10d      	bne.n	80051b8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	4bb8      	ldr	r3, [pc, #736]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	029b      	lsls	r3, r3, #10
 80051a4:	4013      	ands	r3, r2
 80051a6:	d100      	bne.n	80051aa <HAL_RCC_OscConfig+0x56>
 80051a8:	e070      	b.n	800528c <HAL_RCC_OscConfig+0x138>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d000      	beq.n	80051b4 <HAL_RCC_OscConfig+0x60>
 80051b2:	e06b      	b.n	800528c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e2d8      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <HAL_RCC_OscConfig+0x7c>
 80051c0:	4baf      	ldr	r3, [pc, #700]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4bae      	ldr	r3, [pc, #696]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051c6:	2180      	movs	r1, #128	@ 0x80
 80051c8:	0249      	lsls	r1, r1, #9
 80051ca:	430a      	orrs	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e02f      	b.n	8005230 <HAL_RCC_OscConfig+0xdc>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCC_OscConfig+0x9e>
 80051d8:	4ba9      	ldr	r3, [pc, #676]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4ba8      	ldr	r3, [pc, #672]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051de:	49a9      	ldr	r1, [pc, #676]	@ (8005484 <HAL_RCC_OscConfig+0x330>)
 80051e0:	400a      	ands	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	4ba6      	ldr	r3, [pc, #664]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4ba5      	ldr	r3, [pc, #660]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051ea:	49a7      	ldr	r1, [pc, #668]	@ (8005488 <HAL_RCC_OscConfig+0x334>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e01e      	b.n	8005230 <HAL_RCC_OscConfig+0xdc>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10e      	bne.n	8005218 <HAL_RCC_OscConfig+0xc4>
 80051fa:	4ba1      	ldr	r3, [pc, #644]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4ba0      	ldr	r3, [pc, #640]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005200:	2180      	movs	r1, #128	@ 0x80
 8005202:	02c9      	lsls	r1, r1, #11
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4b9d      	ldr	r3, [pc, #628]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b9c      	ldr	r3, [pc, #624]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800520e:	2180      	movs	r1, #128	@ 0x80
 8005210:	0249      	lsls	r1, r1, #9
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e00b      	b.n	8005230 <HAL_RCC_OscConfig+0xdc>
 8005218:	4b99      	ldr	r3, [pc, #612]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b98      	ldr	r3, [pc, #608]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800521e:	4999      	ldr	r1, [pc, #612]	@ (8005484 <HAL_RCC_OscConfig+0x330>)
 8005220:	400a      	ands	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	4b96      	ldr	r3, [pc, #600]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b95      	ldr	r3, [pc, #596]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800522a:	4997      	ldr	r1, [pc, #604]	@ (8005488 <HAL_RCC_OscConfig+0x334>)
 800522c:	400a      	ands	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d014      	beq.n	8005262 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7fd f82a 	bl	8002290 <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005242:	f7fd f825 	bl	8002290 <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b64      	cmp	r3, #100	@ 0x64
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e28a      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005254:	4b8a      	ldr	r3, [pc, #552]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	4013      	ands	r3, r2
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0xee>
 8005260:	e015      	b.n	800528e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005262:	f7fd f815 	bl	8002290 <HAL_GetTick>
 8005266:	0003      	movs	r3, r0
 8005268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800526c:	f7fd f810 	bl	8002290 <HAL_GetTick>
 8005270:	0002      	movs	r2, r0
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e275      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527e:	4b80      	ldr	r3, [pc, #512]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	4013      	ands	r3, r2
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x118>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d100      	bne.n	800529a <HAL_RCC_OscConfig+0x146>
 8005298:	e069      	b.n	800536e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800529a:	4b79      	ldr	r3, [pc, #484]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	220c      	movs	r2, #12
 80052a0:	4013      	ands	r3, r2
 80052a2:	d00b      	beq.n	80052bc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80052a4:	4b76      	ldr	r3, [pc, #472]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	220c      	movs	r2, #12
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d11c      	bne.n	80052ea <HAL_RCC_OscConfig+0x196>
 80052b0:	4b73      	ldr	r3, [pc, #460]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	2380      	movs	r3, #128	@ 0x80
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	4013      	ands	r3, r2
 80052ba:	d116      	bne.n	80052ea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052bc:	4b70      	ldr	r3, [pc, #448]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2202      	movs	r2, #2
 80052c2:	4013      	ands	r3, r2
 80052c4:	d005      	beq.n	80052d2 <HAL_RCC_OscConfig+0x17e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e24b      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d2:	4b6b      	ldr	r3, [pc, #428]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	22f8      	movs	r2, #248	@ 0xf8
 80052d8:	4393      	bics	r3, r2
 80052da:	0019      	movs	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	00da      	lsls	r2, r3, #3
 80052e2:	4b67      	ldr	r3, [pc, #412]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e8:	e041      	b.n	800536e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d024      	beq.n	800533c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f2:	4b63      	ldr	r3, [pc, #396]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b62      	ldr	r3, [pc, #392]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052f8:	2101      	movs	r1, #1
 80052fa:	430a      	orrs	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fe:	f7fc ffc7 	bl	8002290 <HAL_GetTick>
 8005302:	0003      	movs	r3, r0
 8005304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005308:	f7fc ffc2 	bl	8002290 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e227      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b59      	ldr	r3, [pc, #356]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	d0f1      	beq.n	8005308 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005324:	4b56      	ldr	r3, [pc, #344]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	22f8      	movs	r2, #248	@ 0xf8
 800532a:	4393      	bics	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00da      	lsls	r2, r3, #3
 8005334:	4b52      	ldr	r3, [pc, #328]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e018      	b.n	800536e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800533c:	4b50      	ldr	r3, [pc, #320]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b4f      	ldr	r3, [pc, #316]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005342:	2101      	movs	r1, #1
 8005344:	438a      	bics	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fc ffa2 	bl	8002290 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005352:	f7fc ff9d 	bl	8002290 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e202      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005364:	4b46      	ldr	r3, [pc, #280]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2202      	movs	r2, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d1f1      	bne.n	8005352 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2208      	movs	r2, #8
 8005374:	4013      	ands	r3, r2
 8005376:	d036      	beq.n	80053e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d019      	beq.n	80053b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005380:	4b3f      	ldr	r3, [pc, #252]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005384:	4b3e      	ldr	r3, [pc, #248]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005386:	2101      	movs	r1, #1
 8005388:	430a      	orrs	r2, r1
 800538a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538c:	f7fc ff80 	bl	8002290 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005396:	f7fc ff7b 	bl	8002290 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e1e0      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a8:	4b35      	ldr	r3, [pc, #212]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	2202      	movs	r2, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	d0f1      	beq.n	8005396 <HAL_RCC_OscConfig+0x242>
 80053b2:	e018      	b.n	80053e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b4:	4b32      	ldr	r3, [pc, #200]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b8:	4b31      	ldr	r3, [pc, #196]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053ba:	2101      	movs	r1, #1
 80053bc:	438a      	bics	r2, r1
 80053be:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c0:	f7fc ff66 	bl	8002290 <HAL_GetTick>
 80053c4:	0003      	movs	r3, r0
 80053c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ca:	f7fc ff61 	bl	8002290 <HAL_GetTick>
 80053ce:	0002      	movs	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e1c6      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053dc:	4b28      	ldr	r3, [pc, #160]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	2202      	movs	r2, #2
 80053e2:	4013      	ands	r3, r2
 80053e4:	d1f1      	bne.n	80053ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2204      	movs	r2, #4
 80053ec:	4013      	ands	r3, r2
 80053ee:	d100      	bne.n	80053f2 <HAL_RCC_OscConfig+0x29e>
 80053f0:	e0b4      	b.n	800555c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	201f      	movs	r0, #31
 80053f4:	183b      	adds	r3, r7, r0
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fa:	4b21      	ldr	r3, [pc, #132]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	055b      	lsls	r3, r3, #21
 8005402:	4013      	ands	r3, r2
 8005404:	d110      	bne.n	8005428 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	4b1e      	ldr	r3, [pc, #120]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	4b1d      	ldr	r3, [pc, #116]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 800540c:	2180      	movs	r1, #128	@ 0x80
 800540e:	0549      	lsls	r1, r1, #21
 8005410:	430a      	orrs	r2, r1
 8005412:	61da      	str	r2, [r3, #28]
 8005414:	4b1a      	ldr	r3, [pc, #104]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	055b      	lsls	r3, r3, #21
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005422:	183b      	adds	r3, r7, r0
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005428:	4b18      	ldr	r3, [pc, #96]	@ (800548c <HAL_RCC_OscConfig+0x338>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4013      	ands	r3, r2
 8005432:	d11a      	bne.n	800546a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_RCC_OscConfig+0x338>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b14      	ldr	r3, [pc, #80]	@ (800548c <HAL_RCC_OscConfig+0x338>)
 800543a:	2180      	movs	r1, #128	@ 0x80
 800543c:	0049      	lsls	r1, r1, #1
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005442:	f7fc ff25 	bl	8002290 <HAL_GetTick>
 8005446:	0003      	movs	r3, r0
 8005448:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544c:	f7fc ff20 	bl	8002290 <HAL_GetTick>
 8005450:	0002      	movs	r2, r0
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	@ 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e185      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCC_OscConfig+0x338>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <HAL_RCC_OscConfig+0x33c>
 8005472:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	4b02      	ldr	r3, [pc, #8]	@ (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005478:	2101      	movs	r1, #1
 800547a:	430a      	orrs	r2, r1
 800547c:	621a      	str	r2, [r3, #32]
 800547e:	e035      	b.n	80054ec <HAL_RCC_OscConfig+0x398>
 8005480:	40021000 	.word	0x40021000
 8005484:	fffeffff 	.word	0xfffeffff
 8005488:	fffbffff 	.word	0xfffbffff
 800548c:	40007000 	.word	0x40007000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10c      	bne.n	80054b2 <HAL_RCC_OscConfig+0x35e>
 8005498:	4bb6      	ldr	r3, [pc, #728]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	4bb5      	ldr	r3, [pc, #724]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 800549e:	2101      	movs	r1, #1
 80054a0:	438a      	bics	r2, r1
 80054a2:	621a      	str	r2, [r3, #32]
 80054a4:	4bb3      	ldr	r3, [pc, #716]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	4bb2      	ldr	r3, [pc, #712]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054aa:	2104      	movs	r1, #4
 80054ac:	438a      	bics	r2, r1
 80054ae:	621a      	str	r2, [r3, #32]
 80054b0:	e01c      	b.n	80054ec <HAL_RCC_OscConfig+0x398>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x380>
 80054ba:	4bae      	ldr	r3, [pc, #696]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054bc:	6a1a      	ldr	r2, [r3, #32]
 80054be:	4bad      	ldr	r3, [pc, #692]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054c0:	2104      	movs	r1, #4
 80054c2:	430a      	orrs	r2, r1
 80054c4:	621a      	str	r2, [r3, #32]
 80054c6:	4bab      	ldr	r3, [pc, #684]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	4baa      	ldr	r3, [pc, #680]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054cc:	2101      	movs	r1, #1
 80054ce:	430a      	orrs	r2, r1
 80054d0:	621a      	str	r2, [r3, #32]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0x398>
 80054d4:	4ba7      	ldr	r3, [pc, #668]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054da:	2101      	movs	r1, #1
 80054dc:	438a      	bics	r2, r1
 80054de:	621a      	str	r2, [r3, #32]
 80054e0:	4ba4      	ldr	r3, [pc, #656]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	4ba3      	ldr	r3, [pc, #652]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80054e6:	2104      	movs	r1, #4
 80054e8:	438a      	bics	r2, r1
 80054ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d014      	beq.n	800551e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fc fecc 	bl	8002290 <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	e009      	b.n	8005512 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fc fec7 	bl	8002290 <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	4a9b      	ldr	r2, [pc, #620]	@ (8005778 <HAL_RCC_OscConfig+0x624>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e12b      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005512:	4b98      	ldr	r3, [pc, #608]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	2202      	movs	r2, #2
 8005518:	4013      	ands	r3, r2
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x3aa>
 800551c:	e013      	b.n	8005546 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551e:	f7fc feb7 	bl	8002290 <HAL_GetTick>
 8005522:	0003      	movs	r3, r0
 8005524:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005526:	e009      	b.n	800553c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fc feb2 	bl	8002290 <HAL_GetTick>
 800552c:	0002      	movs	r2, r0
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a91      	ldr	r2, [pc, #580]	@ (8005778 <HAL_RCC_OscConfig+0x624>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e116      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553c:	4b8d      	ldr	r3, [pc, #564]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	2202      	movs	r2, #2
 8005542:	4013      	ands	r3, r2
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005546:	231f      	movs	r3, #31
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d105      	bne.n	800555c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005550:	4b88      	ldr	r3, [pc, #544]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	4b87      	ldr	r3, [pc, #540]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005556:	4989      	ldr	r1, [pc, #548]	@ (800577c <HAL_RCC_OscConfig+0x628>)
 8005558:	400a      	ands	r2, r1
 800555a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2210      	movs	r2, #16
 8005562:	4013      	ands	r3, r2
 8005564:	d063      	beq.n	800562e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d12a      	bne.n	80055c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800556e:	4b81      	ldr	r3, [pc, #516]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005572:	4b80      	ldr	r3, [pc, #512]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005574:	2104      	movs	r1, #4
 8005576:	430a      	orrs	r2, r1
 8005578:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800557a:	4b7e      	ldr	r3, [pc, #504]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 800557c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800557e:	4b7d      	ldr	r3, [pc, #500]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005580:	2101      	movs	r1, #1
 8005582:	430a      	orrs	r2, r1
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005586:	f7fc fe83 	bl	8002290 <HAL_GetTick>
 800558a:	0003      	movs	r3, r0
 800558c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005590:	f7fc fe7e 	bl	8002290 <HAL_GetTick>
 8005594:	0002      	movs	r2, r0
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0e3      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80055a2:	4b74      	ldr	r3, [pc, #464]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	d0f1      	beq.n	8005590 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80055ac:	4b71      	ldr	r3, [pc, #452]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b0:	22f8      	movs	r2, #248	@ 0xf8
 80055b2:	4393      	bics	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	00da      	lsls	r2, r3, #3
 80055bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055be:	430a      	orrs	r2, r1
 80055c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80055c2:	e034      	b.n	800562e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	3305      	adds	r3, #5
 80055ca:	d111      	bne.n	80055f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80055cc:	4b69      	ldr	r3, [pc, #420]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d0:	4b68      	ldr	r3, [pc, #416]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055d2:	2104      	movs	r1, #4
 80055d4:	438a      	bics	r2, r1
 80055d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80055d8:	4b66      	ldr	r3, [pc, #408]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055dc:	22f8      	movs	r2, #248	@ 0xf8
 80055de:	4393      	bics	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	00da      	lsls	r2, r3, #3
 80055e8:	4b62      	ldr	r3, [pc, #392]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055ea:	430a      	orrs	r2, r1
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80055ee:	e01e      	b.n	800562e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80055f0:	4b60      	ldr	r3, [pc, #384]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f4:	4b5f      	ldr	r3, [pc, #380]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055f6:	2104      	movs	r1, #4
 80055f8:	430a      	orrs	r2, r1
 80055fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80055fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80055fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005600:	4b5c      	ldr	r3, [pc, #368]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005602:	2101      	movs	r1, #1
 8005604:	438a      	bics	r2, r1
 8005606:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005608:	f7fc fe42 	bl	8002290 <HAL_GetTick>
 800560c:	0003      	movs	r3, r0
 800560e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005612:	f7fc fe3d 	bl	8002290 <HAL_GetTick>
 8005616:	0002      	movs	r2, r0
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e0a2      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005624:	4b53      	ldr	r3, [pc, #332]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005628:	2202      	movs	r2, #2
 800562a:	4013      	ands	r3, r2
 800562c:	d1f1      	bne.n	8005612 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d100      	bne.n	8005638 <HAL_RCC_OscConfig+0x4e4>
 8005636:	e097      	b.n	8005768 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005638:	4b4e      	ldr	r3, [pc, #312]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	220c      	movs	r2, #12
 800563e:	4013      	ands	r3, r2
 8005640:	2b08      	cmp	r3, #8
 8005642:	d100      	bne.n	8005646 <HAL_RCC_OscConfig+0x4f2>
 8005644:	e06b      	b.n	800571e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d14c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b49      	ldr	r3, [pc, #292]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b48      	ldr	r3, [pc, #288]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005654:	494a      	ldr	r1, [pc, #296]	@ (8005780 <HAL_RCC_OscConfig+0x62c>)
 8005656:	400a      	ands	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565a:	f7fc fe19 	bl	8002290 <HAL_GetTick>
 800565e:	0003      	movs	r3, r0
 8005660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005664:	f7fc fe14 	bl	8002290 <HAL_GetTick>
 8005668:	0002      	movs	r2, r0
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e079      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005676:	4b3f      	ldr	r3, [pc, #252]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	049b      	lsls	r3, r3, #18
 800567e:	4013      	ands	r3, r2
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005682:	4b3c      	ldr	r3, [pc, #240]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	220f      	movs	r2, #15
 8005688:	4393      	bics	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005690:	4b38      	ldr	r3, [pc, #224]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005692:	430a      	orrs	r2, r1
 8005694:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005696:	4b37      	ldr	r3, [pc, #220]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4a3a      	ldr	r2, [pc, #232]	@ (8005784 <HAL_RCC_OscConfig+0x630>)
 800569c:	4013      	ands	r3, r2
 800569e:	0019      	movs	r1, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	4b32      	ldr	r3, [pc, #200]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b0:	4b30      	ldr	r3, [pc, #192]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	0449      	lsls	r1, r1, #17
 80056ba:	430a      	orrs	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056be:	f7fc fde7 	bl	8002290 <HAL_GetTick>
 80056c2:	0003      	movs	r3, r0
 80056c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fc fde2 	bl	8002290 <HAL_GetTick>
 80056cc:	0002      	movs	r2, r0
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e047      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056da:	4b26      	ldr	r3, [pc, #152]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	049b      	lsls	r3, r3, #18
 80056e2:	4013      	ands	r3, r2
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x574>
 80056e6:	e03f      	b.n	8005768 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e8:	4b22      	ldr	r3, [pc, #136]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 80056ee:	4924      	ldr	r1, [pc, #144]	@ (8005780 <HAL_RCC_OscConfig+0x62c>)
 80056f0:	400a      	ands	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc fdcc 	bl	8002290 <HAL_GetTick>
 80056f8:	0003      	movs	r3, r0
 80056fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fe:	f7fc fdc7 	bl	8002290 <HAL_GetTick>
 8005702:	0002      	movs	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e02c      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005710:	4b18      	ldr	r3, [pc, #96]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	049b      	lsls	r3, r3, #18
 8005718:	4013      	ands	r3, r2
 800571a:	d1f0      	bne.n	80056fe <HAL_RCC_OscConfig+0x5aa>
 800571c:	e024      	b.n	8005768 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e01f      	b.n	800576a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800572a:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005730:	4b10      	ldr	r3, [pc, #64]	@ (8005774 <HAL_RCC_OscConfig+0x620>)
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	2380      	movs	r3, #128	@ 0x80
 800573a:	025b      	lsls	r3, r3, #9
 800573c:	401a      	ands	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	429a      	cmp	r2, r3
 8005744:	d10e      	bne.n	8005764 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	220f      	movs	r2, #15
 800574a:	401a      	ands	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d107      	bne.n	8005764 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	23f0      	movs	r3, #240	@ 0xf0
 8005758:	039b      	lsls	r3, r3, #14
 800575a:	401a      	ands	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	0018      	movs	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	b008      	add	sp, #32
 8005770:	bd80      	pop	{r7, pc}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	40021000 	.word	0x40021000
 8005778:	00001388 	.word	0x00001388
 800577c:	efffffff 	.word	0xefffffff
 8005780:	feffffff 	.word	0xfeffffff
 8005784:	ffc2ffff 	.word	0xffc2ffff

08005788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b3      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b5b      	ldr	r3, [pc, #364]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2201      	movs	r2, #1
 80057a2:	4013      	ands	r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d911      	bls.n	80057ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b58      	ldr	r3, [pc, #352]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4393      	bics	r3, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	4b55      	ldr	r3, [pc, #340]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057bc:	4b53      	ldr	r3, [pc, #332]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e09a      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2202      	movs	r2, #2
 80057d4:	4013      	ands	r3, r2
 80057d6:	d015      	beq.n	8005804 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2204      	movs	r2, #4
 80057de:	4013      	ands	r3, r2
 80057e0:	d006      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 80057e8:	21e0      	movs	r1, #224	@ 0xe0
 80057ea:	00c9      	lsls	r1, r1, #3
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f0:	4b47      	ldr	r3, [pc, #284]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	22f0      	movs	r2, #240	@ 0xf0
 80057f6:	4393      	bics	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	4b44      	ldr	r3, [pc, #272]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	4013      	ands	r3, r2
 800580c:	d040      	beq.n	8005890 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	4b3e      	ldr	r3, [pc, #248]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	4013      	ands	r3, r2
 8005820:	d114      	bne.n	800584c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e06e      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582e:	4b38      	ldr	r3, [pc, #224]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	2380      	movs	r3, #128	@ 0x80
 8005834:	049b      	lsls	r3, r3, #18
 8005836:	4013      	ands	r3, r2
 8005838:	d108      	bne.n	800584c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e062      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583e:	4b34      	ldr	r3, [pc, #208]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2202      	movs	r2, #2
 8005844:	4013      	ands	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e05b      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584c:	4b30      	ldr	r3, [pc, #192]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2203      	movs	r2, #3
 8005852:	4393      	bics	r3, r2
 8005854:	0019      	movs	r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	4b2d      	ldr	r3, [pc, #180]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005860:	f7fc fd16 	bl	8002290 <HAL_GetTick>
 8005864:	0003      	movs	r3, r0
 8005866:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005868:	e009      	b.n	800587e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586a:	f7fc fd11 	bl	8002290 <HAL_GetTick>
 800586e:	0002      	movs	r2, r0
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	4a27      	ldr	r2, [pc, #156]	@ (8005914 <HAL_RCC_ClockConfig+0x18c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e042      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	4b24      	ldr	r3, [pc, #144]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	220c      	movs	r2, #12
 8005884:	401a      	ands	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	429a      	cmp	r2, r3
 800588e:	d1ec      	bne.n	800586a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b1e      	ldr	r3, [pc, #120]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2201      	movs	r2, #1
 8005896:	4013      	ands	r3, r2
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d211      	bcs.n	80058c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b1b      	ldr	r3, [pc, #108]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	4393      	bics	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	4b18      	ldr	r3, [pc, #96]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b0:	4b16      	ldr	r3, [pc, #88]	@ (800590c <HAL_RCC_ClockConfig+0x184>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	4013      	ands	r3, r2
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e020      	b.n	8005904 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2204      	movs	r2, #4
 80058c8:	4013      	ands	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80058cc:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a11      	ldr	r2, [pc, #68]	@ (8005918 <HAL_RCC_ClockConfig+0x190>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058e0:	f000 f820 	bl	8005924 <HAL_RCC_GetSysClockFreq>
 80058e4:	0001      	movs	r1, r0
 80058e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <HAL_RCC_ClockConfig+0x188>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	220f      	movs	r2, #15
 80058ee:	4013      	ands	r3, r2
 80058f0:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <HAL_RCC_ClockConfig+0x194>)
 80058f2:	5cd3      	ldrb	r3, [r2, r3]
 80058f4:	000a      	movs	r2, r1
 80058f6:	40da      	lsrs	r2, r3
 80058f8:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <HAL_RCC_ClockConfig+0x198>)
 80058fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80058fc:	2003      	movs	r0, #3
 80058fe:	f7fc fc81 	bl	8002204 <HAL_InitTick>
  
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	0018      	movs	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	b004      	add	sp, #16
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40022000 	.word	0x40022000
 8005910:	40021000 	.word	0x40021000
 8005914:	00001388 	.word	0x00001388
 8005918:	fffff8ff 	.word	0xfffff8ff
 800591c:	08005c68 	.word	0x08005c68
 8005920:	20000000 	.word	0x20000000

08005924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800593e:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	220c      	movs	r2, #12
 8005948:	4013      	ands	r3, r2
 800594a:	2b04      	cmp	r3, #4
 800594c:	d002      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x30>
 800594e:	2b08      	cmp	r3, #8
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x36>
 8005952:	e02c      	b.n	80059ae <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005954:	4b1b      	ldr	r3, [pc, #108]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005956:	613b      	str	r3, [r7, #16]
      break;
 8005958:	e02c      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0c9b      	lsrs	r3, r3, #18
 800595e:	220f      	movs	r2, #15
 8005960:	4013      	ands	r3, r2
 8005962:	4a19      	ldr	r2, [pc, #100]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005964:	5cd3      	ldrb	r3, [r2, r3]
 8005966:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005968:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	220f      	movs	r2, #15
 800596e:	4013      	ands	r3, r2
 8005970:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <HAL_RCC_GetSysClockFreq+0xa8>)
 8005972:	5cd3      	ldrb	r3, [r2, r3]
 8005974:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	025b      	lsls	r3, r3, #9
 800597c:	4013      	ands	r3, r2
 800597e:	d009      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4810      	ldr	r0, [pc, #64]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005984:	f7fa fbc0 	bl	8000108 <__udivsi3>
 8005988:	0003      	movs	r3, r0
 800598a:	001a      	movs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4353      	muls	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e009      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	000a      	movs	r2, r1
 8005998:	0152      	lsls	r2, r2, #5
 800599a:	1a52      	subs	r2, r2, r1
 800599c:	0193      	lsls	r3, r2, #6
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	185b      	adds	r3, r3, r1
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	613b      	str	r3, [r7, #16]
      break;
 80059ac:	e002      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059ae:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80059b0:	613b      	str	r3, [r7, #16]
      break;
 80059b2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80059b4:	693b      	ldr	r3, [r7, #16]
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b006      	add	sp, #24
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	40021000 	.word	0x40021000
 80059c4:	007a1200 	.word	0x007a1200
 80059c8:	08005c78 	.word	0x08005c78
 80059cc:	08005c88 	.word	0x08005c88

080059d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	2380      	movs	r3, #128	@ 0x80
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	4013      	ands	r3, r2
 80059ea:	d100      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80059ec:	e08e      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2017      	movs	r0, #23
 80059f0:	183b      	adds	r3, r7, r0
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f6:	4b57      	ldr	r3, [pc, #348]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	2380      	movs	r3, #128	@ 0x80
 80059fc:	055b      	lsls	r3, r3, #21
 80059fe:	4013      	ands	r3, r2
 8005a00:	d110      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a02:	4b54      	ldr	r3, [pc, #336]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	4b53      	ldr	r3, [pc, #332]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a08:	2180      	movs	r1, #128	@ 0x80
 8005a0a:	0549      	lsls	r1, r1, #21
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	61da      	str	r2, [r3, #28]
 8005a10:	4b50      	ldr	r3, [pc, #320]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	055b      	lsls	r3, r3, #21
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a1e:	183b      	adds	r3, r7, r0
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a24:	4b4c      	ldr	r3, [pc, #304]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	2380      	movs	r3, #128	@ 0x80
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d11a      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a30:	4b49      	ldr	r3, [pc, #292]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4b48      	ldr	r3, [pc, #288]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005a36:	2180      	movs	r1, #128	@ 0x80
 8005a38:	0049      	lsls	r1, r1, #1
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3e:	f7fc fc27 	bl	8002290 <HAL_GetTick>
 8005a42:	0003      	movs	r3, r0
 8005a44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a46:	e008      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a48:	f7fc fc22 	bl	8002290 <HAL_GetTick>
 8005a4c:	0002      	movs	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	@ 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e077      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	@ 0x80
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a66:	4b3b      	ldr	r3, [pc, #236]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	23c0      	movs	r3, #192	@ 0xc0
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4013      	ands	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d034      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	23c0      	movs	r3, #192	@ 0xc0
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4013      	ands	r3, r2
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d02c      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a88:	4b32      	ldr	r3, [pc, #200]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4a33      	ldr	r2, [pc, #204]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a92:	4b30      	ldr	r3, [pc, #192]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a98:	2180      	movs	r1, #128	@ 0x80
 8005a9a:	0249      	lsls	r1, r1, #9
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aa6:	492e      	ldr	r1, [pc, #184]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005aac:	4b29      	ldr	r3, [pc, #164]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fc fbe9 	bl	8002290 <HAL_GetTick>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac2:	e009      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac4:	f7fc fbe4 	bl	8002290 <HAL_GetTick>
 8005ac8:	0002      	movs	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	4a25      	ldr	r2, [pc, #148]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e038      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	2202      	movs	r2, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	0019      	movs	r1, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	4b18      	ldr	r3, [pc, #96]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005af2:	430a      	orrs	r2, r1
 8005af4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005af6:	2317      	movs	r3, #23
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d105      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b00:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	4b13      	ldr	r3, [pc, #76]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b06:	4918      	ldr	r1, [pc, #96]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	4013      	ands	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b16:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	0019      	movs	r1, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b26:	430a      	orrs	r2, r1
 8005b28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	4013      	ands	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b34:	4b07      	ldr	r3, [pc, #28]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b38:	2210      	movs	r2, #16
 8005b3a:	4393      	bics	r3, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	4b04      	ldr	r3, [pc, #16]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b44:	430a      	orrs	r2, r1
 8005b46:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b006      	add	sp, #24
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40007000 	.word	0x40007000
 8005b5c:	fffffcff 	.word	0xfffffcff
 8005b60:	fffeffff 	.word	0xfffeffff
 8005b64:	00001388 	.word	0x00001388
 8005b68:	efffffff 	.word	0xefffffff

08005b6c <memset>:
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	1882      	adds	r2, r0, r2
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d100      	bne.n	8005b76 <memset+0xa>
 8005b74:	4770      	bx	lr
 8005b76:	7019      	strb	r1, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	e7f9      	b.n	8005b70 <memset+0x4>

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	2600      	movs	r6, #0
 8005b80:	4c0c      	ldr	r4, [pc, #48]	@ (8005bb4 <__libc_init_array+0x38>)
 8005b82:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb8 <__libc_init_array+0x3c>)
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	f000 f819 	bl	8005bc4 <_init>
 8005b92:	4c0a      	ldr	r4, [pc, #40]	@ (8005bbc <__libc_init_array+0x40>)
 8005b94:	4d0a      	ldr	r5, [pc, #40]	@ (8005bc0 <__libc_init_array+0x44>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	00b3      	lsls	r3, r6, #2
 8005ba2:	58eb      	ldr	r3, [r5, r3]
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	00b3      	lsls	r3, r6, #2
 8005bac:	58eb      	ldr	r3, [r5, r3]
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	08005c98 	.word	0x08005c98
 8005bb8:	08005c98 	.word	0x08005c98
 8005bbc:	08005c9c 	.word	0x08005c9c
 8005bc0:	08005c98 	.word	0x08005c98

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
