
stm32f030_compiled_40reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f7c  08005f7c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f7c  08005f7c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f7c  08005f7c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00006f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f80  08005f80  00006f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005f84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08005f90  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005f90  000072bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083a5  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aba  00000000  00000000  0000f3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00010e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000640  00000000  00000000  000116c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f865  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd7b  00000000  00000000  0002156d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bef4  00000000  00000000  0002d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000891dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e64  00000000  00000000  00089264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0008b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ea8 	.word	0x08005ea8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005ea8 	.word	0x08005ea8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f8bd 	bl	80013a8 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f823 	bl	8001280 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fc80 	bl	8000b48 <__aeabi_dsub>
 8000248:	f001 f81a 	bl	8001280 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_fdiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	0244      	lsls	r4, r0, #9
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0047      	lsls	r7, r0, #1
 800026a:	1c0e      	adds	r6, r1, #0
 800026c:	0a64      	lsrs	r4, r4, #9
 800026e:	0e3f      	lsrs	r7, r7, #24
 8000270:	0fc5      	lsrs	r5, r0, #31
 8000272:	2f00      	cmp	r7, #0
 8000274:	d03c      	beq.n	80002f0 <__aeabi_fdiv+0x94>
 8000276:	2fff      	cmp	r7, #255	@ 0xff
 8000278:	d042      	beq.n	8000300 <__aeabi_fdiv+0xa4>
 800027a:	2300      	movs	r3, #0
 800027c:	2280      	movs	r2, #128	@ 0x80
 800027e:	4699      	mov	r9, r3
 8000280:	469a      	mov	sl, r3
 8000282:	00e4      	lsls	r4, r4, #3
 8000284:	04d2      	lsls	r2, r2, #19
 8000286:	4314      	orrs	r4, r2
 8000288:	3f7f      	subs	r7, #127	@ 0x7f
 800028a:	0273      	lsls	r3, r6, #9
 800028c:	0a5b      	lsrs	r3, r3, #9
 800028e:	4698      	mov	r8, r3
 8000290:	0073      	lsls	r3, r6, #1
 8000292:	0e1b      	lsrs	r3, r3, #24
 8000294:	0ff6      	lsrs	r6, r6, #31
 8000296:	2b00      	cmp	r3, #0
 8000298:	d01b      	beq.n	80002d2 <__aeabi_fdiv+0x76>
 800029a:	2bff      	cmp	r3, #255	@ 0xff
 800029c:	d013      	beq.n	80002c6 <__aeabi_fdiv+0x6a>
 800029e:	4642      	mov	r2, r8
 80002a0:	2180      	movs	r1, #128	@ 0x80
 80002a2:	00d2      	lsls	r2, r2, #3
 80002a4:	04c9      	lsls	r1, r1, #19
 80002a6:	4311      	orrs	r1, r2
 80002a8:	4688      	mov	r8, r1
 80002aa:	2000      	movs	r0, #0
 80002ac:	3b7f      	subs	r3, #127	@ 0x7f
 80002ae:	0029      	movs	r1, r5
 80002b0:	1aff      	subs	r7, r7, r3
 80002b2:	464b      	mov	r3, r9
 80002b4:	4071      	eors	r1, r6
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	2b0f      	cmp	r3, #15
 80002ba:	d900      	bls.n	80002be <__aeabi_fdiv+0x62>
 80002bc:	e0b5      	b.n	800042a <__aeabi_fdiv+0x1ce>
 80002be:	4a74      	ldr	r2, [pc, #464]	@ (8000490 <__aeabi_fdiv+0x234>)
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	58d3      	ldr	r3, [r2, r3]
 80002c4:	469f      	mov	pc, r3
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d13f      	bne.n	800034c <__aeabi_fdiv+0xf0>
 80002cc:	3fff      	subs	r7, #255	@ 0xff
 80002ce:	3302      	adds	r3, #2
 80002d0:	e003      	b.n	80002da <__aeabi_fdiv+0x7e>
 80002d2:	4643      	mov	r3, r8
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d12d      	bne.n	8000334 <__aeabi_fdiv+0xd8>
 80002d8:	2301      	movs	r3, #1
 80002da:	0029      	movs	r1, r5
 80002dc:	464a      	mov	r2, r9
 80002de:	4071      	eors	r1, r6
 80002e0:	b2c9      	uxtb	r1, r1
 80002e2:	431a      	orrs	r2, r3
 80002e4:	2a0e      	cmp	r2, #14
 80002e6:	d838      	bhi.n	800035a <__aeabi_fdiv+0xfe>
 80002e8:	486a      	ldr	r0, [pc, #424]	@ (8000494 <__aeabi_fdiv+0x238>)
 80002ea:	0092      	lsls	r2, r2, #2
 80002ec:	5882      	ldr	r2, [r0, r2]
 80002ee:	4697      	mov	pc, r2
 80002f0:	2c00      	cmp	r4, #0
 80002f2:	d113      	bne.n	800031c <__aeabi_fdiv+0xc0>
 80002f4:	2304      	movs	r3, #4
 80002f6:	4699      	mov	r9, r3
 80002f8:	3b03      	subs	r3, #3
 80002fa:	2700      	movs	r7, #0
 80002fc:	469a      	mov	sl, r3
 80002fe:	e7c4      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000300:	2c00      	cmp	r4, #0
 8000302:	d105      	bne.n	8000310 <__aeabi_fdiv+0xb4>
 8000304:	2308      	movs	r3, #8
 8000306:	4699      	mov	r9, r3
 8000308:	3b06      	subs	r3, #6
 800030a:	27ff      	movs	r7, #255	@ 0xff
 800030c:	469a      	mov	sl, r3
 800030e:	e7bc      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000310:	230c      	movs	r3, #12
 8000312:	4699      	mov	r9, r3
 8000314:	3b09      	subs	r3, #9
 8000316:	27ff      	movs	r7, #255	@ 0xff
 8000318:	469a      	mov	sl, r3
 800031a:	e7b6      	b.n	800028a <__aeabi_fdiv+0x2e>
 800031c:	0020      	movs	r0, r4
 800031e:	f001 f84d 	bl	80013bc <__clzsi2>
 8000322:	2776      	movs	r7, #118	@ 0x76
 8000324:	1f43      	subs	r3, r0, #5
 8000326:	409c      	lsls	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	427f      	negs	r7, r7
 800032c:	4699      	mov	r9, r3
 800032e:	469a      	mov	sl, r3
 8000330:	1a3f      	subs	r7, r7, r0
 8000332:	e7aa      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000334:	4640      	mov	r0, r8
 8000336:	f001 f841 	bl	80013bc <__clzsi2>
 800033a:	4642      	mov	r2, r8
 800033c:	1f43      	subs	r3, r0, #5
 800033e:	409a      	lsls	r2, r3
 8000340:	2376      	movs	r3, #118	@ 0x76
 8000342:	425b      	negs	r3, r3
 8000344:	1a1b      	subs	r3, r3, r0
 8000346:	4690      	mov	r8, r2
 8000348:	2000      	movs	r0, #0
 800034a:	e7b0      	b.n	80002ae <__aeabi_fdiv+0x52>
 800034c:	2303      	movs	r3, #3
 800034e:	464a      	mov	r2, r9
 8000350:	431a      	orrs	r2, r3
 8000352:	4691      	mov	r9, r2
 8000354:	2003      	movs	r0, #3
 8000356:	33fc      	adds	r3, #252	@ 0xfc
 8000358:	e7a9      	b.n	80002ae <__aeabi_fdiv+0x52>
 800035a:	000d      	movs	r5, r1
 800035c:	20ff      	movs	r0, #255	@ 0xff
 800035e:	2200      	movs	r2, #0
 8000360:	05c0      	lsls	r0, r0, #23
 8000362:	07ed      	lsls	r5, r5, #31
 8000364:	4310      	orrs	r0, r2
 8000366:	4328      	orrs	r0, r5
 8000368:	bce0      	pop	{r5, r6, r7}
 800036a:	46ba      	mov	sl, r7
 800036c:	46b1      	mov	r9, r6
 800036e:	46a8      	mov	r8, r5
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000372:	000d      	movs	r5, r1
 8000374:	2000      	movs	r0, #0
 8000376:	2200      	movs	r2, #0
 8000378:	e7f2      	b.n	8000360 <__aeabi_fdiv+0x104>
 800037a:	4653      	mov	r3, sl
 800037c:	2b02      	cmp	r3, #2
 800037e:	d0ed      	beq.n	800035c <__aeabi_fdiv+0x100>
 8000380:	2b03      	cmp	r3, #3
 8000382:	d033      	beq.n	80003ec <__aeabi_fdiv+0x190>
 8000384:	46a0      	mov	r8, r4
 8000386:	2b01      	cmp	r3, #1
 8000388:	d105      	bne.n	8000396 <__aeabi_fdiv+0x13a>
 800038a:	2000      	movs	r0, #0
 800038c:	2200      	movs	r2, #0
 800038e:	e7e7      	b.n	8000360 <__aeabi_fdiv+0x104>
 8000390:	0035      	movs	r5, r6
 8000392:	2803      	cmp	r0, #3
 8000394:	d07a      	beq.n	800048c <__aeabi_fdiv+0x230>
 8000396:	003b      	movs	r3, r7
 8000398:	337f      	adds	r3, #127	@ 0x7f
 800039a:	2b00      	cmp	r3, #0
 800039c:	dd2d      	ble.n	80003fa <__aeabi_fdiv+0x19e>
 800039e:	4642      	mov	r2, r8
 80003a0:	0752      	lsls	r2, r2, #29
 80003a2:	d007      	beq.n	80003b4 <__aeabi_fdiv+0x158>
 80003a4:	220f      	movs	r2, #15
 80003a6:	4641      	mov	r1, r8
 80003a8:	400a      	ands	r2, r1
 80003aa:	2a04      	cmp	r2, #4
 80003ac:	d002      	beq.n	80003b4 <__aeabi_fdiv+0x158>
 80003ae:	2204      	movs	r2, #4
 80003b0:	4694      	mov	ip, r2
 80003b2:	44e0      	add	r8, ip
 80003b4:	4642      	mov	r2, r8
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	d505      	bpl.n	80003c6 <__aeabi_fdiv+0x16a>
 80003ba:	4642      	mov	r2, r8
 80003bc:	4b36      	ldr	r3, [pc, #216]	@ (8000498 <__aeabi_fdiv+0x23c>)
 80003be:	401a      	ands	r2, r3
 80003c0:	003b      	movs	r3, r7
 80003c2:	4690      	mov	r8, r2
 80003c4:	3380      	adds	r3, #128	@ 0x80
 80003c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80003c8:	dcc8      	bgt.n	800035c <__aeabi_fdiv+0x100>
 80003ca:	4642      	mov	r2, r8
 80003cc:	0192      	lsls	r2, r2, #6
 80003ce:	0a52      	lsrs	r2, r2, #9
 80003d0:	b2d8      	uxtb	r0, r3
 80003d2:	e7c5      	b.n	8000360 <__aeabi_fdiv+0x104>
 80003d4:	2280      	movs	r2, #128	@ 0x80
 80003d6:	2500      	movs	r5, #0
 80003d8:	20ff      	movs	r0, #255	@ 0xff
 80003da:	03d2      	lsls	r2, r2, #15
 80003dc:	e7c0      	b.n	8000360 <__aeabi_fdiv+0x104>
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	03d2      	lsls	r2, r2, #15
 80003e2:	4214      	tst	r4, r2
 80003e4:	d002      	beq.n	80003ec <__aeabi_fdiv+0x190>
 80003e6:	4643      	mov	r3, r8
 80003e8:	4213      	tst	r3, r2
 80003ea:	d049      	beq.n	8000480 <__aeabi_fdiv+0x224>
 80003ec:	2280      	movs	r2, #128	@ 0x80
 80003ee:	03d2      	lsls	r2, r2, #15
 80003f0:	4322      	orrs	r2, r4
 80003f2:	0252      	lsls	r2, r2, #9
 80003f4:	20ff      	movs	r0, #255	@ 0xff
 80003f6:	0a52      	lsrs	r2, r2, #9
 80003f8:	e7b2      	b.n	8000360 <__aeabi_fdiv+0x104>
 80003fa:	2201      	movs	r2, #1
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	2b1b      	cmp	r3, #27
 8000400:	dcc3      	bgt.n	800038a <__aeabi_fdiv+0x12e>
 8000402:	4642      	mov	r2, r8
 8000404:	40da      	lsrs	r2, r3
 8000406:	4643      	mov	r3, r8
 8000408:	379e      	adds	r7, #158	@ 0x9e
 800040a:	40bb      	lsls	r3, r7
 800040c:	1e59      	subs	r1, r3, #1
 800040e:	418b      	sbcs	r3, r1
 8000410:	431a      	orrs	r2, r3
 8000412:	0753      	lsls	r3, r2, #29
 8000414:	d004      	beq.n	8000420 <__aeabi_fdiv+0x1c4>
 8000416:	230f      	movs	r3, #15
 8000418:	4013      	ands	r3, r2
 800041a:	2b04      	cmp	r3, #4
 800041c:	d000      	beq.n	8000420 <__aeabi_fdiv+0x1c4>
 800041e:	3204      	adds	r2, #4
 8000420:	0153      	lsls	r3, r2, #5
 8000422:	d529      	bpl.n	8000478 <__aeabi_fdiv+0x21c>
 8000424:	2001      	movs	r0, #1
 8000426:	2200      	movs	r2, #0
 8000428:	e79a      	b.n	8000360 <__aeabi_fdiv+0x104>
 800042a:	4642      	mov	r2, r8
 800042c:	0163      	lsls	r3, r4, #5
 800042e:	0155      	lsls	r5, r2, #5
 8000430:	42ab      	cmp	r3, r5
 8000432:	d215      	bcs.n	8000460 <__aeabi_fdiv+0x204>
 8000434:	201b      	movs	r0, #27
 8000436:	2200      	movs	r2, #0
 8000438:	3f01      	subs	r7, #1
 800043a:	2601      	movs	r6, #1
 800043c:	001c      	movs	r4, r3
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	2c00      	cmp	r4, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fdiv+0x1ee>
 8000446:	429d      	cmp	r5, r3
 8000448:	d801      	bhi.n	800044e <__aeabi_fdiv+0x1f2>
 800044a:	1b5b      	subs	r3, r3, r5
 800044c:	4332      	orrs	r2, r6
 800044e:	3801      	subs	r0, #1
 8000450:	2800      	cmp	r0, #0
 8000452:	d1f3      	bne.n	800043c <__aeabi_fdiv+0x1e0>
 8000454:	1e58      	subs	r0, r3, #1
 8000456:	4183      	sbcs	r3, r0
 8000458:	4313      	orrs	r3, r2
 800045a:	4698      	mov	r8, r3
 800045c:	000d      	movs	r5, r1
 800045e:	e79a      	b.n	8000396 <__aeabi_fdiv+0x13a>
 8000460:	201a      	movs	r0, #26
 8000462:	2201      	movs	r2, #1
 8000464:	1b5b      	subs	r3, r3, r5
 8000466:	e7e8      	b.n	800043a <__aeabi_fdiv+0x1de>
 8000468:	3b02      	subs	r3, #2
 800046a:	425a      	negs	r2, r3
 800046c:	4153      	adcs	r3, r2
 800046e:	425b      	negs	r3, r3
 8000470:	0035      	movs	r5, r6
 8000472:	2200      	movs	r2, #0
 8000474:	b2d8      	uxtb	r0, r3
 8000476:	e773      	b.n	8000360 <__aeabi_fdiv+0x104>
 8000478:	0192      	lsls	r2, r2, #6
 800047a:	2000      	movs	r0, #0
 800047c:	0a52      	lsrs	r2, r2, #9
 800047e:	e76f      	b.n	8000360 <__aeabi_fdiv+0x104>
 8000480:	431a      	orrs	r2, r3
 8000482:	0252      	lsls	r2, r2, #9
 8000484:	0035      	movs	r5, r6
 8000486:	20ff      	movs	r0, #255	@ 0xff
 8000488:	0a52      	lsrs	r2, r2, #9
 800048a:	e769      	b.n	8000360 <__aeabi_fdiv+0x104>
 800048c:	4644      	mov	r4, r8
 800048e:	e7ad      	b.n	80003ec <__aeabi_fdiv+0x190>
 8000490:	08005ec0 	.word	0x08005ec0
 8000494:	08005f00 	.word	0x08005f00
 8000498:	f7ffffff 	.word	0xf7ffffff

0800049c <__aeabi_i2f>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	2800      	cmp	r0, #0
 80004a0:	d013      	beq.n	80004ca <__aeabi_i2f+0x2e>
 80004a2:	17c3      	asrs	r3, r0, #31
 80004a4:	18c5      	adds	r5, r0, r3
 80004a6:	405d      	eors	r5, r3
 80004a8:	0fc4      	lsrs	r4, r0, #31
 80004aa:	0028      	movs	r0, r5
 80004ac:	f000 ff86 	bl	80013bc <__clzsi2>
 80004b0:	239e      	movs	r3, #158	@ 0x9e
 80004b2:	0001      	movs	r1, r0
 80004b4:	1a1b      	subs	r3, r3, r0
 80004b6:	2b96      	cmp	r3, #150	@ 0x96
 80004b8:	dc0f      	bgt.n	80004da <__aeabi_i2f+0x3e>
 80004ba:	2808      	cmp	r0, #8
 80004bc:	d034      	beq.n	8000528 <__aeabi_i2f+0x8c>
 80004be:	3908      	subs	r1, #8
 80004c0:	408d      	lsls	r5, r1
 80004c2:	026d      	lsls	r5, r5, #9
 80004c4:	0a6d      	lsrs	r5, r5, #9
 80004c6:	b2d8      	uxtb	r0, r3
 80004c8:	e002      	b.n	80004d0 <__aeabi_i2f+0x34>
 80004ca:	2400      	movs	r4, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	2500      	movs	r5, #0
 80004d0:	05c0      	lsls	r0, r0, #23
 80004d2:	4328      	orrs	r0, r5
 80004d4:	07e4      	lsls	r4, r4, #31
 80004d6:	4320      	orrs	r0, r4
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	2b99      	cmp	r3, #153	@ 0x99
 80004dc:	dc16      	bgt.n	800050c <__aeabi_i2f+0x70>
 80004de:	1f42      	subs	r2, r0, #5
 80004e0:	2805      	cmp	r0, #5
 80004e2:	d000      	beq.n	80004e6 <__aeabi_i2f+0x4a>
 80004e4:	4095      	lsls	r5, r2
 80004e6:	002a      	movs	r2, r5
 80004e8:	4811      	ldr	r0, [pc, #68]	@ (8000530 <__aeabi_i2f+0x94>)
 80004ea:	4002      	ands	r2, r0
 80004ec:	076e      	lsls	r6, r5, #29
 80004ee:	d009      	beq.n	8000504 <__aeabi_i2f+0x68>
 80004f0:	260f      	movs	r6, #15
 80004f2:	4035      	ands	r5, r6
 80004f4:	2d04      	cmp	r5, #4
 80004f6:	d005      	beq.n	8000504 <__aeabi_i2f+0x68>
 80004f8:	3204      	adds	r2, #4
 80004fa:	0155      	lsls	r5, r2, #5
 80004fc:	d502      	bpl.n	8000504 <__aeabi_i2f+0x68>
 80004fe:	239f      	movs	r3, #159	@ 0x9f
 8000500:	4002      	ands	r2, r0
 8000502:	1a5b      	subs	r3, r3, r1
 8000504:	0192      	lsls	r2, r2, #6
 8000506:	0a55      	lsrs	r5, r2, #9
 8000508:	b2d8      	uxtb	r0, r3
 800050a:	e7e1      	b.n	80004d0 <__aeabi_i2f+0x34>
 800050c:	2205      	movs	r2, #5
 800050e:	1a12      	subs	r2, r2, r0
 8000510:	0028      	movs	r0, r5
 8000512:	40d0      	lsrs	r0, r2
 8000514:	0002      	movs	r2, r0
 8000516:	0008      	movs	r0, r1
 8000518:	301b      	adds	r0, #27
 800051a:	4085      	lsls	r5, r0
 800051c:	0028      	movs	r0, r5
 800051e:	1e45      	subs	r5, r0, #1
 8000520:	41a8      	sbcs	r0, r5
 8000522:	4302      	orrs	r2, r0
 8000524:	0015      	movs	r5, r2
 8000526:	e7de      	b.n	80004e6 <__aeabi_i2f+0x4a>
 8000528:	026d      	lsls	r5, r5, #9
 800052a:	2096      	movs	r0, #150	@ 0x96
 800052c:	0a6d      	lsrs	r5, r5, #9
 800052e:	e7cf      	b.n	80004d0 <__aeabi_i2f+0x34>
 8000530:	fbffffff 	.word	0xfbffffff

08000534 <__aeabi_ui2f>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	1e04      	subs	r4, r0, #0
 8000538:	d00e      	beq.n	8000558 <__aeabi_ui2f+0x24>
 800053a:	f000 ff3f 	bl	80013bc <__clzsi2>
 800053e:	239e      	movs	r3, #158	@ 0x9e
 8000540:	0001      	movs	r1, r0
 8000542:	1a1b      	subs	r3, r3, r0
 8000544:	2b96      	cmp	r3, #150	@ 0x96
 8000546:	dc0c      	bgt.n	8000562 <__aeabi_ui2f+0x2e>
 8000548:	2808      	cmp	r0, #8
 800054a:	d02f      	beq.n	80005ac <__aeabi_ui2f+0x78>
 800054c:	3908      	subs	r1, #8
 800054e:	408c      	lsls	r4, r1
 8000550:	0264      	lsls	r4, r4, #9
 8000552:	0a64      	lsrs	r4, r4, #9
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	e001      	b.n	800055c <__aeabi_ui2f+0x28>
 8000558:	2000      	movs	r0, #0
 800055a:	2400      	movs	r4, #0
 800055c:	05c0      	lsls	r0, r0, #23
 800055e:	4320      	orrs	r0, r4
 8000560:	bd70      	pop	{r4, r5, r6, pc}
 8000562:	2b99      	cmp	r3, #153	@ 0x99
 8000564:	dc16      	bgt.n	8000594 <__aeabi_ui2f+0x60>
 8000566:	1f42      	subs	r2, r0, #5
 8000568:	2805      	cmp	r0, #5
 800056a:	d000      	beq.n	800056e <__aeabi_ui2f+0x3a>
 800056c:	4094      	lsls	r4, r2
 800056e:	0022      	movs	r2, r4
 8000570:	4810      	ldr	r0, [pc, #64]	@ (80005b4 <__aeabi_ui2f+0x80>)
 8000572:	4002      	ands	r2, r0
 8000574:	0765      	lsls	r5, r4, #29
 8000576:	d009      	beq.n	800058c <__aeabi_ui2f+0x58>
 8000578:	250f      	movs	r5, #15
 800057a:	402c      	ands	r4, r5
 800057c:	2c04      	cmp	r4, #4
 800057e:	d005      	beq.n	800058c <__aeabi_ui2f+0x58>
 8000580:	3204      	adds	r2, #4
 8000582:	0154      	lsls	r4, r2, #5
 8000584:	d502      	bpl.n	800058c <__aeabi_ui2f+0x58>
 8000586:	239f      	movs	r3, #159	@ 0x9f
 8000588:	4002      	ands	r2, r0
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	0192      	lsls	r2, r2, #6
 800058e:	0a54      	lsrs	r4, r2, #9
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	e7e3      	b.n	800055c <__aeabi_ui2f+0x28>
 8000594:	0002      	movs	r2, r0
 8000596:	0020      	movs	r0, r4
 8000598:	321b      	adds	r2, #27
 800059a:	4090      	lsls	r0, r2
 800059c:	0002      	movs	r2, r0
 800059e:	1e50      	subs	r0, r2, #1
 80005a0:	4182      	sbcs	r2, r0
 80005a2:	2005      	movs	r0, #5
 80005a4:	1a40      	subs	r0, r0, r1
 80005a6:	40c4      	lsrs	r4, r0
 80005a8:	4314      	orrs	r4, r2
 80005aa:	e7e0      	b.n	800056e <__aeabi_ui2f+0x3a>
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	2096      	movs	r0, #150	@ 0x96
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	e7d3      	b.n	800055c <__aeabi_ui2f+0x28>
 80005b4:	fbffffff 	.word	0xfbffffff

080005b8 <__aeabi_dmul>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	46de      	mov	lr, fp
 80005be:	464e      	mov	r6, r9
 80005c0:	4645      	mov	r5, r8
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	001f      	movs	r7, r3
 80005c6:	030b      	lsls	r3, r1, #12
 80005c8:	0b1b      	lsrs	r3, r3, #12
 80005ca:	0016      	movs	r6, r2
 80005cc:	469a      	mov	sl, r3
 80005ce:	0fca      	lsrs	r2, r1, #31
 80005d0:	004b      	lsls	r3, r1, #1
 80005d2:	0004      	movs	r4, r0
 80005d4:	4693      	mov	fp, r2
 80005d6:	b087      	sub	sp, #28
 80005d8:	0d5b      	lsrs	r3, r3, #21
 80005da:	d100      	bne.n	80005de <__aeabi_dmul+0x26>
 80005dc:	e0d5      	b.n	800078a <__aeabi_dmul+0x1d2>
 80005de:	4abb      	ldr	r2, [pc, #748]	@ (80008cc <__aeabi_dmul+0x314>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dmul+0x2e>
 80005e4:	e0f8      	b.n	80007d8 <__aeabi_dmul+0x220>
 80005e6:	4651      	mov	r1, sl
 80005e8:	0f42      	lsrs	r2, r0, #29
 80005ea:	00c9      	lsls	r1, r1, #3
 80005ec:	430a      	orrs	r2, r1
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	0409      	lsls	r1, r1, #16
 80005f2:	4311      	orrs	r1, r2
 80005f4:	00c2      	lsls	r2, r0, #3
 80005f6:	4691      	mov	r9, r2
 80005f8:	4ab5      	ldr	r2, [pc, #724]	@ (80008d0 <__aeabi_dmul+0x318>)
 80005fa:	468a      	mov	sl, r1
 80005fc:	189d      	adds	r5, r3, r2
 80005fe:	2300      	movs	r3, #0
 8000600:	4698      	mov	r8, r3
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	033c      	lsls	r4, r7, #12
 8000606:	007b      	lsls	r3, r7, #1
 8000608:	0ffa      	lsrs	r2, r7, #31
 800060a:	0030      	movs	r0, r6
 800060c:	0b24      	lsrs	r4, r4, #12
 800060e:	0d5b      	lsrs	r3, r3, #21
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	d100      	bne.n	8000616 <__aeabi_dmul+0x5e>
 8000614:	e096      	b.n	8000744 <__aeabi_dmul+0x18c>
 8000616:	4aad      	ldr	r2, [pc, #692]	@ (80008cc <__aeabi_dmul+0x314>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d031      	beq.n	8000680 <__aeabi_dmul+0xc8>
 800061c:	0f72      	lsrs	r2, r6, #29
 800061e:	00e4      	lsls	r4, r4, #3
 8000620:	4322      	orrs	r2, r4
 8000622:	2480      	movs	r4, #128	@ 0x80
 8000624:	0424      	lsls	r4, r4, #16
 8000626:	4314      	orrs	r4, r2
 8000628:	4aa9      	ldr	r2, [pc, #676]	@ (80008d0 <__aeabi_dmul+0x318>)
 800062a:	00f0      	lsls	r0, r6, #3
 800062c:	4694      	mov	ip, r2
 800062e:	4463      	add	r3, ip
 8000630:	195b      	adds	r3, r3, r5
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	4642      	mov	r2, r8
 8000638:	2600      	movs	r6, #0
 800063a:	2a0a      	cmp	r2, #10
 800063c:	dc42      	bgt.n	80006c4 <__aeabi_dmul+0x10c>
 800063e:	465a      	mov	r2, fp
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	404a      	eors	r2, r1
 8000644:	4693      	mov	fp, r2
 8000646:	4642      	mov	r2, r8
 8000648:	2a02      	cmp	r2, #2
 800064a:	dc32      	bgt.n	80006b2 <__aeabi_dmul+0xfa>
 800064c:	3a01      	subs	r2, #1
 800064e:	2a01      	cmp	r2, #1
 8000650:	d900      	bls.n	8000654 <__aeabi_dmul+0x9c>
 8000652:	e149      	b.n	80008e8 <__aeabi_dmul+0x330>
 8000654:	2e02      	cmp	r6, #2
 8000656:	d100      	bne.n	800065a <__aeabi_dmul+0xa2>
 8000658:	e0ca      	b.n	80007f0 <__aeabi_dmul+0x238>
 800065a:	2e01      	cmp	r6, #1
 800065c:	d13d      	bne.n	80006da <__aeabi_dmul+0x122>
 800065e:	2300      	movs	r3, #0
 8000660:	2400      	movs	r4, #0
 8000662:	2200      	movs	r2, #0
 8000664:	0010      	movs	r0, r2
 8000666:	465a      	mov	r2, fp
 8000668:	051b      	lsls	r3, r3, #20
 800066a:	4323      	orrs	r3, r4
 800066c:	07d2      	lsls	r2, r2, #31
 800066e:	4313      	orrs	r3, r2
 8000670:	0019      	movs	r1, r3
 8000672:	b007      	add	sp, #28
 8000674:	bcf0      	pop	{r4, r5, r6, r7}
 8000676:	46bb      	mov	fp, r7
 8000678:	46b2      	mov	sl, r6
 800067a:	46a9      	mov	r9, r5
 800067c:	46a0      	mov	r8, r4
 800067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000680:	4b92      	ldr	r3, [pc, #584]	@ (80008cc <__aeabi_dmul+0x314>)
 8000682:	4326      	orrs	r6, r4
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d100      	bne.n	800068c <__aeabi_dmul+0xd4>
 800068a:	e0bb      	b.n	8000804 <__aeabi_dmul+0x24c>
 800068c:	2203      	movs	r2, #3
 800068e:	4641      	mov	r1, r8
 8000690:	4311      	orrs	r1, r2
 8000692:	465a      	mov	r2, fp
 8000694:	4688      	mov	r8, r1
 8000696:	9900      	ldr	r1, [sp, #0]
 8000698:	404a      	eors	r2, r1
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	0109      	lsls	r1, r1, #4
 800069e:	468c      	mov	ip, r1
 80006a0:	0029      	movs	r1, r5
 80006a2:	4461      	add	r1, ip
 80006a4:	9101      	str	r1, [sp, #4]
 80006a6:	4641      	mov	r1, r8
 80006a8:	290a      	cmp	r1, #10
 80006aa:	dd00      	ble.n	80006ae <__aeabi_dmul+0xf6>
 80006ac:	e233      	b.n	8000b16 <__aeabi_dmul+0x55e>
 80006ae:	4693      	mov	fp, r2
 80006b0:	2603      	movs	r6, #3
 80006b2:	4642      	mov	r2, r8
 80006b4:	2701      	movs	r7, #1
 80006b6:	4097      	lsls	r7, r2
 80006b8:	21a6      	movs	r1, #166	@ 0xa6
 80006ba:	003a      	movs	r2, r7
 80006bc:	00c9      	lsls	r1, r1, #3
 80006be:	400a      	ands	r2, r1
 80006c0:	420f      	tst	r7, r1
 80006c2:	d031      	beq.n	8000728 <__aeabi_dmul+0x170>
 80006c4:	9e02      	ldr	r6, [sp, #8]
 80006c6:	2e02      	cmp	r6, #2
 80006c8:	d100      	bne.n	80006cc <__aeabi_dmul+0x114>
 80006ca:	e235      	b.n	8000b38 <__aeabi_dmul+0x580>
 80006cc:	2e03      	cmp	r6, #3
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dmul+0x11a>
 80006d0:	e1d2      	b.n	8000a78 <__aeabi_dmul+0x4c0>
 80006d2:	4654      	mov	r4, sl
 80006d4:	4648      	mov	r0, r9
 80006d6:	2e01      	cmp	r6, #1
 80006d8:	d0c1      	beq.n	800065e <__aeabi_dmul+0xa6>
 80006da:	9a01      	ldr	r2, [sp, #4]
 80006dc:	4b7d      	ldr	r3, [pc, #500]	@ (80008d4 <__aeabi_dmul+0x31c>)
 80006de:	4694      	mov	ip, r2
 80006e0:	4463      	add	r3, ip
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_dmul+0x130>
 80006e6:	e0c0      	b.n	800086a <__aeabi_dmul+0x2b2>
 80006e8:	0742      	lsls	r2, r0, #29
 80006ea:	d009      	beq.n	8000700 <__aeabi_dmul+0x148>
 80006ec:	220f      	movs	r2, #15
 80006ee:	4002      	ands	r2, r0
 80006f0:	2a04      	cmp	r2, #4
 80006f2:	d005      	beq.n	8000700 <__aeabi_dmul+0x148>
 80006f4:	1d02      	adds	r2, r0, #4
 80006f6:	4282      	cmp	r2, r0
 80006f8:	4180      	sbcs	r0, r0
 80006fa:	4240      	negs	r0, r0
 80006fc:	1824      	adds	r4, r4, r0
 80006fe:	0010      	movs	r0, r2
 8000700:	01e2      	lsls	r2, r4, #7
 8000702:	d506      	bpl.n	8000712 <__aeabi_dmul+0x15a>
 8000704:	4b74      	ldr	r3, [pc, #464]	@ (80008d8 <__aeabi_dmul+0x320>)
 8000706:	9a01      	ldr	r2, [sp, #4]
 8000708:	401c      	ands	r4, r3
 800070a:	2380      	movs	r3, #128	@ 0x80
 800070c:	4694      	mov	ip, r2
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4463      	add	r3, ip
 8000712:	4a72      	ldr	r2, [pc, #456]	@ (80008dc <__aeabi_dmul+0x324>)
 8000714:	4293      	cmp	r3, r2
 8000716:	dc6b      	bgt.n	80007f0 <__aeabi_dmul+0x238>
 8000718:	0762      	lsls	r2, r4, #29
 800071a:	08c0      	lsrs	r0, r0, #3
 800071c:	0264      	lsls	r4, r4, #9
 800071e:	055b      	lsls	r3, r3, #21
 8000720:	4302      	orrs	r2, r0
 8000722:	0b24      	lsrs	r4, r4, #12
 8000724:	0d5b      	lsrs	r3, r3, #21
 8000726:	e79d      	b.n	8000664 <__aeabi_dmul+0xac>
 8000728:	2190      	movs	r1, #144	@ 0x90
 800072a:	0089      	lsls	r1, r1, #2
 800072c:	420f      	tst	r7, r1
 800072e:	d163      	bne.n	80007f8 <__aeabi_dmul+0x240>
 8000730:	2288      	movs	r2, #136	@ 0x88
 8000732:	423a      	tst	r2, r7
 8000734:	d100      	bne.n	8000738 <__aeabi_dmul+0x180>
 8000736:	e0d7      	b.n	80008e8 <__aeabi_dmul+0x330>
 8000738:	9b00      	ldr	r3, [sp, #0]
 800073a:	46a2      	mov	sl, r4
 800073c:	469b      	mov	fp, r3
 800073e:	4681      	mov	r9, r0
 8000740:	9602      	str	r6, [sp, #8]
 8000742:	e7bf      	b.n	80006c4 <__aeabi_dmul+0x10c>
 8000744:	0023      	movs	r3, r4
 8000746:	4333      	orrs	r3, r6
 8000748:	d100      	bne.n	800074c <__aeabi_dmul+0x194>
 800074a:	e07f      	b.n	800084c <__aeabi_dmul+0x294>
 800074c:	2c00      	cmp	r4, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_dmul+0x19a>
 8000750:	e1ad      	b.n	8000aae <__aeabi_dmul+0x4f6>
 8000752:	0020      	movs	r0, r4
 8000754:	f000 fe32 	bl	80013bc <__clzsi2>
 8000758:	0002      	movs	r2, r0
 800075a:	0003      	movs	r3, r0
 800075c:	3a0b      	subs	r2, #11
 800075e:	201d      	movs	r0, #29
 8000760:	0019      	movs	r1, r3
 8000762:	1a82      	subs	r2, r0, r2
 8000764:	0030      	movs	r0, r6
 8000766:	3908      	subs	r1, #8
 8000768:	40d0      	lsrs	r0, r2
 800076a:	408c      	lsls	r4, r1
 800076c:	4304      	orrs	r4, r0
 800076e:	0030      	movs	r0, r6
 8000770:	4088      	lsls	r0, r1
 8000772:	4a5b      	ldr	r2, [pc, #364]	@ (80008e0 <__aeabi_dmul+0x328>)
 8000774:	1aeb      	subs	r3, r5, r3
 8000776:	4694      	mov	ip, r2
 8000778:	4463      	add	r3, ip
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	4642      	mov	r2, r8
 8000780:	2600      	movs	r6, #0
 8000782:	2a0a      	cmp	r2, #10
 8000784:	dc00      	bgt.n	8000788 <__aeabi_dmul+0x1d0>
 8000786:	e75a      	b.n	800063e <__aeabi_dmul+0x86>
 8000788:	e79c      	b.n	80006c4 <__aeabi_dmul+0x10c>
 800078a:	4653      	mov	r3, sl
 800078c:	4303      	orrs	r3, r0
 800078e:	4699      	mov	r9, r3
 8000790:	d054      	beq.n	800083c <__aeabi_dmul+0x284>
 8000792:	4653      	mov	r3, sl
 8000794:	2b00      	cmp	r3, #0
 8000796:	d100      	bne.n	800079a <__aeabi_dmul+0x1e2>
 8000798:	e177      	b.n	8000a8a <__aeabi_dmul+0x4d2>
 800079a:	4650      	mov	r0, sl
 800079c:	f000 fe0e 	bl	80013bc <__clzsi2>
 80007a0:	230b      	movs	r3, #11
 80007a2:	425b      	negs	r3, r3
 80007a4:	469c      	mov	ip, r3
 80007a6:	0002      	movs	r2, r0
 80007a8:	4484      	add	ip, r0
 80007aa:	0011      	movs	r1, r2
 80007ac:	4650      	mov	r0, sl
 80007ae:	3908      	subs	r1, #8
 80007b0:	4088      	lsls	r0, r1
 80007b2:	231d      	movs	r3, #29
 80007b4:	4680      	mov	r8, r0
 80007b6:	4660      	mov	r0, ip
 80007b8:	1a1b      	subs	r3, r3, r0
 80007ba:	0020      	movs	r0, r4
 80007bc:	40d8      	lsrs	r0, r3
 80007be:	0003      	movs	r3, r0
 80007c0:	4640      	mov	r0, r8
 80007c2:	4303      	orrs	r3, r0
 80007c4:	469a      	mov	sl, r3
 80007c6:	0023      	movs	r3, r4
 80007c8:	408b      	lsls	r3, r1
 80007ca:	4699      	mov	r9, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	4d44      	ldr	r5, [pc, #272]	@ (80008e0 <__aeabi_dmul+0x328>)
 80007d0:	4698      	mov	r8, r3
 80007d2:	1aad      	subs	r5, r5, r2
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	e715      	b.n	8000604 <__aeabi_dmul+0x4c>
 80007d8:	4652      	mov	r2, sl
 80007da:	4302      	orrs	r2, r0
 80007dc:	4691      	mov	r9, r2
 80007de:	d126      	bne.n	800082e <__aeabi_dmul+0x276>
 80007e0:	2200      	movs	r2, #0
 80007e2:	001d      	movs	r5, r3
 80007e4:	2302      	movs	r3, #2
 80007e6:	4692      	mov	sl, r2
 80007e8:	3208      	adds	r2, #8
 80007ea:	4690      	mov	r8, r2
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	e709      	b.n	8000604 <__aeabi_dmul+0x4c>
 80007f0:	2400      	movs	r4, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	4b35      	ldr	r3, [pc, #212]	@ (80008cc <__aeabi_dmul+0x314>)
 80007f6:	e735      	b.n	8000664 <__aeabi_dmul+0xac>
 80007f8:	2300      	movs	r3, #0
 80007fa:	2480      	movs	r4, #128	@ 0x80
 80007fc:	469b      	mov	fp, r3
 80007fe:	0324      	lsls	r4, r4, #12
 8000800:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <__aeabi_dmul+0x314>)
 8000802:	e72f      	b.n	8000664 <__aeabi_dmul+0xac>
 8000804:	2202      	movs	r2, #2
 8000806:	4641      	mov	r1, r8
 8000808:	4311      	orrs	r1, r2
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	4694      	mov	ip, r2
 8000810:	002a      	movs	r2, r5
 8000812:	4462      	add	r2, ip
 8000814:	4688      	mov	r8, r1
 8000816:	9201      	str	r2, [sp, #4]
 8000818:	290a      	cmp	r1, #10
 800081a:	dd00      	ble.n	800081e <__aeabi_dmul+0x266>
 800081c:	e752      	b.n	80006c4 <__aeabi_dmul+0x10c>
 800081e:	465a      	mov	r2, fp
 8000820:	2000      	movs	r0, #0
 8000822:	9900      	ldr	r1, [sp, #0]
 8000824:	0004      	movs	r4, r0
 8000826:	404a      	eors	r2, r1
 8000828:	4693      	mov	fp, r2
 800082a:	2602      	movs	r6, #2
 800082c:	e70b      	b.n	8000646 <__aeabi_dmul+0x8e>
 800082e:	220c      	movs	r2, #12
 8000830:	001d      	movs	r5, r3
 8000832:	2303      	movs	r3, #3
 8000834:	4681      	mov	r9, r0
 8000836:	4690      	mov	r8, r2
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	e6e3      	b.n	8000604 <__aeabi_dmul+0x4c>
 800083c:	2300      	movs	r3, #0
 800083e:	469a      	mov	sl, r3
 8000840:	3304      	adds	r3, #4
 8000842:	4698      	mov	r8, r3
 8000844:	3b03      	subs	r3, #3
 8000846:	2500      	movs	r5, #0
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	e6db      	b.n	8000604 <__aeabi_dmul+0x4c>
 800084c:	4642      	mov	r2, r8
 800084e:	3301      	adds	r3, #1
 8000850:	431a      	orrs	r2, r3
 8000852:	002b      	movs	r3, r5
 8000854:	4690      	mov	r8, r2
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	9201      	str	r2, [sp, #4]
 800085a:	4642      	mov	r2, r8
 800085c:	2400      	movs	r4, #0
 800085e:	2000      	movs	r0, #0
 8000860:	2601      	movs	r6, #1
 8000862:	2a0a      	cmp	r2, #10
 8000864:	dc00      	bgt.n	8000868 <__aeabi_dmul+0x2b0>
 8000866:	e6ea      	b.n	800063e <__aeabi_dmul+0x86>
 8000868:	e72c      	b.n	80006c4 <__aeabi_dmul+0x10c>
 800086a:	2201      	movs	r2, #1
 800086c:	1ad2      	subs	r2, r2, r3
 800086e:	2a38      	cmp	r2, #56	@ 0x38
 8000870:	dd00      	ble.n	8000874 <__aeabi_dmul+0x2bc>
 8000872:	e6f4      	b.n	800065e <__aeabi_dmul+0xa6>
 8000874:	2a1f      	cmp	r2, #31
 8000876:	dc00      	bgt.n	800087a <__aeabi_dmul+0x2c2>
 8000878:	e12a      	b.n	8000ad0 <__aeabi_dmul+0x518>
 800087a:	211f      	movs	r1, #31
 800087c:	4249      	negs	r1, r1
 800087e:	1acb      	subs	r3, r1, r3
 8000880:	0021      	movs	r1, r4
 8000882:	40d9      	lsrs	r1, r3
 8000884:	000b      	movs	r3, r1
 8000886:	2a20      	cmp	r2, #32
 8000888:	d005      	beq.n	8000896 <__aeabi_dmul+0x2de>
 800088a:	4a16      	ldr	r2, [pc, #88]	@ (80008e4 <__aeabi_dmul+0x32c>)
 800088c:	9d01      	ldr	r5, [sp, #4]
 800088e:	4694      	mov	ip, r2
 8000890:	4465      	add	r5, ip
 8000892:	40ac      	lsls	r4, r5
 8000894:	4320      	orrs	r0, r4
 8000896:	1e42      	subs	r2, r0, #1
 8000898:	4190      	sbcs	r0, r2
 800089a:	4318      	orrs	r0, r3
 800089c:	2307      	movs	r3, #7
 800089e:	0019      	movs	r1, r3
 80008a0:	2400      	movs	r4, #0
 80008a2:	4001      	ands	r1, r0
 80008a4:	4203      	tst	r3, r0
 80008a6:	d00c      	beq.n	80008c2 <__aeabi_dmul+0x30a>
 80008a8:	230f      	movs	r3, #15
 80008aa:	4003      	ands	r3, r0
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dmul+0x2fa>
 80008b0:	e140      	b.n	8000b34 <__aeabi_dmul+0x57c>
 80008b2:	1d03      	adds	r3, r0, #4
 80008b4:	4283      	cmp	r3, r0
 80008b6:	41a4      	sbcs	r4, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	4264      	negs	r4, r4
 80008bc:	0761      	lsls	r1, r4, #29
 80008be:	0264      	lsls	r4, r4, #9
 80008c0:	0b24      	lsrs	r4, r4, #12
 80008c2:	08c2      	lsrs	r2, r0, #3
 80008c4:	2300      	movs	r3, #0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	e6cc      	b.n	8000664 <__aeabi_dmul+0xac>
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	fffffc01 	.word	0xfffffc01
 80008d4:	000003ff 	.word	0x000003ff
 80008d8:	feffffff 	.word	0xfeffffff
 80008dc:	000007fe 	.word	0x000007fe
 80008e0:	fffffc0d 	.word	0xfffffc0d
 80008e4:	0000043e 	.word	0x0000043e
 80008e8:	4649      	mov	r1, r9
 80008ea:	464a      	mov	r2, r9
 80008ec:	0409      	lsls	r1, r1, #16
 80008ee:	0c09      	lsrs	r1, r1, #16
 80008f0:	000d      	movs	r5, r1
 80008f2:	0c16      	lsrs	r6, r2, #16
 80008f4:	0c02      	lsrs	r2, r0, #16
 80008f6:	0400      	lsls	r0, r0, #16
 80008f8:	0c00      	lsrs	r0, r0, #16
 80008fa:	4345      	muls	r5, r0
 80008fc:	46ac      	mov	ip, r5
 80008fe:	0005      	movs	r5, r0
 8000900:	4375      	muls	r5, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	0015      	movs	r5, r2
 8000906:	000f      	movs	r7, r1
 8000908:	4375      	muls	r5, r6
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	9502      	str	r5, [sp, #8]
 800090e:	002a      	movs	r2, r5
 8000910:	9d00      	ldr	r5, [sp, #0]
 8000912:	436f      	muls	r7, r5
 8000914:	4665      	mov	r5, ip
 8000916:	0c2d      	lsrs	r5, r5, #16
 8000918:	46a9      	mov	r9, r5
 800091a:	4447      	add	r7, r8
 800091c:	444f      	add	r7, r9
 800091e:	45b8      	cmp	r8, r7
 8000920:	d905      	bls.n	800092e <__aeabi_dmul+0x376>
 8000922:	0015      	movs	r5, r2
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	0252      	lsls	r2, r2, #9
 8000928:	4690      	mov	r8, r2
 800092a:	4445      	add	r5, r8
 800092c:	9502      	str	r5, [sp, #8]
 800092e:	0c3d      	lsrs	r5, r7, #16
 8000930:	9503      	str	r5, [sp, #12]
 8000932:	4665      	mov	r5, ip
 8000934:	042d      	lsls	r5, r5, #16
 8000936:	043f      	lsls	r7, r7, #16
 8000938:	0c2d      	lsrs	r5, r5, #16
 800093a:	46ac      	mov	ip, r5
 800093c:	003d      	movs	r5, r7
 800093e:	4465      	add	r5, ip
 8000940:	9504      	str	r5, [sp, #16]
 8000942:	0c25      	lsrs	r5, r4, #16
 8000944:	0424      	lsls	r4, r4, #16
 8000946:	0c24      	lsrs	r4, r4, #16
 8000948:	46ac      	mov	ip, r5
 800094a:	0025      	movs	r5, r4
 800094c:	4375      	muls	r5, r6
 800094e:	46a8      	mov	r8, r5
 8000950:	4665      	mov	r5, ip
 8000952:	000f      	movs	r7, r1
 8000954:	4369      	muls	r1, r5
 8000956:	4441      	add	r1, r8
 8000958:	4689      	mov	r9, r1
 800095a:	4367      	muls	r7, r4
 800095c:	0c39      	lsrs	r1, r7, #16
 800095e:	4449      	add	r1, r9
 8000960:	436e      	muls	r6, r5
 8000962:	4588      	cmp	r8, r1
 8000964:	d903      	bls.n	800096e <__aeabi_dmul+0x3b6>
 8000966:	2280      	movs	r2, #128	@ 0x80
 8000968:	0252      	lsls	r2, r2, #9
 800096a:	4690      	mov	r8, r2
 800096c:	4446      	add	r6, r8
 800096e:	0c0d      	lsrs	r5, r1, #16
 8000970:	46a8      	mov	r8, r5
 8000972:	0035      	movs	r5, r6
 8000974:	4445      	add	r5, r8
 8000976:	9505      	str	r5, [sp, #20]
 8000978:	9d03      	ldr	r5, [sp, #12]
 800097a:	043f      	lsls	r7, r7, #16
 800097c:	46a8      	mov	r8, r5
 800097e:	0c3f      	lsrs	r7, r7, #16
 8000980:	0409      	lsls	r1, r1, #16
 8000982:	19c9      	adds	r1, r1, r7
 8000984:	4488      	add	r8, r1
 8000986:	4645      	mov	r5, r8
 8000988:	9503      	str	r5, [sp, #12]
 800098a:	4655      	mov	r5, sl
 800098c:	042e      	lsls	r6, r5, #16
 800098e:	0c36      	lsrs	r6, r6, #16
 8000990:	0c2f      	lsrs	r7, r5, #16
 8000992:	0035      	movs	r5, r6
 8000994:	4345      	muls	r5, r0
 8000996:	4378      	muls	r0, r7
 8000998:	4681      	mov	r9, r0
 800099a:	0038      	movs	r0, r7
 800099c:	46a8      	mov	r8, r5
 800099e:	0c2d      	lsrs	r5, r5, #16
 80009a0:	46aa      	mov	sl, r5
 80009a2:	9a00      	ldr	r2, [sp, #0]
 80009a4:	4350      	muls	r0, r2
 80009a6:	4372      	muls	r2, r6
 80009a8:	444a      	add	r2, r9
 80009aa:	4452      	add	r2, sl
 80009ac:	4591      	cmp	r9, r2
 80009ae:	d903      	bls.n	80009b8 <__aeabi_dmul+0x400>
 80009b0:	2580      	movs	r5, #128	@ 0x80
 80009b2:	026d      	lsls	r5, r5, #9
 80009b4:	46a9      	mov	r9, r5
 80009b6:	4448      	add	r0, r9
 80009b8:	0c15      	lsrs	r5, r2, #16
 80009ba:	46a9      	mov	r9, r5
 80009bc:	4645      	mov	r5, r8
 80009be:	042d      	lsls	r5, r5, #16
 80009c0:	0c2d      	lsrs	r5, r5, #16
 80009c2:	46a8      	mov	r8, r5
 80009c4:	4665      	mov	r5, ip
 80009c6:	437d      	muls	r5, r7
 80009c8:	0412      	lsls	r2, r2, #16
 80009ca:	4448      	add	r0, r9
 80009cc:	4490      	add	r8, r2
 80009ce:	46a9      	mov	r9, r5
 80009d0:	0032      	movs	r2, r6
 80009d2:	4665      	mov	r5, ip
 80009d4:	4362      	muls	r2, r4
 80009d6:	436e      	muls	r6, r5
 80009d8:	437c      	muls	r4, r7
 80009da:	0c17      	lsrs	r7, r2, #16
 80009dc:	1936      	adds	r6, r6, r4
 80009de:	19bf      	adds	r7, r7, r6
 80009e0:	42bc      	cmp	r4, r7
 80009e2:	d903      	bls.n	80009ec <__aeabi_dmul+0x434>
 80009e4:	2480      	movs	r4, #128	@ 0x80
 80009e6:	0264      	lsls	r4, r4, #9
 80009e8:	46a4      	mov	ip, r4
 80009ea:	44e1      	add	r9, ip
 80009ec:	9c02      	ldr	r4, [sp, #8]
 80009ee:	9e03      	ldr	r6, [sp, #12]
 80009f0:	46a4      	mov	ip, r4
 80009f2:	9d05      	ldr	r5, [sp, #20]
 80009f4:	4466      	add	r6, ip
 80009f6:	428e      	cmp	r6, r1
 80009f8:	4189      	sbcs	r1, r1
 80009fa:	46ac      	mov	ip, r5
 80009fc:	0412      	lsls	r2, r2, #16
 80009fe:	043c      	lsls	r4, r7, #16
 8000a00:	0c12      	lsrs	r2, r2, #16
 8000a02:	18a2      	adds	r2, r4, r2
 8000a04:	4462      	add	r2, ip
 8000a06:	4249      	negs	r1, r1
 8000a08:	1854      	adds	r4, r2, r1
 8000a0a:	4446      	add	r6, r8
 8000a0c:	46a4      	mov	ip, r4
 8000a0e:	4546      	cmp	r6, r8
 8000a10:	41a4      	sbcs	r4, r4
 8000a12:	4682      	mov	sl, r0
 8000a14:	4264      	negs	r4, r4
 8000a16:	46a0      	mov	r8, r4
 8000a18:	42aa      	cmp	r2, r5
 8000a1a:	4192      	sbcs	r2, r2
 8000a1c:	458c      	cmp	ip, r1
 8000a1e:	4189      	sbcs	r1, r1
 8000a20:	44e2      	add	sl, ip
 8000a22:	44d0      	add	r8, sl
 8000a24:	4249      	negs	r1, r1
 8000a26:	4252      	negs	r2, r2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	45a0      	cmp	r8, r4
 8000a2c:	41a4      	sbcs	r4, r4
 8000a2e:	4582      	cmp	sl, r0
 8000a30:	4189      	sbcs	r1, r1
 8000a32:	4264      	negs	r4, r4
 8000a34:	4249      	negs	r1, r1
 8000a36:	430c      	orrs	r4, r1
 8000a38:	4641      	mov	r1, r8
 8000a3a:	0c3f      	lsrs	r7, r7, #16
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	1912      	adds	r2, r2, r4
 8000a40:	0dcc      	lsrs	r4, r1, #23
 8000a42:	9904      	ldr	r1, [sp, #16]
 8000a44:	0270      	lsls	r0, r6, #9
 8000a46:	4308      	orrs	r0, r1
 8000a48:	1e41      	subs	r1, r0, #1
 8000a4a:	4188      	sbcs	r0, r1
 8000a4c:	4641      	mov	r1, r8
 8000a4e:	444a      	add	r2, r9
 8000a50:	0df6      	lsrs	r6, r6, #23
 8000a52:	0252      	lsls	r2, r2, #9
 8000a54:	4330      	orrs	r0, r6
 8000a56:	0249      	lsls	r1, r1, #9
 8000a58:	4314      	orrs	r4, r2
 8000a5a:	4308      	orrs	r0, r1
 8000a5c:	01d2      	lsls	r2, r2, #7
 8000a5e:	d535      	bpl.n	8000acc <__aeabi_dmul+0x514>
 8000a60:	2201      	movs	r2, #1
 8000a62:	0843      	lsrs	r3, r0, #1
 8000a64:	4002      	ands	r2, r0
 8000a66:	4313      	orrs	r3, r2
 8000a68:	07e0      	lsls	r0, r4, #31
 8000a6a:	4318      	orrs	r0, r3
 8000a6c:	0864      	lsrs	r4, r4, #1
 8000a6e:	e634      	b.n	80006da <__aeabi_dmul+0x122>
 8000a70:	9b00      	ldr	r3, [sp, #0]
 8000a72:	46a2      	mov	sl, r4
 8000a74:	469b      	mov	fp, r3
 8000a76:	4681      	mov	r9, r0
 8000a78:	2480      	movs	r4, #128	@ 0x80
 8000a7a:	4653      	mov	r3, sl
 8000a7c:	0324      	lsls	r4, r4, #12
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	0324      	lsls	r4, r4, #12
 8000a82:	464a      	mov	r2, r9
 8000a84:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <__aeabi_dmul+0x588>)
 8000a86:	0b24      	lsrs	r4, r4, #12
 8000a88:	e5ec      	b.n	8000664 <__aeabi_dmul+0xac>
 8000a8a:	f000 fc97 	bl	80013bc <__clzsi2>
 8000a8e:	2315      	movs	r3, #21
 8000a90:	469c      	mov	ip, r3
 8000a92:	4484      	add	ip, r0
 8000a94:	0002      	movs	r2, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	3220      	adds	r2, #32
 8000a9a:	2b1c      	cmp	r3, #28
 8000a9c:	dc00      	bgt.n	8000aa0 <__aeabi_dmul+0x4e8>
 8000a9e:	e684      	b.n	80007aa <__aeabi_dmul+0x1f2>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4699      	mov	r9, r3
 8000aa4:	0023      	movs	r3, r4
 8000aa6:	3808      	subs	r0, #8
 8000aa8:	4083      	lsls	r3, r0
 8000aaa:	469a      	mov	sl, r3
 8000aac:	e68e      	b.n	80007cc <__aeabi_dmul+0x214>
 8000aae:	f000 fc85 	bl	80013bc <__clzsi2>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	3215      	adds	r2, #21
 8000ab8:	3320      	adds	r3, #32
 8000aba:	2a1c      	cmp	r2, #28
 8000abc:	dc00      	bgt.n	8000ac0 <__aeabi_dmul+0x508>
 8000abe:	e64e      	b.n	800075e <__aeabi_dmul+0x1a6>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	0034      	movs	r4, r6
 8000ac4:	3a08      	subs	r2, #8
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	e652      	b.n	8000772 <__aeabi_dmul+0x1ba>
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	e604      	b.n	80006da <__aeabi_dmul+0x122>
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <__aeabi_dmul+0x58c>)
 8000ad2:	0021      	movs	r1, r4
 8000ad4:	469c      	mov	ip, r3
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	9d01      	ldr	r5, [sp, #4]
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	4465      	add	r5, ip
 8000ade:	40a9      	lsls	r1, r5
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	40ab      	lsls	r3, r5
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4183      	sbcs	r3, r0
 8000aea:	4319      	orrs	r1, r3
 8000aec:	0008      	movs	r0, r1
 8000aee:	40d4      	lsrs	r4, r2
 8000af0:	074b      	lsls	r3, r1, #29
 8000af2:	d009      	beq.n	8000b08 <__aeabi_dmul+0x550>
 8000af4:	230f      	movs	r3, #15
 8000af6:	400b      	ands	r3, r1
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d005      	beq.n	8000b08 <__aeabi_dmul+0x550>
 8000afc:	1d0b      	adds	r3, r1, #4
 8000afe:	428b      	cmp	r3, r1
 8000b00:	4180      	sbcs	r0, r0
 8000b02:	4240      	negs	r0, r0
 8000b04:	1824      	adds	r4, r4, r0
 8000b06:	0018      	movs	r0, r3
 8000b08:	0223      	lsls	r3, r4, #8
 8000b0a:	d400      	bmi.n	8000b0e <__aeabi_dmul+0x556>
 8000b0c:	e6d6      	b.n	80008bc <__aeabi_dmul+0x304>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	2400      	movs	r4, #0
 8000b12:	2200      	movs	r2, #0
 8000b14:	e5a6      	b.n	8000664 <__aeabi_dmul+0xac>
 8000b16:	290f      	cmp	r1, #15
 8000b18:	d1aa      	bne.n	8000a70 <__aeabi_dmul+0x4b8>
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	4652      	mov	r2, sl
 8000b1e:	031b      	lsls	r3, r3, #12
 8000b20:	421a      	tst	r2, r3
 8000b22:	d0a9      	beq.n	8000a78 <__aeabi_dmul+0x4c0>
 8000b24:	421c      	tst	r4, r3
 8000b26:	d1a7      	bne.n	8000a78 <__aeabi_dmul+0x4c0>
 8000b28:	431c      	orrs	r4, r3
 8000b2a:	9b00      	ldr	r3, [sp, #0]
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	469b      	mov	fp, r3
 8000b30:	4b03      	ldr	r3, [pc, #12]	@ (8000b40 <__aeabi_dmul+0x588>)
 8000b32:	e597      	b.n	8000664 <__aeabi_dmul+0xac>
 8000b34:	2400      	movs	r4, #0
 8000b36:	e6c1      	b.n	80008bc <__aeabi_dmul+0x304>
 8000b38:	2400      	movs	r4, #0
 8000b3a:	4b01      	ldr	r3, [pc, #4]	@ (8000b40 <__aeabi_dmul+0x588>)
 8000b3c:	0022      	movs	r2, r4
 8000b3e:	e591      	b.n	8000664 <__aeabi_dmul+0xac>
 8000b40:	000007ff 	.word	0x000007ff
 8000b44:	0000041e 	.word	0x0000041e

08000b48 <__aeabi_dsub>:
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	464e      	mov	r6, r9
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	46de      	mov	lr, fp
 8000b50:	4657      	mov	r7, sl
 8000b52:	b5e0      	push	{r5, r6, r7, lr}
 8000b54:	b085      	sub	sp, #20
 8000b56:	9000      	str	r0, [sp, #0]
 8000b58:	9101      	str	r1, [sp, #4]
 8000b5a:	030c      	lsls	r4, r1, #12
 8000b5c:	004f      	lsls	r7, r1, #1
 8000b5e:	0fce      	lsrs	r6, r1, #31
 8000b60:	0a61      	lsrs	r1, r4, #9
 8000b62:	9c00      	ldr	r4, [sp, #0]
 8000b64:	46b0      	mov	r8, r6
 8000b66:	0f64      	lsrs	r4, r4, #29
 8000b68:	430c      	orrs	r4, r1
 8000b6a:	9900      	ldr	r1, [sp, #0]
 8000b6c:	0d7f      	lsrs	r7, r7, #21
 8000b6e:	00c8      	lsls	r0, r1, #3
 8000b70:	0011      	movs	r1, r2
 8000b72:	001a      	movs	r2, r3
 8000b74:	031b      	lsls	r3, r3, #12
 8000b76:	469c      	mov	ip, r3
 8000b78:	9100      	str	r1, [sp, #0]
 8000b7a:	9201      	str	r2, [sp, #4]
 8000b7c:	0051      	lsls	r1, r2, #1
 8000b7e:	0d4b      	lsrs	r3, r1, #21
 8000b80:	4699      	mov	r9, r3
 8000b82:	9b01      	ldr	r3, [sp, #4]
 8000b84:	9d00      	ldr	r5, [sp, #0]
 8000b86:	0fd9      	lsrs	r1, r3, #31
 8000b88:	4663      	mov	r3, ip
 8000b8a:	0f6a      	lsrs	r2, r5, #29
 8000b8c:	0a5b      	lsrs	r3, r3, #9
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	00ea      	lsls	r2, r5, #3
 8000b92:	4694      	mov	ip, r2
 8000b94:	4693      	mov	fp, r2
 8000b96:	4ac1      	ldr	r2, [pc, #772]	@ (8000e9c <__aeabi_dsub+0x354>)
 8000b98:	9003      	str	r0, [sp, #12]
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	4591      	cmp	r9, r2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dsub+0x5a>
 8000ba0:	e0cd      	b.n	8000d3e <__aeabi_dsub+0x1f6>
 8000ba2:	2501      	movs	r5, #1
 8000ba4:	4069      	eors	r1, r5
 8000ba6:	464d      	mov	r5, r9
 8000ba8:	1b7d      	subs	r5, r7, r5
 8000baa:	46aa      	mov	sl, r5
 8000bac:	428e      	cmp	r6, r1
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dsub+0x6a>
 8000bb0:	e080      	b.n	8000cb4 <__aeabi_dsub+0x16c>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	dc00      	bgt.n	8000bb8 <__aeabi_dsub+0x70>
 8000bb6:	e335      	b.n	8001224 <__aeabi_dsub+0x6dc>
 8000bb8:	4649      	mov	r1, r9
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x78>
 8000bbe:	e0df      	b.n	8000d80 <__aeabi_dsub+0x238>
 8000bc0:	4297      	cmp	r7, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dsub+0x7e>
 8000bc4:	e194      	b.n	8000ef0 <__aeabi_dsub+0x3a8>
 8000bc6:	4652      	mov	r2, sl
 8000bc8:	2501      	movs	r5, #1
 8000bca:	2a38      	cmp	r2, #56	@ 0x38
 8000bcc:	dc19      	bgt.n	8000c02 <__aeabi_dsub+0xba>
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	9b02      	ldr	r3, [sp, #8]
 8000bd2:	0412      	lsls	r2, r2, #16
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	4652      	mov	r2, sl
 8000bda:	2a1f      	cmp	r2, #31
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_dsub+0x98>
 8000bde:	e1e3      	b.n	8000fa8 <__aeabi_dsub+0x460>
 8000be0:	4653      	mov	r3, sl
 8000be2:	2220      	movs	r2, #32
 8000be4:	4661      	mov	r1, ip
 8000be6:	9d02      	ldr	r5, [sp, #8]
 8000be8:	1ad2      	subs	r2, r2, r3
 8000bea:	4095      	lsls	r5, r2
 8000bec:	40d9      	lsrs	r1, r3
 8000bee:	430d      	orrs	r5, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	1e51      	subs	r1, r2, #1
 8000bf8:	418a      	sbcs	r2, r1
 8000bfa:	4315      	orrs	r5, r2
 8000bfc:	9a02      	ldr	r2, [sp, #8]
 8000bfe:	40da      	lsrs	r2, r3
 8000c00:	1aa4      	subs	r4, r4, r2
 8000c02:	1b45      	subs	r5, r0, r5
 8000c04:	42a8      	cmp	r0, r5
 8000c06:	4180      	sbcs	r0, r0
 8000c08:	4240      	negs	r0, r0
 8000c0a:	1a24      	subs	r4, r4, r0
 8000c0c:	0223      	lsls	r3, r4, #8
 8000c0e:	d400      	bmi.n	8000c12 <__aeabi_dsub+0xca>
 8000c10:	e13d      	b.n	8000e8e <__aeabi_dsub+0x346>
 8000c12:	0264      	lsls	r4, r4, #9
 8000c14:	0a64      	lsrs	r4, r4, #9
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dsub+0xd4>
 8000c1a:	e147      	b.n	8000eac <__aeabi_dsub+0x364>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f000 fbcd 	bl	80013bc <__clzsi2>
 8000c22:	0003      	movs	r3, r0
 8000c24:	3b08      	subs	r3, #8
 8000c26:	2120      	movs	r1, #32
 8000c28:	0028      	movs	r0, r5
 8000c2a:	1aca      	subs	r2, r1, r3
 8000c2c:	40d0      	lsrs	r0, r2
 8000c2e:	409c      	lsls	r4, r3
 8000c30:	0002      	movs	r2, r0
 8000c32:	409d      	lsls	r5, r3
 8000c34:	4322      	orrs	r2, r4
 8000c36:	429f      	cmp	r7, r3
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dsub+0xf4>
 8000c3a:	e177      	b.n	8000f2c <__aeabi_dsub+0x3e4>
 8000c3c:	1bd8      	subs	r0, r3, r7
 8000c3e:	3001      	adds	r0, #1
 8000c40:	1a09      	subs	r1, r1, r0
 8000c42:	002c      	movs	r4, r5
 8000c44:	408d      	lsls	r5, r1
 8000c46:	40c4      	lsrs	r4, r0
 8000c48:	1e6b      	subs	r3, r5, #1
 8000c4a:	419d      	sbcs	r5, r3
 8000c4c:	0013      	movs	r3, r2
 8000c4e:	40c2      	lsrs	r2, r0
 8000c50:	408b      	lsls	r3, r1
 8000c52:	4325      	orrs	r5, r4
 8000c54:	2700      	movs	r7, #0
 8000c56:	0014      	movs	r4, r2
 8000c58:	431d      	orrs	r5, r3
 8000c5a:	076b      	lsls	r3, r5, #29
 8000c5c:	d009      	beq.n	8000c72 <__aeabi_dsub+0x12a>
 8000c5e:	230f      	movs	r3, #15
 8000c60:	402b      	ands	r3, r5
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d005      	beq.n	8000c72 <__aeabi_dsub+0x12a>
 8000c66:	1d2b      	adds	r3, r5, #4
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	41ad      	sbcs	r5, r5
 8000c6c:	426d      	negs	r5, r5
 8000c6e:	1964      	adds	r4, r4, r5
 8000c70:	001d      	movs	r5, r3
 8000c72:	0223      	lsls	r3, r4, #8
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_dsub+0x130>
 8000c76:	e140      	b.n	8000efa <__aeabi_dsub+0x3b2>
 8000c78:	4a88      	ldr	r2, [pc, #544]	@ (8000e9c <__aeabi_dsub+0x354>)
 8000c7a:	3701      	adds	r7, #1
 8000c7c:	4297      	cmp	r7, r2
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dsub+0x13a>
 8000c80:	e101      	b.n	8000e86 <__aeabi_dsub+0x33e>
 8000c82:	2601      	movs	r6, #1
 8000c84:	4643      	mov	r3, r8
 8000c86:	4986      	ldr	r1, [pc, #536]	@ (8000ea0 <__aeabi_dsub+0x358>)
 8000c88:	08ed      	lsrs	r5, r5, #3
 8000c8a:	4021      	ands	r1, r4
 8000c8c:	074a      	lsls	r2, r1, #29
 8000c8e:	432a      	orrs	r2, r5
 8000c90:	057c      	lsls	r4, r7, #21
 8000c92:	024d      	lsls	r5, r1, #9
 8000c94:	0b2d      	lsrs	r5, r5, #12
 8000c96:	0d64      	lsrs	r4, r4, #21
 8000c98:	401e      	ands	r6, r3
 8000c9a:	0524      	lsls	r4, r4, #20
 8000c9c:	432c      	orrs	r4, r5
 8000c9e:	07f6      	lsls	r6, r6, #31
 8000ca0:	4334      	orrs	r4, r6
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	0021      	movs	r1, r4
 8000ca6:	b005      	add	sp, #20
 8000ca8:	bcf0      	pop	{r4, r5, r6, r7}
 8000caa:	46bb      	mov	fp, r7
 8000cac:	46b2      	mov	sl, r6
 8000cae:	46a9      	mov	r9, r5
 8000cb0:	46a0      	mov	r8, r4
 8000cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	dc00      	bgt.n	8000cba <__aeabi_dsub+0x172>
 8000cb8:	e2d0      	b.n	800125c <__aeabi_dsub+0x714>
 8000cba:	4649      	mov	r1, r9
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_dsub+0x17a>
 8000cc0:	e0d4      	b.n	8000e6c <__aeabi_dsub+0x324>
 8000cc2:	4661      	mov	r1, ip
 8000cc4:	9b02      	ldr	r3, [sp, #8]
 8000cc6:	4319      	orrs	r1, r3
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dsub+0x184>
 8000cca:	e12b      	b.n	8000f24 <__aeabi_dsub+0x3dc>
 8000ccc:	1e69      	subs	r1, r5, #1
 8000cce:	2d01      	cmp	r5, #1
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dsub+0x18c>
 8000cd2:	e1d9      	b.n	8001088 <__aeabi_dsub+0x540>
 8000cd4:	4295      	cmp	r5, r2
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dsub+0x192>
 8000cd8:	e10a      	b.n	8000ef0 <__aeabi_dsub+0x3a8>
 8000cda:	2501      	movs	r5, #1
 8000cdc:	2938      	cmp	r1, #56	@ 0x38
 8000cde:	dc17      	bgt.n	8000d10 <__aeabi_dsub+0x1c8>
 8000ce0:	468a      	mov	sl, r1
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_dsub+0x1a2>
 8000ce8:	e1e7      	b.n	80010ba <__aeabi_dsub+0x572>
 8000cea:	2220      	movs	r2, #32
 8000cec:	1ad2      	subs	r2, r2, r3
 8000cee:	9b02      	ldr	r3, [sp, #8]
 8000cf0:	4661      	mov	r1, ip
 8000cf2:	4093      	lsls	r3, r2
 8000cf4:	001d      	movs	r5, r3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	40d9      	lsrs	r1, r3
 8000cfa:	4663      	mov	r3, ip
 8000cfc:	4093      	lsls	r3, r2
 8000cfe:	001a      	movs	r2, r3
 8000d00:	430d      	orrs	r5, r1
 8000d02:	1e51      	subs	r1, r2, #1
 8000d04:	418a      	sbcs	r2, r1
 8000d06:	4653      	mov	r3, sl
 8000d08:	4315      	orrs	r5, r2
 8000d0a:	9a02      	ldr	r2, [sp, #8]
 8000d0c:	40da      	lsrs	r2, r3
 8000d0e:	18a4      	adds	r4, r4, r2
 8000d10:	182d      	adds	r5, r5, r0
 8000d12:	4285      	cmp	r5, r0
 8000d14:	4180      	sbcs	r0, r0
 8000d16:	4240      	negs	r0, r0
 8000d18:	1824      	adds	r4, r4, r0
 8000d1a:	0223      	lsls	r3, r4, #8
 8000d1c:	d400      	bmi.n	8000d20 <__aeabi_dsub+0x1d8>
 8000d1e:	e0b6      	b.n	8000e8e <__aeabi_dsub+0x346>
 8000d20:	4b5e      	ldr	r3, [pc, #376]	@ (8000e9c <__aeabi_dsub+0x354>)
 8000d22:	3701      	adds	r7, #1
 8000d24:	429f      	cmp	r7, r3
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dsub+0x1e2>
 8000d28:	e0ad      	b.n	8000e86 <__aeabi_dsub+0x33e>
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ea0 <__aeabi_dsub+0x358>)
 8000d2e:	086a      	lsrs	r2, r5, #1
 8000d30:	401c      	ands	r4, r3
 8000d32:	4029      	ands	r1, r5
 8000d34:	430a      	orrs	r2, r1
 8000d36:	07e5      	lsls	r5, r4, #31
 8000d38:	4315      	orrs	r5, r2
 8000d3a:	0864      	lsrs	r4, r4, #1
 8000d3c:	e78d      	b.n	8000c5a <__aeabi_dsub+0x112>
 8000d3e:	4a59      	ldr	r2, [pc, #356]	@ (8000ea4 <__aeabi_dsub+0x35c>)
 8000d40:	9b02      	ldr	r3, [sp, #8]
 8000d42:	4692      	mov	sl, r2
 8000d44:	4662      	mov	r2, ip
 8000d46:	44ba      	add	sl, r7
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	d02c      	beq.n	8000da6 <__aeabi_dsub+0x25e>
 8000d4c:	428e      	cmp	r6, r1
 8000d4e:	d02e      	beq.n	8000dae <__aeabi_dsub+0x266>
 8000d50:	4652      	mov	r2, sl
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d060      	beq.n	8000e18 <__aeabi_dsub+0x2d0>
 8000d56:	2f00      	cmp	r7, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dsub+0x214>
 8000d5a:	e0db      	b.n	8000f14 <__aeabi_dsub+0x3cc>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	000e      	movs	r6, r1
 8000d60:	9c02      	ldr	r4, [sp, #8]
 8000d62:	08d8      	lsrs	r0, r3, #3
 8000d64:	0762      	lsls	r2, r4, #29
 8000d66:	4302      	orrs	r2, r0
 8000d68:	08e4      	lsrs	r4, r4, #3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dsub+0x22a>
 8000d70:	e254      	b.n	800121c <__aeabi_dsub+0x6d4>
 8000d72:	2580      	movs	r5, #128	@ 0x80
 8000d74:	032d      	lsls	r5, r5, #12
 8000d76:	4325      	orrs	r5, r4
 8000d78:	032d      	lsls	r5, r5, #12
 8000d7a:	4c48      	ldr	r4, [pc, #288]	@ (8000e9c <__aeabi_dsub+0x354>)
 8000d7c:	0b2d      	lsrs	r5, r5, #12
 8000d7e:	e78c      	b.n	8000c9a <__aeabi_dsub+0x152>
 8000d80:	4661      	mov	r1, ip
 8000d82:	9b02      	ldr	r3, [sp, #8]
 8000d84:	4319      	orrs	r1, r3
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dsub+0x242>
 8000d88:	e0cc      	b.n	8000f24 <__aeabi_dsub+0x3dc>
 8000d8a:	0029      	movs	r1, r5
 8000d8c:	3901      	subs	r1, #1
 8000d8e:	2d01      	cmp	r5, #1
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dsub+0x24c>
 8000d92:	e188      	b.n	80010a6 <__aeabi_dsub+0x55e>
 8000d94:	4295      	cmp	r5, r2
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dsub+0x252>
 8000d98:	e0aa      	b.n	8000ef0 <__aeabi_dsub+0x3a8>
 8000d9a:	2501      	movs	r5, #1
 8000d9c:	2938      	cmp	r1, #56	@ 0x38
 8000d9e:	dd00      	ble.n	8000da2 <__aeabi_dsub+0x25a>
 8000da0:	e72f      	b.n	8000c02 <__aeabi_dsub+0xba>
 8000da2:	468a      	mov	sl, r1
 8000da4:	e718      	b.n	8000bd8 <__aeabi_dsub+0x90>
 8000da6:	2201      	movs	r2, #1
 8000da8:	4051      	eors	r1, r2
 8000daa:	428e      	cmp	r6, r1
 8000dac:	d1d0      	bne.n	8000d50 <__aeabi_dsub+0x208>
 8000dae:	4653      	mov	r3, sl
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dsub+0x26e>
 8000db4:	e0be      	b.n	8000f34 <__aeabi_dsub+0x3ec>
 8000db6:	2f00      	cmp	r7, #0
 8000db8:	d000      	beq.n	8000dbc <__aeabi_dsub+0x274>
 8000dba:	e138      	b.n	800102e <__aeabi_dsub+0x4e6>
 8000dbc:	46ca      	mov	sl, r9
 8000dbe:	0022      	movs	r2, r4
 8000dc0:	4302      	orrs	r2, r0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_dsub+0x27e>
 8000dc4:	e1e2      	b.n	800118c <__aeabi_dsub+0x644>
 8000dc6:	4653      	mov	r3, sl
 8000dc8:	1e59      	subs	r1, r3, #1
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dsub+0x288>
 8000dce:	e20d      	b.n	80011ec <__aeabi_dsub+0x6a4>
 8000dd0:	4a32      	ldr	r2, [pc, #200]	@ (8000e9c <__aeabi_dsub+0x354>)
 8000dd2:	4592      	cmp	sl, r2
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dsub+0x290>
 8000dd6:	e1d2      	b.n	800117e <__aeabi_dsub+0x636>
 8000dd8:	2701      	movs	r7, #1
 8000dda:	2938      	cmp	r1, #56	@ 0x38
 8000ddc:	dc13      	bgt.n	8000e06 <__aeabi_dsub+0x2be>
 8000dde:	291f      	cmp	r1, #31
 8000de0:	dd00      	ble.n	8000de4 <__aeabi_dsub+0x29c>
 8000de2:	e1ee      	b.n	80011c2 <__aeabi_dsub+0x67a>
 8000de4:	2220      	movs	r2, #32
 8000de6:	9b02      	ldr	r3, [sp, #8]
 8000de8:	1a52      	subs	r2, r2, r1
 8000dea:	0025      	movs	r5, r4
 8000dec:	0007      	movs	r7, r0
 8000dee:	469a      	mov	sl, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	4090      	lsls	r0, r2
 8000df4:	4095      	lsls	r5, r2
 8000df6:	40cf      	lsrs	r7, r1
 8000df8:	44a2      	add	sl, r4
 8000dfa:	1e42      	subs	r2, r0, #1
 8000dfc:	4190      	sbcs	r0, r2
 8000dfe:	4653      	mov	r3, sl
 8000e00:	432f      	orrs	r7, r5
 8000e02:	4307      	orrs	r7, r0
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	003d      	movs	r5, r7
 8000e08:	4465      	add	r5, ip
 8000e0a:	4565      	cmp	r5, ip
 8000e0c:	4192      	sbcs	r2, r2
 8000e0e:	9b02      	ldr	r3, [sp, #8]
 8000e10:	4252      	negs	r2, r2
 8000e12:	464f      	mov	r7, r9
 8000e14:	18d4      	adds	r4, r2, r3
 8000e16:	e780      	b.n	8000d1a <__aeabi_dsub+0x1d2>
 8000e18:	4a23      	ldr	r2, [pc, #140]	@ (8000ea8 <__aeabi_dsub+0x360>)
 8000e1a:	1c7d      	adds	r5, r7, #1
 8000e1c:	4215      	tst	r5, r2
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_dsub+0x2da>
 8000e20:	e0aa      	b.n	8000f78 <__aeabi_dsub+0x430>
 8000e22:	4662      	mov	r2, ip
 8000e24:	0025      	movs	r5, r4
 8000e26:	9b02      	ldr	r3, [sp, #8]
 8000e28:	4305      	orrs	r5, r0
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	2f00      	cmp	r7, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dsub+0x2ea>
 8000e30:	e0f5      	b.n	800101e <__aeabi_dsub+0x4d6>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dsub+0x2f0>
 8000e36:	e16b      	b.n	8001110 <__aeabi_dsub+0x5c8>
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dsub+0x2f6>
 8000e3c:	e152      	b.n	80010e4 <__aeabi_dsub+0x59c>
 8000e3e:	4663      	mov	r3, ip
 8000e40:	1ac5      	subs	r5, r0, r3
 8000e42:	9b02      	ldr	r3, [sp, #8]
 8000e44:	1ae2      	subs	r2, r4, r3
 8000e46:	42a8      	cmp	r0, r5
 8000e48:	419b      	sbcs	r3, r3
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	021a      	lsls	r2, r3, #8
 8000e50:	d400      	bmi.n	8000e54 <__aeabi_dsub+0x30c>
 8000e52:	e1d5      	b.n	8001200 <__aeabi_dsub+0x6b8>
 8000e54:	4663      	mov	r3, ip
 8000e56:	1a1d      	subs	r5, r3, r0
 8000e58:	45ac      	cmp	ip, r5
 8000e5a:	4192      	sbcs	r2, r2
 8000e5c:	2601      	movs	r6, #1
 8000e5e:	9b02      	ldr	r3, [sp, #8]
 8000e60:	4252      	negs	r2, r2
 8000e62:	1b1c      	subs	r4, r3, r4
 8000e64:	4688      	mov	r8, r1
 8000e66:	1aa4      	subs	r4, r4, r2
 8000e68:	400e      	ands	r6, r1
 8000e6a:	e6f6      	b.n	8000c5a <__aeabi_dsub+0x112>
 8000e6c:	4297      	cmp	r7, r2
 8000e6e:	d03f      	beq.n	8000ef0 <__aeabi_dsub+0x3a8>
 8000e70:	4652      	mov	r2, sl
 8000e72:	2501      	movs	r5, #1
 8000e74:	2a38      	cmp	r2, #56	@ 0x38
 8000e76:	dd00      	ble.n	8000e7a <__aeabi_dsub+0x332>
 8000e78:	e74a      	b.n	8000d10 <__aeabi_dsub+0x1c8>
 8000e7a:	2280      	movs	r2, #128	@ 0x80
 8000e7c:	9b02      	ldr	r3, [sp, #8]
 8000e7e:	0412      	lsls	r2, r2, #16
 8000e80:	4313      	orrs	r3, r2
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	e72d      	b.n	8000ce2 <__aeabi_dsub+0x19a>
 8000e86:	003c      	movs	r4, r7
 8000e88:	2500      	movs	r5, #0
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	e705      	b.n	8000c9a <__aeabi_dsub+0x152>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	402b      	ands	r3, r5
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d000      	beq.n	8000e98 <__aeabi_dsub+0x350>
 8000e96:	e6e2      	b.n	8000c5e <__aeabi_dsub+0x116>
 8000e98:	e06b      	b.n	8000f72 <__aeabi_dsub+0x42a>
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	000007ff 	.word	0x000007ff
 8000ea0:	ff7fffff 	.word	0xff7fffff
 8000ea4:	fffff801 	.word	0xfffff801
 8000ea8:	000007fe 	.word	0x000007fe
 8000eac:	0028      	movs	r0, r5
 8000eae:	f000 fa85 	bl	80013bc <__clzsi2>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	2b1f      	cmp	r3, #31
 8000eb8:	dc00      	bgt.n	8000ebc <__aeabi_dsub+0x374>
 8000eba:	e6b4      	b.n	8000c26 <__aeabi_dsub+0xde>
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	3808      	subs	r0, #8
 8000ec0:	4082      	lsls	r2, r0
 8000ec2:	429f      	cmp	r7, r3
 8000ec4:	dd00      	ble.n	8000ec8 <__aeabi_dsub+0x380>
 8000ec6:	e0b9      	b.n	800103c <__aeabi_dsub+0x4f4>
 8000ec8:	1bdb      	subs	r3, r3, r7
 8000eca:	1c58      	adds	r0, r3, #1
 8000ecc:	281f      	cmp	r0, #31
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_dsub+0x38a>
 8000ed0:	e1a0      	b.n	8001214 <__aeabi_dsub+0x6cc>
 8000ed2:	0015      	movs	r5, r2
 8000ed4:	3b1f      	subs	r3, #31
 8000ed6:	40dd      	lsrs	r5, r3
 8000ed8:	2820      	cmp	r0, #32
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dsub+0x3a0>
 8000edc:	2340      	movs	r3, #64	@ 0x40
 8000ede:	1a1b      	subs	r3, r3, r0
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	1e53      	subs	r3, r2, #1
 8000ee4:	419a      	sbcs	r2, r3
 8000ee6:	4315      	orrs	r5, r2
 8000ee8:	2307      	movs	r3, #7
 8000eea:	2700      	movs	r7, #0
 8000eec:	402b      	ands	r3, r5
 8000eee:	e7d0      	b.n	8000e92 <__aeabi_dsub+0x34a>
 8000ef0:	08c0      	lsrs	r0, r0, #3
 8000ef2:	0762      	lsls	r2, r4, #29
 8000ef4:	4302      	orrs	r2, r0
 8000ef6:	08e4      	lsrs	r4, r4, #3
 8000ef8:	e737      	b.n	8000d6a <__aeabi_dsub+0x222>
 8000efa:	08ea      	lsrs	r2, r5, #3
 8000efc:	0763      	lsls	r3, r4, #29
 8000efe:	431a      	orrs	r2, r3
 8000f00:	4bd3      	ldr	r3, [pc, #844]	@ (8001250 <__aeabi_dsub+0x708>)
 8000f02:	08e4      	lsrs	r4, r4, #3
 8000f04:	429f      	cmp	r7, r3
 8000f06:	d100      	bne.n	8000f0a <__aeabi_dsub+0x3c2>
 8000f08:	e72f      	b.n	8000d6a <__aeabi_dsub+0x222>
 8000f0a:	0324      	lsls	r4, r4, #12
 8000f0c:	0b25      	lsrs	r5, r4, #12
 8000f0e:	057c      	lsls	r4, r7, #21
 8000f10:	0d64      	lsrs	r4, r4, #21
 8000f12:	e6c2      	b.n	8000c9a <__aeabi_dsub+0x152>
 8000f14:	46ca      	mov	sl, r9
 8000f16:	0022      	movs	r2, r4
 8000f18:	4302      	orrs	r2, r0
 8000f1a:	d158      	bne.n	8000fce <__aeabi_dsub+0x486>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	000e      	movs	r6, r1
 8000f20:	9c02      	ldr	r4, [sp, #8]
 8000f22:	9303      	str	r3, [sp, #12]
 8000f24:	9b03      	ldr	r3, [sp, #12]
 8000f26:	4657      	mov	r7, sl
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	e7e7      	b.n	8000efc <__aeabi_dsub+0x3b4>
 8000f2c:	4cc9      	ldr	r4, [pc, #804]	@ (8001254 <__aeabi_dsub+0x70c>)
 8000f2e:	1aff      	subs	r7, r7, r3
 8000f30:	4014      	ands	r4, r2
 8000f32:	e692      	b.n	8000c5a <__aeabi_dsub+0x112>
 8000f34:	4dc8      	ldr	r5, [pc, #800]	@ (8001258 <__aeabi_dsub+0x710>)
 8000f36:	1c7a      	adds	r2, r7, #1
 8000f38:	422a      	tst	r2, r5
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_dsub+0x3f6>
 8000f3c:	e084      	b.n	8001048 <__aeabi_dsub+0x500>
 8000f3e:	0022      	movs	r2, r4
 8000f40:	4302      	orrs	r2, r0
 8000f42:	2f00      	cmp	r7, #0
 8000f44:	d000      	beq.n	8000f48 <__aeabi_dsub+0x400>
 8000f46:	e0ef      	b.n	8001128 <__aeabi_dsub+0x5e0>
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dsub+0x406>
 8000f4c:	e0e5      	b.n	800111a <__aeabi_dsub+0x5d2>
 8000f4e:	4662      	mov	r2, ip
 8000f50:	9902      	ldr	r1, [sp, #8]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dsub+0x410>
 8000f56:	e0c5      	b.n	80010e4 <__aeabi_dsub+0x59c>
 8000f58:	4663      	mov	r3, ip
 8000f5a:	18c5      	adds	r5, r0, r3
 8000f5c:	468c      	mov	ip, r1
 8000f5e:	4285      	cmp	r5, r0
 8000f60:	4180      	sbcs	r0, r0
 8000f62:	4464      	add	r4, ip
 8000f64:	4240      	negs	r0, r0
 8000f66:	1824      	adds	r4, r4, r0
 8000f68:	0223      	lsls	r3, r4, #8
 8000f6a:	d502      	bpl.n	8000f72 <__aeabi_dsub+0x42a>
 8000f6c:	4bb9      	ldr	r3, [pc, #740]	@ (8001254 <__aeabi_dsub+0x70c>)
 8000f6e:	3701      	adds	r7, #1
 8000f70:	401c      	ands	r4, r3
 8000f72:	46ba      	mov	sl, r7
 8000f74:	9503      	str	r5, [sp, #12]
 8000f76:	e7d5      	b.n	8000f24 <__aeabi_dsub+0x3dc>
 8000f78:	4662      	mov	r2, ip
 8000f7a:	1a85      	subs	r5, r0, r2
 8000f7c:	42a8      	cmp	r0, r5
 8000f7e:	4192      	sbcs	r2, r2
 8000f80:	4252      	negs	r2, r2
 8000f82:	4691      	mov	r9, r2
 8000f84:	9b02      	ldr	r3, [sp, #8]
 8000f86:	1ae3      	subs	r3, r4, r3
 8000f88:	001a      	movs	r2, r3
 8000f8a:	464b      	mov	r3, r9
 8000f8c:	1ad2      	subs	r2, r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	4691      	mov	r9, r2
 8000f92:	021a      	lsls	r2, r3, #8
 8000f94:	d46c      	bmi.n	8001070 <__aeabi_dsub+0x528>
 8000f96:	464a      	mov	r2, r9
 8000f98:	464c      	mov	r4, r9
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_dsub+0x458>
 8000f9e:	e63a      	b.n	8000c16 <__aeabi_dsub+0xce>
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	e678      	b.n	8000c9a <__aeabi_dsub+0x152>
 8000fa8:	9902      	ldr	r1, [sp, #8]
 8000faa:	4653      	mov	r3, sl
 8000fac:	000d      	movs	r5, r1
 8000fae:	3a20      	subs	r2, #32
 8000fb0:	40d5      	lsrs	r5, r2
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	d006      	beq.n	8000fc4 <__aeabi_dsub+0x47c>
 8000fb6:	2240      	movs	r2, #64	@ 0x40
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	000b      	movs	r3, r1
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	4693      	mov	fp, r2
 8000fc4:	465b      	mov	r3, fp
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	4193      	sbcs	r3, r2
 8000fca:	431d      	orrs	r5, r3
 8000fcc:	e619      	b.n	8000c02 <__aeabi_dsub+0xba>
 8000fce:	4653      	mov	r3, sl
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dsub+0x490>
 8000fd6:	e0c6      	b.n	8001166 <__aeabi_dsub+0x61e>
 8000fd8:	4e9d      	ldr	r6, [pc, #628]	@ (8001250 <__aeabi_dsub+0x708>)
 8000fda:	45b2      	cmp	sl, r6
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dsub+0x498>
 8000fde:	e6bd      	b.n	8000d5c <__aeabi_dsub+0x214>
 8000fe0:	4688      	mov	r8, r1
 8000fe2:	000e      	movs	r6, r1
 8000fe4:	2501      	movs	r5, #1
 8000fe6:	2a38      	cmp	r2, #56	@ 0x38
 8000fe8:	dc10      	bgt.n	800100c <__aeabi_dsub+0x4c4>
 8000fea:	2a1f      	cmp	r2, #31
 8000fec:	dc7f      	bgt.n	80010ee <__aeabi_dsub+0x5a6>
 8000fee:	2120      	movs	r1, #32
 8000ff0:	0025      	movs	r5, r4
 8000ff2:	1a89      	subs	r1, r1, r2
 8000ff4:	0007      	movs	r7, r0
 8000ff6:	4088      	lsls	r0, r1
 8000ff8:	408d      	lsls	r5, r1
 8000ffa:	40d7      	lsrs	r7, r2
 8000ffc:	40d4      	lsrs	r4, r2
 8000ffe:	1e41      	subs	r1, r0, #1
 8001000:	4188      	sbcs	r0, r1
 8001002:	9b02      	ldr	r3, [sp, #8]
 8001004:	433d      	orrs	r5, r7
 8001006:	1b1b      	subs	r3, r3, r4
 8001008:	4305      	orrs	r5, r0
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	4662      	mov	r2, ip
 800100e:	1b55      	subs	r5, r2, r5
 8001010:	45ac      	cmp	ip, r5
 8001012:	4192      	sbcs	r2, r2
 8001014:	9b02      	ldr	r3, [sp, #8]
 8001016:	4252      	negs	r2, r2
 8001018:	464f      	mov	r7, r9
 800101a:	1a9c      	subs	r4, r3, r2
 800101c:	e5f6      	b.n	8000c0c <__aeabi_dsub+0xc4>
 800101e:	2d00      	cmp	r5, #0
 8001020:	d000      	beq.n	8001024 <__aeabi_dsub+0x4dc>
 8001022:	e0b7      	b.n	8001194 <__aeabi_dsub+0x64c>
 8001024:	2a00      	cmp	r2, #0
 8001026:	d100      	bne.n	800102a <__aeabi_dsub+0x4e2>
 8001028:	e0f0      	b.n	800120c <__aeabi_dsub+0x6c4>
 800102a:	2601      	movs	r6, #1
 800102c:	400e      	ands	r6, r1
 800102e:	4663      	mov	r3, ip
 8001030:	9802      	ldr	r0, [sp, #8]
 8001032:	08d9      	lsrs	r1, r3, #3
 8001034:	0742      	lsls	r2, r0, #29
 8001036:	430a      	orrs	r2, r1
 8001038:	08c4      	lsrs	r4, r0, #3
 800103a:	e696      	b.n	8000d6a <__aeabi_dsub+0x222>
 800103c:	4c85      	ldr	r4, [pc, #532]	@ (8001254 <__aeabi_dsub+0x70c>)
 800103e:	1aff      	subs	r7, r7, r3
 8001040:	4014      	ands	r4, r2
 8001042:	0762      	lsls	r2, r4, #29
 8001044:	08e4      	lsrs	r4, r4, #3
 8001046:	e760      	b.n	8000f0a <__aeabi_dsub+0x3c2>
 8001048:	4981      	ldr	r1, [pc, #516]	@ (8001250 <__aeabi_dsub+0x708>)
 800104a:	428a      	cmp	r2, r1
 800104c:	d100      	bne.n	8001050 <__aeabi_dsub+0x508>
 800104e:	e0c9      	b.n	80011e4 <__aeabi_dsub+0x69c>
 8001050:	4663      	mov	r3, ip
 8001052:	18c1      	adds	r1, r0, r3
 8001054:	4281      	cmp	r1, r0
 8001056:	4180      	sbcs	r0, r0
 8001058:	9b02      	ldr	r3, [sp, #8]
 800105a:	4240      	negs	r0, r0
 800105c:	18e3      	adds	r3, r4, r3
 800105e:	181b      	adds	r3, r3, r0
 8001060:	07dd      	lsls	r5, r3, #31
 8001062:	085c      	lsrs	r4, r3, #1
 8001064:	2307      	movs	r3, #7
 8001066:	0849      	lsrs	r1, r1, #1
 8001068:	430d      	orrs	r5, r1
 800106a:	0017      	movs	r7, r2
 800106c:	402b      	ands	r3, r5
 800106e:	e710      	b.n	8000e92 <__aeabi_dsub+0x34a>
 8001070:	4663      	mov	r3, ip
 8001072:	1a1d      	subs	r5, r3, r0
 8001074:	45ac      	cmp	ip, r5
 8001076:	4192      	sbcs	r2, r2
 8001078:	2601      	movs	r6, #1
 800107a:	9b02      	ldr	r3, [sp, #8]
 800107c:	4252      	negs	r2, r2
 800107e:	1b1c      	subs	r4, r3, r4
 8001080:	4688      	mov	r8, r1
 8001082:	1aa4      	subs	r4, r4, r2
 8001084:	400e      	ands	r6, r1
 8001086:	e5c6      	b.n	8000c16 <__aeabi_dsub+0xce>
 8001088:	4663      	mov	r3, ip
 800108a:	18c5      	adds	r5, r0, r3
 800108c:	9b02      	ldr	r3, [sp, #8]
 800108e:	4285      	cmp	r5, r0
 8001090:	4180      	sbcs	r0, r0
 8001092:	469c      	mov	ip, r3
 8001094:	4240      	negs	r0, r0
 8001096:	4464      	add	r4, ip
 8001098:	1824      	adds	r4, r4, r0
 800109a:	2701      	movs	r7, #1
 800109c:	0223      	lsls	r3, r4, #8
 800109e:	d400      	bmi.n	80010a2 <__aeabi_dsub+0x55a>
 80010a0:	e6f5      	b.n	8000e8e <__aeabi_dsub+0x346>
 80010a2:	2702      	movs	r7, #2
 80010a4:	e641      	b.n	8000d2a <__aeabi_dsub+0x1e2>
 80010a6:	4663      	mov	r3, ip
 80010a8:	1ac5      	subs	r5, r0, r3
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	4180      	sbcs	r0, r0
 80010ae:	9b02      	ldr	r3, [sp, #8]
 80010b0:	4240      	negs	r0, r0
 80010b2:	1ae4      	subs	r4, r4, r3
 80010b4:	2701      	movs	r7, #1
 80010b6:	1a24      	subs	r4, r4, r0
 80010b8:	e5a8      	b.n	8000c0c <__aeabi_dsub+0xc4>
 80010ba:	9d02      	ldr	r5, [sp, #8]
 80010bc:	4652      	mov	r2, sl
 80010be:	002b      	movs	r3, r5
 80010c0:	3a20      	subs	r2, #32
 80010c2:	40d3      	lsrs	r3, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	4653      	mov	r3, sl
 80010c8:	2b20      	cmp	r3, #32
 80010ca:	d006      	beq.n	80010da <__aeabi_dsub+0x592>
 80010cc:	2240      	movs	r2, #64	@ 0x40
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	002b      	movs	r3, r5
 80010d2:	4093      	lsls	r3, r2
 80010d4:	4662      	mov	r2, ip
 80010d6:	431a      	orrs	r2, r3
 80010d8:	4693      	mov	fp, r2
 80010da:	465d      	mov	r5, fp
 80010dc:	1e6b      	subs	r3, r5, #1
 80010de:	419d      	sbcs	r5, r3
 80010e0:	430d      	orrs	r5, r1
 80010e2:	e615      	b.n	8000d10 <__aeabi_dsub+0x1c8>
 80010e4:	0762      	lsls	r2, r4, #29
 80010e6:	08c0      	lsrs	r0, r0, #3
 80010e8:	4302      	orrs	r2, r0
 80010ea:	08e4      	lsrs	r4, r4, #3
 80010ec:	e70d      	b.n	8000f0a <__aeabi_dsub+0x3c2>
 80010ee:	0011      	movs	r1, r2
 80010f0:	0027      	movs	r7, r4
 80010f2:	3920      	subs	r1, #32
 80010f4:	40cf      	lsrs	r7, r1
 80010f6:	2a20      	cmp	r2, #32
 80010f8:	d005      	beq.n	8001106 <__aeabi_dsub+0x5be>
 80010fa:	2140      	movs	r1, #64	@ 0x40
 80010fc:	1a8a      	subs	r2, r1, r2
 80010fe:	4094      	lsls	r4, r2
 8001100:	0025      	movs	r5, r4
 8001102:	4305      	orrs	r5, r0
 8001104:	9503      	str	r5, [sp, #12]
 8001106:	9d03      	ldr	r5, [sp, #12]
 8001108:	1e6a      	subs	r2, r5, #1
 800110a:	4195      	sbcs	r5, r2
 800110c:	433d      	orrs	r5, r7
 800110e:	e77d      	b.n	800100c <__aeabi_dsub+0x4c4>
 8001110:	2a00      	cmp	r2, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x5ce>
 8001114:	e744      	b.n	8000fa0 <__aeabi_dsub+0x458>
 8001116:	2601      	movs	r6, #1
 8001118:	400e      	ands	r6, r1
 800111a:	4663      	mov	r3, ip
 800111c:	08d9      	lsrs	r1, r3, #3
 800111e:	9b02      	ldr	r3, [sp, #8]
 8001120:	075a      	lsls	r2, r3, #29
 8001122:	430a      	orrs	r2, r1
 8001124:	08dc      	lsrs	r4, r3, #3
 8001126:	e6f0      	b.n	8000f0a <__aeabi_dsub+0x3c2>
 8001128:	2a00      	cmp	r2, #0
 800112a:	d028      	beq.n	800117e <__aeabi_dsub+0x636>
 800112c:	4662      	mov	r2, ip
 800112e:	9f02      	ldr	r7, [sp, #8]
 8001130:	08c0      	lsrs	r0, r0, #3
 8001132:	433a      	orrs	r2, r7
 8001134:	d100      	bne.n	8001138 <__aeabi_dsub+0x5f0>
 8001136:	e6dc      	b.n	8000ef2 <__aeabi_dsub+0x3aa>
 8001138:	0762      	lsls	r2, r4, #29
 800113a:	4310      	orrs	r0, r2
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	08e4      	lsrs	r4, r4, #3
 8001140:	0312      	lsls	r2, r2, #12
 8001142:	4214      	tst	r4, r2
 8001144:	d009      	beq.n	800115a <__aeabi_dsub+0x612>
 8001146:	08fd      	lsrs	r5, r7, #3
 8001148:	4215      	tst	r5, r2
 800114a:	d106      	bne.n	800115a <__aeabi_dsub+0x612>
 800114c:	4663      	mov	r3, ip
 800114e:	2601      	movs	r6, #1
 8001150:	002c      	movs	r4, r5
 8001152:	08d8      	lsrs	r0, r3, #3
 8001154:	077b      	lsls	r3, r7, #29
 8001156:	4318      	orrs	r0, r3
 8001158:	400e      	ands	r6, r1
 800115a:	0f42      	lsrs	r2, r0, #29
 800115c:	00c0      	lsls	r0, r0, #3
 800115e:	08c0      	lsrs	r0, r0, #3
 8001160:	0752      	lsls	r2, r2, #29
 8001162:	4302      	orrs	r2, r0
 8001164:	e601      	b.n	8000d6a <__aeabi_dsub+0x222>
 8001166:	4663      	mov	r3, ip
 8001168:	1a1d      	subs	r5, r3, r0
 800116a:	45ac      	cmp	ip, r5
 800116c:	4192      	sbcs	r2, r2
 800116e:	9b02      	ldr	r3, [sp, #8]
 8001170:	4252      	negs	r2, r2
 8001172:	1b1c      	subs	r4, r3, r4
 8001174:	000e      	movs	r6, r1
 8001176:	4688      	mov	r8, r1
 8001178:	2701      	movs	r7, #1
 800117a:	1aa4      	subs	r4, r4, r2
 800117c:	e546      	b.n	8000c0c <__aeabi_dsub+0xc4>
 800117e:	4663      	mov	r3, ip
 8001180:	08d9      	lsrs	r1, r3, #3
 8001182:	9b02      	ldr	r3, [sp, #8]
 8001184:	075a      	lsls	r2, r3, #29
 8001186:	430a      	orrs	r2, r1
 8001188:	08dc      	lsrs	r4, r3, #3
 800118a:	e5ee      	b.n	8000d6a <__aeabi_dsub+0x222>
 800118c:	4663      	mov	r3, ip
 800118e:	9c02      	ldr	r4, [sp, #8]
 8001190:	9303      	str	r3, [sp, #12]
 8001192:	e6c7      	b.n	8000f24 <__aeabi_dsub+0x3dc>
 8001194:	08c0      	lsrs	r0, r0, #3
 8001196:	2a00      	cmp	r2, #0
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x654>
 800119a:	e6aa      	b.n	8000ef2 <__aeabi_dsub+0x3aa>
 800119c:	0762      	lsls	r2, r4, #29
 800119e:	4310      	orrs	r0, r2
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	08e4      	lsrs	r4, r4, #3
 80011a4:	0312      	lsls	r2, r2, #12
 80011a6:	4214      	tst	r4, r2
 80011a8:	d0d7      	beq.n	800115a <__aeabi_dsub+0x612>
 80011aa:	9f02      	ldr	r7, [sp, #8]
 80011ac:	08fd      	lsrs	r5, r7, #3
 80011ae:	4215      	tst	r5, r2
 80011b0:	d1d3      	bne.n	800115a <__aeabi_dsub+0x612>
 80011b2:	4663      	mov	r3, ip
 80011b4:	2601      	movs	r6, #1
 80011b6:	08d8      	lsrs	r0, r3, #3
 80011b8:	077b      	lsls	r3, r7, #29
 80011ba:	002c      	movs	r4, r5
 80011bc:	4318      	orrs	r0, r3
 80011be:	400e      	ands	r6, r1
 80011c0:	e7cb      	b.n	800115a <__aeabi_dsub+0x612>
 80011c2:	000a      	movs	r2, r1
 80011c4:	0027      	movs	r7, r4
 80011c6:	3a20      	subs	r2, #32
 80011c8:	40d7      	lsrs	r7, r2
 80011ca:	2920      	cmp	r1, #32
 80011cc:	d005      	beq.n	80011da <__aeabi_dsub+0x692>
 80011ce:	2240      	movs	r2, #64	@ 0x40
 80011d0:	1a52      	subs	r2, r2, r1
 80011d2:	4094      	lsls	r4, r2
 80011d4:	0025      	movs	r5, r4
 80011d6:	4305      	orrs	r5, r0
 80011d8:	9503      	str	r5, [sp, #12]
 80011da:	9d03      	ldr	r5, [sp, #12]
 80011dc:	1e6a      	subs	r2, r5, #1
 80011de:	4195      	sbcs	r5, r2
 80011e0:	432f      	orrs	r7, r5
 80011e2:	e610      	b.n	8000e06 <__aeabi_dsub+0x2be>
 80011e4:	0014      	movs	r4, r2
 80011e6:	2500      	movs	r5, #0
 80011e8:	2200      	movs	r2, #0
 80011ea:	e556      	b.n	8000c9a <__aeabi_dsub+0x152>
 80011ec:	9b02      	ldr	r3, [sp, #8]
 80011ee:	4460      	add	r0, ip
 80011f0:	4699      	mov	r9, r3
 80011f2:	4560      	cmp	r0, ip
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	444c      	add	r4, r9
 80011f8:	4252      	negs	r2, r2
 80011fa:	0005      	movs	r5, r0
 80011fc:	18a4      	adds	r4, r4, r2
 80011fe:	e74c      	b.n	800109a <__aeabi_dsub+0x552>
 8001200:	001a      	movs	r2, r3
 8001202:	001c      	movs	r4, r3
 8001204:	432a      	orrs	r2, r5
 8001206:	d000      	beq.n	800120a <__aeabi_dsub+0x6c2>
 8001208:	e6b3      	b.n	8000f72 <__aeabi_dsub+0x42a>
 800120a:	e6c9      	b.n	8000fa0 <__aeabi_dsub+0x458>
 800120c:	2480      	movs	r4, #128	@ 0x80
 800120e:	2600      	movs	r6, #0
 8001210:	0324      	lsls	r4, r4, #12
 8001212:	e5ae      	b.n	8000d72 <__aeabi_dsub+0x22a>
 8001214:	2120      	movs	r1, #32
 8001216:	2500      	movs	r5, #0
 8001218:	1a09      	subs	r1, r1, r0
 800121a:	e517      	b.n	8000c4c <__aeabi_dsub+0x104>
 800121c:	2200      	movs	r2, #0
 800121e:	2500      	movs	r5, #0
 8001220:	4c0b      	ldr	r4, [pc, #44]	@ (8001250 <__aeabi_dsub+0x708>)
 8001222:	e53a      	b.n	8000c9a <__aeabi_dsub+0x152>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d100      	bne.n	800122a <__aeabi_dsub+0x6e2>
 8001228:	e5f6      	b.n	8000e18 <__aeabi_dsub+0x2d0>
 800122a:	464b      	mov	r3, r9
 800122c:	1bda      	subs	r2, r3, r7
 800122e:	4692      	mov	sl, r2
 8001230:	2f00      	cmp	r7, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_dsub+0x6ee>
 8001234:	e66f      	b.n	8000f16 <__aeabi_dsub+0x3ce>
 8001236:	2a38      	cmp	r2, #56	@ 0x38
 8001238:	dc05      	bgt.n	8001246 <__aeabi_dsub+0x6fe>
 800123a:	2680      	movs	r6, #128	@ 0x80
 800123c:	0436      	lsls	r6, r6, #16
 800123e:	4334      	orrs	r4, r6
 8001240:	4688      	mov	r8, r1
 8001242:	000e      	movs	r6, r1
 8001244:	e6d1      	b.n	8000fea <__aeabi_dsub+0x4a2>
 8001246:	4688      	mov	r8, r1
 8001248:	000e      	movs	r6, r1
 800124a:	2501      	movs	r5, #1
 800124c:	e6de      	b.n	800100c <__aeabi_dsub+0x4c4>
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	000007ff 	.word	0x000007ff
 8001254:	ff7fffff 	.word	0xff7fffff
 8001258:	000007fe 	.word	0x000007fe
 800125c:	2d00      	cmp	r5, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_dsub+0x71a>
 8001260:	e668      	b.n	8000f34 <__aeabi_dsub+0x3ec>
 8001262:	464b      	mov	r3, r9
 8001264:	1bd9      	subs	r1, r3, r7
 8001266:	2f00      	cmp	r7, #0
 8001268:	d101      	bne.n	800126e <__aeabi_dsub+0x726>
 800126a:	468a      	mov	sl, r1
 800126c:	e5a7      	b.n	8000dbe <__aeabi_dsub+0x276>
 800126e:	2701      	movs	r7, #1
 8001270:	2938      	cmp	r1, #56	@ 0x38
 8001272:	dd00      	ble.n	8001276 <__aeabi_dsub+0x72e>
 8001274:	e5c7      	b.n	8000e06 <__aeabi_dsub+0x2be>
 8001276:	2280      	movs	r2, #128	@ 0x80
 8001278:	0412      	lsls	r2, r2, #16
 800127a:	4314      	orrs	r4, r2
 800127c:	e5af      	b.n	8000dde <__aeabi_dsub+0x296>
 800127e:	46c0      	nop			@ (mov r8, r8)

08001280 <__aeabi_d2iz>:
 8001280:	000b      	movs	r3, r1
 8001282:	0002      	movs	r2, r0
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	4d16      	ldr	r5, [pc, #88]	@ (80012e0 <__aeabi_d2iz+0x60>)
 8001288:	030c      	lsls	r4, r1, #12
 800128a:	b082      	sub	sp, #8
 800128c:	0049      	lsls	r1, r1, #1
 800128e:	2000      	movs	r0, #0
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	0b24      	lsrs	r4, r4, #12
 8001296:	0d49      	lsrs	r1, r1, #21
 8001298:	0fde      	lsrs	r6, r3, #31
 800129a:	42a9      	cmp	r1, r5
 800129c:	dd04      	ble.n	80012a8 <__aeabi_d2iz+0x28>
 800129e:	4811      	ldr	r0, [pc, #68]	@ (80012e4 <__aeabi_d2iz+0x64>)
 80012a0:	4281      	cmp	r1, r0
 80012a2:	dd03      	ble.n	80012ac <__aeabi_d2iz+0x2c>
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <__aeabi_d2iz+0x68>)
 80012a6:	18f0      	adds	r0, r6, r3
 80012a8:	b002      	add	sp, #8
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
 80012ac:	2080      	movs	r0, #128	@ 0x80
 80012ae:	0340      	lsls	r0, r0, #13
 80012b0:	4320      	orrs	r0, r4
 80012b2:	4c0e      	ldr	r4, [pc, #56]	@ (80012ec <__aeabi_d2iz+0x6c>)
 80012b4:	1a64      	subs	r4, r4, r1
 80012b6:	2c1f      	cmp	r4, #31
 80012b8:	dd08      	ble.n	80012cc <__aeabi_d2iz+0x4c>
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <__aeabi_d2iz+0x70>)
 80012bc:	1a5b      	subs	r3, r3, r1
 80012be:	40d8      	lsrs	r0, r3
 80012c0:	0003      	movs	r3, r0
 80012c2:	4258      	negs	r0, r3
 80012c4:	2e00      	cmp	r6, #0
 80012c6:	d1ef      	bne.n	80012a8 <__aeabi_d2iz+0x28>
 80012c8:	0018      	movs	r0, r3
 80012ca:	e7ed      	b.n	80012a8 <__aeabi_d2iz+0x28>
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <__aeabi_d2iz+0x74>)
 80012ce:	9a00      	ldr	r2, [sp, #0]
 80012d0:	469c      	mov	ip, r3
 80012d2:	0003      	movs	r3, r0
 80012d4:	4461      	add	r1, ip
 80012d6:	408b      	lsls	r3, r1
 80012d8:	40e2      	lsrs	r2, r4
 80012da:	4313      	orrs	r3, r2
 80012dc:	e7f1      	b.n	80012c2 <__aeabi_d2iz+0x42>
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	000003fe 	.word	0x000003fe
 80012e4:	0000041d 	.word	0x0000041d
 80012e8:	7fffffff 	.word	0x7fffffff
 80012ec:	00000433 	.word	0x00000433
 80012f0:	00000413 	.word	0x00000413
 80012f4:	fffffbed 	.word	0xfffffbed

080012f8 <__aeabi_ui2d>:
 80012f8:	b510      	push	{r4, lr}
 80012fa:	1e04      	subs	r4, r0, #0
 80012fc:	d010      	beq.n	8001320 <__aeabi_ui2d+0x28>
 80012fe:	f000 f85d 	bl	80013bc <__clzsi2>
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <__aeabi_ui2d+0x44>)
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	055b      	lsls	r3, r3, #21
 8001308:	0d5b      	lsrs	r3, r3, #21
 800130a:	280a      	cmp	r0, #10
 800130c:	dc0f      	bgt.n	800132e <__aeabi_ui2d+0x36>
 800130e:	220b      	movs	r2, #11
 8001310:	0021      	movs	r1, r4
 8001312:	1a12      	subs	r2, r2, r0
 8001314:	40d1      	lsrs	r1, r2
 8001316:	3015      	adds	r0, #21
 8001318:	030a      	lsls	r2, r1, #12
 800131a:	4084      	lsls	r4, r0
 800131c:	0b12      	lsrs	r2, r2, #12
 800131e:	e001      	b.n	8001324 <__aeabi_ui2d+0x2c>
 8001320:	2300      	movs	r3, #0
 8001322:	2200      	movs	r2, #0
 8001324:	051b      	lsls	r3, r3, #20
 8001326:	4313      	orrs	r3, r2
 8001328:	0020      	movs	r0, r4
 800132a:	0019      	movs	r1, r3
 800132c:	bd10      	pop	{r4, pc}
 800132e:	0022      	movs	r2, r4
 8001330:	380b      	subs	r0, #11
 8001332:	4082      	lsls	r2, r0
 8001334:	0312      	lsls	r2, r2, #12
 8001336:	2400      	movs	r4, #0
 8001338:	0b12      	lsrs	r2, r2, #12
 800133a:	e7f3      	b.n	8001324 <__aeabi_ui2d+0x2c>
 800133c:	0000041e 	.word	0x0000041e

08001340 <__aeabi_cdrcmple>:
 8001340:	4684      	mov	ip, r0
 8001342:	0010      	movs	r0, r2
 8001344:	4662      	mov	r2, ip
 8001346:	468c      	mov	ip, r1
 8001348:	0019      	movs	r1, r3
 800134a:	4663      	mov	r3, ip
 800134c:	e000      	b.n	8001350 <__aeabi_cdcmpeq>
 800134e:	46c0      	nop			@ (mov r8, r8)

08001350 <__aeabi_cdcmpeq>:
 8001350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001352:	f000 f909 	bl	8001568 <__ledf2>
 8001356:	2800      	cmp	r0, #0
 8001358:	d401      	bmi.n	800135e <__aeabi_cdcmpeq+0xe>
 800135a:	2100      	movs	r1, #0
 800135c:	42c8      	cmn	r0, r1
 800135e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001360 <__aeabi_dcmpeq>:
 8001360:	b510      	push	{r4, lr}
 8001362:	f000 f849 	bl	80013f8 <__eqdf2>
 8001366:	4240      	negs	r0, r0
 8001368:	3001      	adds	r0, #1
 800136a:	bd10      	pop	{r4, pc}

0800136c <__aeabi_dcmplt>:
 800136c:	b510      	push	{r4, lr}
 800136e:	f000 f8fb 	bl	8001568 <__ledf2>
 8001372:	2800      	cmp	r0, #0
 8001374:	db01      	blt.n	800137a <__aeabi_dcmplt+0xe>
 8001376:	2000      	movs	r0, #0
 8001378:	bd10      	pop	{r4, pc}
 800137a:	2001      	movs	r0, #1
 800137c:	bd10      	pop	{r4, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)

08001380 <__aeabi_dcmple>:
 8001380:	b510      	push	{r4, lr}
 8001382:	f000 f8f1 	bl	8001568 <__ledf2>
 8001386:	2800      	cmp	r0, #0
 8001388:	dd01      	ble.n	800138e <__aeabi_dcmple+0xe>
 800138a:	2000      	movs	r0, #0
 800138c:	bd10      	pop	{r4, pc}
 800138e:	2001      	movs	r0, #1
 8001390:	bd10      	pop	{r4, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)

08001394 <__aeabi_dcmpgt>:
 8001394:	b510      	push	{r4, lr}
 8001396:	f000 f873 	bl	8001480 <__gedf2>
 800139a:	2800      	cmp	r0, #0
 800139c:	dc01      	bgt.n	80013a2 <__aeabi_dcmpgt+0xe>
 800139e:	2000      	movs	r0, #0
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	2001      	movs	r0, #1
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)

080013a8 <__aeabi_dcmpge>:
 80013a8:	b510      	push	{r4, lr}
 80013aa:	f000 f869 	bl	8001480 <__gedf2>
 80013ae:	2800      	cmp	r0, #0
 80013b0:	da01      	bge.n	80013b6 <__aeabi_dcmpge+0xe>
 80013b2:	2000      	movs	r0, #0
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	2001      	movs	r0, #1
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)

080013bc <__clzsi2>:
 80013bc:	211c      	movs	r1, #28
 80013be:	2301      	movs	r3, #1
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	4298      	cmp	r0, r3
 80013c4:	d301      	bcc.n	80013ca <__clzsi2+0xe>
 80013c6:	0c00      	lsrs	r0, r0, #16
 80013c8:	3910      	subs	r1, #16
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	4298      	cmp	r0, r3
 80013ce:	d301      	bcc.n	80013d4 <__clzsi2+0x18>
 80013d0:	0a00      	lsrs	r0, r0, #8
 80013d2:	3908      	subs	r1, #8
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	4298      	cmp	r0, r3
 80013d8:	d301      	bcc.n	80013de <__clzsi2+0x22>
 80013da:	0900      	lsrs	r0, r0, #4
 80013dc:	3904      	subs	r1, #4
 80013de:	a202      	add	r2, pc, #8	@ (adr r2, 80013e8 <__clzsi2+0x2c>)
 80013e0:	5c10      	ldrb	r0, [r2, r0]
 80013e2:	1840      	adds	r0, r0, r1
 80013e4:	4770      	bx	lr
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	02020304 	.word	0x02020304
 80013ec:	01010101 	.word	0x01010101
	...

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	000d      	movs	r5, r1
 8001406:	0004      	movs	r4, r0
 8001408:	0fe8      	lsrs	r0, r5, #31
 800140a:	4683      	mov	fp, r0
 800140c:	0309      	lsls	r1, r1, #12
 800140e:	0fd8      	lsrs	r0, r3, #31
 8001410:	0b09      	lsrs	r1, r1, #12
 8001412:	4682      	mov	sl, r0
 8001414:	4819      	ldr	r0, [pc, #100]	@ (800147c <__eqdf2+0x84>)
 8001416:	468c      	mov	ip, r1
 8001418:	031f      	lsls	r7, r3, #12
 800141a:	0069      	lsls	r1, r5, #1
 800141c:	005e      	lsls	r6, r3, #1
 800141e:	0d49      	lsrs	r1, r1, #21
 8001420:	0b3f      	lsrs	r7, r7, #12
 8001422:	0d76      	lsrs	r6, r6, #21
 8001424:	4281      	cmp	r1, r0
 8001426:	d018      	beq.n	800145a <__eqdf2+0x62>
 8001428:	4286      	cmp	r6, r0
 800142a:	d00f      	beq.n	800144c <__eqdf2+0x54>
 800142c:	2001      	movs	r0, #1
 800142e:	42b1      	cmp	r1, r6
 8001430:	d10d      	bne.n	800144e <__eqdf2+0x56>
 8001432:	45bc      	cmp	ip, r7
 8001434:	d10b      	bne.n	800144e <__eqdf2+0x56>
 8001436:	4294      	cmp	r4, r2
 8001438:	d109      	bne.n	800144e <__eqdf2+0x56>
 800143a:	45d3      	cmp	fp, sl
 800143c:	d01c      	beq.n	8001478 <__eqdf2+0x80>
 800143e:	2900      	cmp	r1, #0
 8001440:	d105      	bne.n	800144e <__eqdf2+0x56>
 8001442:	4660      	mov	r0, ip
 8001444:	4320      	orrs	r0, r4
 8001446:	1e43      	subs	r3, r0, #1
 8001448:	4198      	sbcs	r0, r3
 800144a:	e000      	b.n	800144e <__eqdf2+0x56>
 800144c:	2001      	movs	r0, #1
 800144e:	bcf0      	pop	{r4, r5, r6, r7}
 8001450:	46bb      	mov	fp, r7
 8001452:	46b2      	mov	sl, r6
 8001454:	46a9      	mov	r9, r5
 8001456:	46a0      	mov	r8, r4
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	2001      	movs	r0, #1
 800145c:	428e      	cmp	r6, r1
 800145e:	d1f6      	bne.n	800144e <__eqdf2+0x56>
 8001460:	4661      	mov	r1, ip
 8001462:	4339      	orrs	r1, r7
 8001464:	000f      	movs	r7, r1
 8001466:	4317      	orrs	r7, r2
 8001468:	4327      	orrs	r7, r4
 800146a:	d1f0      	bne.n	800144e <__eqdf2+0x56>
 800146c:	465b      	mov	r3, fp
 800146e:	4652      	mov	r2, sl
 8001470:	1a98      	subs	r0, r3, r2
 8001472:	1e43      	subs	r3, r0, #1
 8001474:	4198      	sbcs	r0, r3
 8001476:	e7ea      	b.n	800144e <__eqdf2+0x56>
 8001478:	2000      	movs	r0, #0
 800147a:	e7e8      	b.n	800144e <__eqdf2+0x56>
 800147c:	000007ff 	.word	0x000007ff

08001480 <__gedf2>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	4657      	mov	r7, sl
 8001484:	464e      	mov	r6, r9
 8001486:	4645      	mov	r5, r8
 8001488:	46de      	mov	lr, fp
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	000d      	movs	r5, r1
 800148e:	030f      	lsls	r7, r1, #12
 8001490:	0b39      	lsrs	r1, r7, #12
 8001492:	b083      	sub	sp, #12
 8001494:	0004      	movs	r4, r0
 8001496:	4680      	mov	r8, r0
 8001498:	9101      	str	r1, [sp, #4]
 800149a:	0058      	lsls	r0, r3, #1
 800149c:	0fe9      	lsrs	r1, r5, #31
 800149e:	4f31      	ldr	r7, [pc, #196]	@ (8001564 <__gedf2+0xe4>)
 80014a0:	0d40      	lsrs	r0, r0, #21
 80014a2:	468c      	mov	ip, r1
 80014a4:	006e      	lsls	r6, r5, #1
 80014a6:	0319      	lsls	r1, r3, #12
 80014a8:	4682      	mov	sl, r0
 80014aa:	4691      	mov	r9, r2
 80014ac:	0d76      	lsrs	r6, r6, #21
 80014ae:	0b09      	lsrs	r1, r1, #12
 80014b0:	0fd8      	lsrs	r0, r3, #31
 80014b2:	42be      	cmp	r6, r7
 80014b4:	d01f      	beq.n	80014f6 <__gedf2+0x76>
 80014b6:	45ba      	cmp	sl, r7
 80014b8:	d00f      	beq.n	80014da <__gedf2+0x5a>
 80014ba:	2e00      	cmp	r6, #0
 80014bc:	d12f      	bne.n	800151e <__gedf2+0x9e>
 80014be:	4655      	mov	r5, sl
 80014c0:	9e01      	ldr	r6, [sp, #4]
 80014c2:	4334      	orrs	r4, r6
 80014c4:	2d00      	cmp	r5, #0
 80014c6:	d127      	bne.n	8001518 <__gedf2+0x98>
 80014c8:	430a      	orrs	r2, r1
 80014ca:	d03a      	beq.n	8001542 <__gedf2+0xc2>
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d145      	bne.n	800155c <__gedf2+0xdc>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d11a      	bne.n	800150a <__gedf2+0x8a>
 80014d4:	2001      	movs	r0, #1
 80014d6:	4240      	negs	r0, r0
 80014d8:	e017      	b.n	800150a <__gedf2+0x8a>
 80014da:	4311      	orrs	r1, r2
 80014dc:	d13b      	bne.n	8001556 <__gedf2+0xd6>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d102      	bne.n	80014e8 <__gedf2+0x68>
 80014e2:	9f01      	ldr	r7, [sp, #4]
 80014e4:	4327      	orrs	r7, r4
 80014e6:	d0f3      	beq.n	80014d0 <__gedf2+0x50>
 80014e8:	4584      	cmp	ip, r0
 80014ea:	d109      	bne.n	8001500 <__gedf2+0x80>
 80014ec:	4663      	mov	r3, ip
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <__gedf2+0x54>
 80014f2:	4660      	mov	r0, ip
 80014f4:	e009      	b.n	800150a <__gedf2+0x8a>
 80014f6:	9f01      	ldr	r7, [sp, #4]
 80014f8:	4327      	orrs	r7, r4
 80014fa:	d12c      	bne.n	8001556 <__gedf2+0xd6>
 80014fc:	45b2      	cmp	sl, r6
 80014fe:	d024      	beq.n	800154a <__gedf2+0xca>
 8001500:	4663      	mov	r3, ip
 8001502:	2002      	movs	r0, #2
 8001504:	3b01      	subs	r3, #1
 8001506:	4018      	ands	r0, r3
 8001508:	3801      	subs	r0, #1
 800150a:	b003      	add	sp, #12
 800150c:	bcf0      	pop	{r4, r5, r6, r7}
 800150e:	46bb      	mov	fp, r7
 8001510:	46b2      	mov	sl, r6
 8001512:	46a9      	mov	r9, r5
 8001514:	46a0      	mov	r8, r4
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001518:	2c00      	cmp	r4, #0
 800151a:	d0d9      	beq.n	80014d0 <__gedf2+0x50>
 800151c:	e7e4      	b.n	80014e8 <__gedf2+0x68>
 800151e:	4654      	mov	r4, sl
 8001520:	2c00      	cmp	r4, #0
 8001522:	d0ed      	beq.n	8001500 <__gedf2+0x80>
 8001524:	4584      	cmp	ip, r0
 8001526:	d1eb      	bne.n	8001500 <__gedf2+0x80>
 8001528:	4556      	cmp	r6, sl
 800152a:	dce9      	bgt.n	8001500 <__gedf2+0x80>
 800152c:	dbde      	blt.n	80014ec <__gedf2+0x6c>
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	428b      	cmp	r3, r1
 8001532:	d8e5      	bhi.n	8001500 <__gedf2+0x80>
 8001534:	d1da      	bne.n	80014ec <__gedf2+0x6c>
 8001536:	45c8      	cmp	r8, r9
 8001538:	d8e2      	bhi.n	8001500 <__gedf2+0x80>
 800153a:	2000      	movs	r0, #0
 800153c:	45c8      	cmp	r8, r9
 800153e:	d2e4      	bcs.n	800150a <__gedf2+0x8a>
 8001540:	e7d4      	b.n	80014ec <__gedf2+0x6c>
 8001542:	2000      	movs	r0, #0
 8001544:	2c00      	cmp	r4, #0
 8001546:	d0e0      	beq.n	800150a <__gedf2+0x8a>
 8001548:	e7da      	b.n	8001500 <__gedf2+0x80>
 800154a:	4311      	orrs	r1, r2
 800154c:	d103      	bne.n	8001556 <__gedf2+0xd6>
 800154e:	4584      	cmp	ip, r0
 8001550:	d1d6      	bne.n	8001500 <__gedf2+0x80>
 8001552:	2000      	movs	r0, #0
 8001554:	e7d9      	b.n	800150a <__gedf2+0x8a>
 8001556:	2002      	movs	r0, #2
 8001558:	4240      	negs	r0, r0
 800155a:	e7d6      	b.n	800150a <__gedf2+0x8a>
 800155c:	4584      	cmp	ip, r0
 800155e:	d0e6      	beq.n	800152e <__gedf2+0xae>
 8001560:	e7ce      	b.n	8001500 <__gedf2+0x80>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	000007ff 	.word	0x000007ff

08001568 <__ledf2>:
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	4657      	mov	r7, sl
 800156c:	464e      	mov	r6, r9
 800156e:	4645      	mov	r5, r8
 8001570:	46de      	mov	lr, fp
 8001572:	b5e0      	push	{r5, r6, r7, lr}
 8001574:	000d      	movs	r5, r1
 8001576:	030f      	lsls	r7, r1, #12
 8001578:	0004      	movs	r4, r0
 800157a:	4680      	mov	r8, r0
 800157c:	0fe8      	lsrs	r0, r5, #31
 800157e:	0b39      	lsrs	r1, r7, #12
 8001580:	4684      	mov	ip, r0
 8001582:	b083      	sub	sp, #12
 8001584:	0058      	lsls	r0, r3, #1
 8001586:	4f30      	ldr	r7, [pc, #192]	@ (8001648 <__ledf2+0xe0>)
 8001588:	0d40      	lsrs	r0, r0, #21
 800158a:	9101      	str	r1, [sp, #4]
 800158c:	031e      	lsls	r6, r3, #12
 800158e:	0069      	lsls	r1, r5, #1
 8001590:	4682      	mov	sl, r0
 8001592:	4691      	mov	r9, r2
 8001594:	0d49      	lsrs	r1, r1, #21
 8001596:	0b36      	lsrs	r6, r6, #12
 8001598:	0fd8      	lsrs	r0, r3, #31
 800159a:	42b9      	cmp	r1, r7
 800159c:	d020      	beq.n	80015e0 <__ledf2+0x78>
 800159e:	45ba      	cmp	sl, r7
 80015a0:	d00f      	beq.n	80015c2 <__ledf2+0x5a>
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d12b      	bne.n	80015fe <__ledf2+0x96>
 80015a6:	9901      	ldr	r1, [sp, #4]
 80015a8:	430c      	orrs	r4, r1
 80015aa:	4651      	mov	r1, sl
 80015ac:	2900      	cmp	r1, #0
 80015ae:	d137      	bne.n	8001620 <__ledf2+0xb8>
 80015b0:	4332      	orrs	r2, r6
 80015b2:	d038      	beq.n	8001626 <__ledf2+0xbe>
 80015b4:	2c00      	cmp	r4, #0
 80015b6:	d144      	bne.n	8001642 <__ledf2+0xda>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d119      	bne.n	80015f0 <__ledf2+0x88>
 80015bc:	2001      	movs	r0, #1
 80015be:	4240      	negs	r0, r0
 80015c0:	e016      	b.n	80015f0 <__ledf2+0x88>
 80015c2:	4316      	orrs	r6, r2
 80015c4:	d113      	bne.n	80015ee <__ledf2+0x86>
 80015c6:	2900      	cmp	r1, #0
 80015c8:	d102      	bne.n	80015d0 <__ledf2+0x68>
 80015ca:	9f01      	ldr	r7, [sp, #4]
 80015cc:	4327      	orrs	r7, r4
 80015ce:	d0f3      	beq.n	80015b8 <__ledf2+0x50>
 80015d0:	4584      	cmp	ip, r0
 80015d2:	d020      	beq.n	8001616 <__ledf2+0xae>
 80015d4:	4663      	mov	r3, ip
 80015d6:	2002      	movs	r0, #2
 80015d8:	3b01      	subs	r3, #1
 80015da:	4018      	ands	r0, r3
 80015dc:	3801      	subs	r0, #1
 80015de:	e007      	b.n	80015f0 <__ledf2+0x88>
 80015e0:	9f01      	ldr	r7, [sp, #4]
 80015e2:	4327      	orrs	r7, r4
 80015e4:	d103      	bne.n	80015ee <__ledf2+0x86>
 80015e6:	458a      	cmp	sl, r1
 80015e8:	d1f4      	bne.n	80015d4 <__ledf2+0x6c>
 80015ea:	4316      	orrs	r6, r2
 80015ec:	d01f      	beq.n	800162e <__ledf2+0xc6>
 80015ee:	2002      	movs	r0, #2
 80015f0:	b003      	add	sp, #12
 80015f2:	bcf0      	pop	{r4, r5, r6, r7}
 80015f4:	46bb      	mov	fp, r7
 80015f6:	46b2      	mov	sl, r6
 80015f8:	46a9      	mov	r9, r5
 80015fa:	46a0      	mov	r8, r4
 80015fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fe:	4654      	mov	r4, sl
 8001600:	2c00      	cmp	r4, #0
 8001602:	d0e7      	beq.n	80015d4 <__ledf2+0x6c>
 8001604:	4584      	cmp	ip, r0
 8001606:	d1e5      	bne.n	80015d4 <__ledf2+0x6c>
 8001608:	4551      	cmp	r1, sl
 800160a:	dce3      	bgt.n	80015d4 <__ledf2+0x6c>
 800160c:	db03      	blt.n	8001616 <__ledf2+0xae>
 800160e:	9b01      	ldr	r3, [sp, #4]
 8001610:	42b3      	cmp	r3, r6
 8001612:	d8df      	bhi.n	80015d4 <__ledf2+0x6c>
 8001614:	d00f      	beq.n	8001636 <__ledf2+0xce>
 8001616:	4663      	mov	r3, ip
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0cf      	beq.n	80015bc <__ledf2+0x54>
 800161c:	4660      	mov	r0, ip
 800161e:	e7e7      	b.n	80015f0 <__ledf2+0x88>
 8001620:	2c00      	cmp	r4, #0
 8001622:	d0c9      	beq.n	80015b8 <__ledf2+0x50>
 8001624:	e7d4      	b.n	80015d0 <__ledf2+0x68>
 8001626:	2000      	movs	r0, #0
 8001628:	2c00      	cmp	r4, #0
 800162a:	d0e1      	beq.n	80015f0 <__ledf2+0x88>
 800162c:	e7d2      	b.n	80015d4 <__ledf2+0x6c>
 800162e:	4584      	cmp	ip, r0
 8001630:	d1d0      	bne.n	80015d4 <__ledf2+0x6c>
 8001632:	2000      	movs	r0, #0
 8001634:	e7dc      	b.n	80015f0 <__ledf2+0x88>
 8001636:	45c8      	cmp	r8, r9
 8001638:	d8cc      	bhi.n	80015d4 <__ledf2+0x6c>
 800163a:	2000      	movs	r0, #0
 800163c:	45c8      	cmp	r8, r9
 800163e:	d2d7      	bcs.n	80015f0 <__ledf2+0x88>
 8001640:	e7e9      	b.n	8001616 <__ledf2+0xae>
 8001642:	4584      	cmp	ip, r0
 8001644:	d0e3      	beq.n	800160e <__ledf2+0xa6>
 8001646:	e7c5      	b.n	80015d4 <__ledf2+0x6c>
 8001648:	000007ff 	.word	0x000007ff

0800164c <process_data>:
uint8_t txcount = 0;
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;

void process_data(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
    int startREG = RxData[0];  // Get the starting register address
 8001652:	4b6e      	ldr	r3, [pc, #440]	@ (800180c <process_data+0x1c0>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    int numREG = rxcount - 1;  // Get the number of registers written
 8001658:	4b6d      	ldr	r3, [pc, #436]	@ (8001810 <process_data+0x1c4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
    int endREG = startREG + numREG - 1;  // Calculate the end register
 8001660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	18d3      	adds	r3, r2, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	607b      	str	r3, [r7, #4]

    if (endREG > 40)  // There are now a total of 41 registers (0-40)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b28      	cmp	r3, #40	@ 0x28
 800166e:	dd09      	ble.n	8001684 <process_data+0x38>
    {
        // Clear everything and return
        memset(RxData, '\0', RxSIZE);
 8001670:	4b66      	ldr	r3, [pc, #408]	@ (800180c <process_data+0x1c0>)
 8001672:	222a      	movs	r2, #42	@ 0x2a
 8001674:	2100      	movs	r1, #0
 8001676:	0018      	movs	r0, r3
 8001678:	f004 fbea 	bl	8005e50 <memset>
        rxcount = 0;
 800167c:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <process_data+0x1c4>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
        return;
 8001682:	e0bf      	b.n	8001804 <process_data+0x1b8>
    }

    int indx = 1;  // Set the index to 1 to start reading from RxData[1]
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < numREG; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	e027      	b.n	80016de <process_data+0x92>
    {
    	uint32_t value = 0; // Initialize the 32-bit value
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
    	// Combine 4 bytes into a uint32_t value
		for (int byteIndex = 0; byteIndex < 4 && indx < rxcount; byteIndex++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e00f      	b.n	80016b8 <process_data+0x6c>
		{
			value |= (uint32_t)RxData[indx++] << (byteIndex * 8);
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	623a      	str	r2, [r7, #32]
 800169e:	4a5b      	ldr	r2, [pc, #364]	@ (800180c <process_data+0x1c0>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	001a      	movs	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	409a      	lsls	r2, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
		for (int byteIndex = 0; byteIndex < 4 && indx < rxcount; byteIndex++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	dc05      	bgt.n	80016ca <process_data+0x7e>
 80016be:	4b54      	ldr	r3, [pc, #336]	@ (8001810 <process_data+0x1c4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	001a      	movs	r2, r3
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	dbe6      	blt.n	8001698 <process_data+0x4c>
		}
        I2C_REGISTERS[startREG++] = value;  // Store the data in I2C_REGISTERS
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80016d0:	4a50      	ldr	r2, [pc, #320]	@ (8001814 <process_data+0x1c8>)
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	69b9      	ldr	r1, [r7, #24]
 80016d6:	5099      	str	r1, [r3, r2]
    for (int i = 0; i < numREG; i++)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3301      	adds	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbd3      	blt.n	800168e <process_data+0x42>
    }

    // Control PB0, PB1, PB2, PB10, PB11, PB12, PB13, PB14 based on I2C_REGISTERS 8-15
    for (int i = 0; i < 8; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	e037      	b.n	800175c <process_data+0x110>
    {
        uint16_t pin;
        if (i < 3) // PB0, PB1, PB2
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc06      	bgt.n	8001700 <process_data+0xb4>
        {
            pin = GPIO_PIN_0 << i;
 80016f2:	2201      	movs	r2, #1
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	409a      	lsls	r2, r3
 80016f8:	230e      	movs	r3, #14
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	801a      	strh	r2, [r3, #0]
 80016fe:	e019      	b.n	8001734 <process_data+0xe8>
        }
        else if (i == 3) // PB10
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d105      	bne.n	8001712 <process_data+0xc6>
        {
            pin = GPIO_PIN_10;
 8001706:	230e      	movs	r3, #14
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	2280      	movs	r2, #128	@ 0x80
 800170c:	00d2      	lsls	r2, r2, #3
 800170e:	801a      	strh	r2, [r3, #0]
 8001710:	e010      	b.n	8001734 <process_data+0xe8>
        }
        else if (i == 4) // PB11
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d105      	bne.n	8001724 <process_data+0xd8>
        {
            pin = GPIO_PIN_11;
 8001718:	230e      	movs	r3, #14
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <process_data+0xe8>
        }
        else // PB12-PB14
        {
            pin = GPIO_PIN_12 << (i - 5);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	3b05      	subs	r3, #5
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	0152      	lsls	r2, r2, #5
 800172c:	409a      	lsls	r2, r3
 800172e:	230e      	movs	r3, #14
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	801a      	strh	r2, [r3, #0]
        }

        HAL_GPIO_WritePin(GPIOB, pin, I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	3308      	adds	r3, #8
 8001738:	001a      	movs	r2, r3
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <process_data+0x1c8>)
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	58d3      	ldr	r3, [r2, r3]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	4193      	sbcs	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	001a      	movs	r2, r3
 8001748:	230e      	movs	r3, #14
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	4832      	ldr	r0, [pc, #200]	@ (8001818 <process_data+0x1cc>)
 8001750:	0019      	movs	r1, r3
 8001752:	f002 f864 	bl	800381e <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	3301      	adds	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b07      	cmp	r3, #7
 8001760:	ddc4      	ble.n	80016ec <process_data+0xa0>
//    I2C_REGISTERS[21] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
//    I2C_REGISTERS[22] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
//    I2C_REGISTERS[23] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);

    // Configure PF7, PA15, PB3, PB4, PB5, PB8, PB9, PC13 as digital inputs (I2C_REGISTERS 24-31)
    I2C_REGISTERS[24] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);  // PF7
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <process_data+0x1d0>)
 8001764:	2180      	movs	r1, #128	@ 0x80
 8001766:	0018      	movs	r0, r3
 8001768:	f002 f83c 	bl	80037e4 <HAL_GPIO_ReadPin>
 800176c:	0003      	movs	r3, r0
 800176e:	001a      	movs	r2, r3
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <process_data+0x1c8>)
 8001772:	661a      	str	r2, [r3, #96]	@ 0x60
    I2C_REGISTERS[25] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15); // PA15
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	021a      	lsls	r2, r3, #8
 8001778:	2390      	movs	r3, #144	@ 0x90
 800177a:	05db      	lsls	r3, r3, #23
 800177c:	0011      	movs	r1, r2
 800177e:	0018      	movs	r0, r3
 8001780:	f002 f830 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <process_data+0x1c8>)
 800178a:	665a      	str	r2, [r3, #100]	@ 0x64
    I2C_REGISTERS[26] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);  // PB3
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <process_data+0x1cc>)
 800178e:	2108      	movs	r1, #8
 8001790:	0018      	movs	r0, r3
 8001792:	f002 f827 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001796:	0003      	movs	r3, r0
 8001798:	001a      	movs	r2, r3
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <process_data+0x1c8>)
 800179c:	669a      	str	r2, [r3, #104]	@ 0x68
    I2C_REGISTERS[27] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);  // PB4
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <process_data+0x1cc>)
 80017a0:	2110      	movs	r1, #16
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 f81e 	bl	80037e4 <HAL_GPIO_ReadPin>
 80017a8:	0003      	movs	r3, r0
 80017aa:	001a      	movs	r2, r3
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <process_data+0x1c8>)
 80017ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    I2C_REGISTERS[28] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // PB5
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <process_data+0x1cc>)
 80017b2:	2120      	movs	r1, #32
 80017b4:	0018      	movs	r0, r3
 80017b6:	f002 f815 	bl	80037e4 <HAL_GPIO_ReadPin>
 80017ba:	0003      	movs	r3, r0
 80017bc:	001a      	movs	r2, r3
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <process_data+0x1c8>)
 80017c0:	671a      	str	r2, [r3, #112]	@ 0x70
    I2C_REGISTERS[29] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);  // PB8
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <process_data+0x1cc>)
 80017c8:	0019      	movs	r1, r3
 80017ca:	0010      	movs	r0, r2
 80017cc:	f002 f80a 	bl	80037e4 <HAL_GPIO_ReadPin>
 80017d0:	0003      	movs	r3, r0
 80017d2:	001a      	movs	r2, r3
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <process_data+0x1c8>)
 80017d6:	675a      	str	r2, [r3, #116]	@ 0x74
    I2C_REGISTERS[30] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // PB9
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001818 <process_data+0x1cc>)
 80017de:	0019      	movs	r1, r3
 80017e0:	0010      	movs	r0, r2
 80017e2:	f001 ffff 	bl	80037e4 <HAL_GPIO_ReadPin>
 80017e6:	0003      	movs	r3, r0
 80017e8:	001a      	movs	r2, r3
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <process_data+0x1c8>)
 80017ec:	679a      	str	r2, [r3, #120]	@ 0x78
    I2C_REGISTERS[31] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); // PC13
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <process_data+0x1d4>)
 80017f4:	0019      	movs	r1, r3
 80017f6:	0010      	movs	r0, r2
 80017f8:	f001 fff4 	bl	80037e4 <HAL_GPIO_ReadPin>
 80017fc:	0003      	movs	r3, r0
 80017fe:	001a      	movs	r2, r3
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <process_data+0x1c8>)
 8001802:	67da      	str	r2, [r3, #124]	@ 0x7c

}
 8001804:	46bd      	mov	sp, r7
 8001806:	b00a      	add	sp, #40	@ 0x28
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	200000cc 	.word	0x200000cc
 8001810:	200000f6 	.word	0x200000f6
 8001814:	20000028 	.word	0x20000028
 8001818:	48000400 	.word	0x48000400
 800181c:	48001400 	.word	0x48001400
 8001820:	48000800 	.word	0x48000800

08001824 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	f002 fa6a 	bl	8003d08 <HAL_I2C_EnableListen_IT>
}
 8001834:	46c0      	nop			@ (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_I2C_AddrCallback>:
//        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[startPosition], 1, I2C_FIRST_FRAME);
//    }
//}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	0008      	movs	r0, r1
 8001846:	0011      	movs	r1, r2
 8001848:	1cfb      	adds	r3, r7, #3
 800184a:	1c02      	adds	r2, r0, #0
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	003b      	movs	r3, r7
 8001850:	1c0a      	adds	r2, r1, #0
 8001852:	801a      	strh	r2, [r3, #0]
    if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // Master wants to transmit
 8001854:	1cfb      	adds	r3, r7, #3
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_I2C_AddrCallback+0x3c>
    {
        rxcount = 0;  // Reset the Rx count
 800185c:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_I2C_AddrCallback+0x60>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_FIRST_FRAME);
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_I2C_AddrCallback+0x60>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	001a      	movs	r2, r3
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HAL_I2C_AddrCallback+0x64>)
 800186a:	18d1      	adds	r1, r2, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	2300      	movs	r3, #0
 8001870:	2201      	movs	r2, #1
 8001872:	f002 f987 	bl	8003b84 <HAL_I2C_Slave_Seq_Receive_IT>
    {
        // Handle read request from master
        startPosition = RxData[0];  // The first byte is the register address
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[startPosition], sizeof(uint32_t), I2C_FIRST_FRAME);
    }
}
 8001876:	e00d      	b.n	8001894 <HAL_I2C_AddrCallback+0x58>
        startPosition = RxData[0];  // The first byte is the register address
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_I2C_AddrCallback+0x64>)
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_I2C_AddrCallback+0x68>)
 800187e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[startPosition], sizeof(uint32_t), I2C_FIRST_FRAME);
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <HAL_I2C_AddrCallback+0x68>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	009a      	lsls	r2, r3, #2
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_I2C_AddrCallback+0x6c>)
 8001888:	18d1      	adds	r1, r2, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	2300      	movs	r3, #0
 800188e:	2204      	movs	r2, #4
 8001890:	f002 f8b8 	bl	8003a04 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200000f6 	.word	0x200000f6
 80018a0:	200000cc 	.word	0x200000cc
 80018a4:	200000f7 	.word	0x200000f7
 80018a8:	20000028 	.word	0x20000028

080018ac <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    rxcount++;
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80018be:	701a      	strb	r2, [r3, #0]
    if (rxcount < RxSIZE)
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b29      	cmp	r3, #41	@ 0x29
 80018c6:	d81a      	bhi.n	80018fe <HAL_I2C_SlaveRxCpltCallback+0x52>
    {
        if (rxcount == RxSIZE - 1)
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b29      	cmp	r3, #41	@ 0x29
 80018ce:	d10b      	bne.n	80018e8 <HAL_I2C_SlaveRxCpltCallback+0x3c>
        {
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_LAST_FRAME);
 80018d0:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	001a      	movs	r2, r3
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80018d8:	18d1      	adds	r1, r2, r3
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f002 f94f 	bl	8003b84 <HAL_I2C_Slave_Seq_Receive_IT>
 80018e6:	e00a      	b.n	80018fe <HAL_I2C_SlaveRxCpltCallback+0x52>
        }
        else
        {
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_NEXT_FRAME);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80018f0:	18d1      	adds	r1, r2, r3
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	045b      	lsls	r3, r3, #17
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f002 f943 	bl	8003b84 <HAL_I2C_Slave_Seq_Receive_IT>
        }
    }

    if (rxcount == RxSIZE)
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b2a      	cmp	r3, #42	@ 0x2a
 8001904:	d101      	bne.n	800190a <HAL_I2C_SlaveRxCpltCallback+0x5e>
    {
        process_data();  // Process received data
 8001906:	f7ff fea1 	bl	800164c <process_data>
    }
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	200000f6 	.word	0x200000f6
 8001918:	200000cc 	.word	0x200000cc

0800191c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f002 fab3 	bl	8003e92 <HAL_I2C_GetError>
 800192c:	0003      	movs	r3, r0
 800192e:	60fb      	str	r3, [r7, #12]
    if (errorcode == HAL_I2C_ERROR_AF)  // Acknowledge failure
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b04      	cmp	r3, #4
 8001934:	d102      	bne.n	800193c <HAL_I2C_ErrorCallback+0x20>
    {
        // Process the received data in case of an ACK failure
        process_data();
 8001936:	f7ff fe89 	bl	800164c <process_data>
 800193a:	e013      	b.n	8001964 <HAL_I2C_ErrorCallback+0x48>
    }
    else if (errorcode == HAL_I2C_ERROR_BERR)  // Bus error
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d110      	bne.n	8001964 <HAL_I2C_ErrorCallback+0x48>
    {
        HAL_I2C_DeInit(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f002 f82d 	bl	80039a4 <HAL_I2C_DeInit>
        HAL_I2C_Init(hi2c);  // Reinitialize the I2C
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f001 ff83 	bl	8003858 <HAL_I2C_Init>
        memset(RxData, '\0', RxSIZE);  // Reset the Rx buffer
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <HAL_I2C_ErrorCallback+0x58>)
 8001954:	222a      	movs	r2, #42	@ 0x2a
 8001956:	2100      	movs	r1, #0
 8001958:	0018      	movs	r0, r3
 800195a:	f004 fa79 	bl	8005e50 <memset>
        rxcount = 0;  // Reset the count
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_I2C_ErrorCallback+0x5c>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    }

    HAL_I2C_EnableListen_IT(hi2c);  // Re-enable listen mode
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f002 f9ce 	bl	8003d08 <HAL_I2C_EnableListen_IT>
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000cc 	.word	0x200000cc
 8001978:	200000f6 	.word	0x200000f6

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 fd95 	bl	80024b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 fa03 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198a:	f000 fb63 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 800198e:	f000 fb43 	bl	8002018 <MX_DMA_Init>
  MX_ADC_Init();
 8001992:	f000 fa5b 	bl	8001e4c <MX_ADC_Init>
  MX_I2C1_Init();
 8001996:	f000 fb0f 	bl	8001fb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)		//L we'll call this inside the main function
 800199a:	4beb      	ldr	r3, [pc, #940]	@ (8001d48 <main+0x3cc>)
 800199c:	0018      	movs	r0, r3
 800199e:	f002 f9b3 	bl	8003d08 <HAL_I2C_EnableListen_IT>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <main+0x2e>
    {						//where it can check any incoming requests by master
  	  Error_Handler();
 80019a6:	f000 fbfb 	bl	80021a0 <Error_Handler>
//    /* USER CODE BEGIN 3 */
//  }

  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc, ADC_Reads, 8);
 80019aa:	49e8      	ldr	r1, [pc, #928]	@ (8001d4c <main+0x3d0>)
 80019ac:	4be8      	ldr	r3, [pc, #928]	@ (8001d50 <main+0x3d4>)
 80019ae:	2208      	movs	r2, #8
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 ff45 	bl	8002840 <HAL_ADC_Start_DMA>
	      HAL_Delay(1); // Short delay to allow for sampling
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 fdde 	bl	8002578 <HAL_Delay>

	      for (int i = 0; i < 8; i++) {
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e0cd      	b.n	8001b5e <main+0x1e2>
	          uint32_t current_sample = ADC_Reads[i];
 80019c2:	4be2      	ldr	r3, [pc, #904]	@ (8001d4c <main+0x3d0>)
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	58d3      	ldr	r3, [r2, r3]
 80019ca:	607b      	str	r3, [r7, #4]
	          // Update maximum value if the current sample is greater than the previous maximum
			  if (current_sample > max_value[i]) {
 80019cc:	4be1      	ldr	r3, [pc, #900]	@ (8001d54 <main+0x3d8>)
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	58d3      	ldr	r3, [r2, r3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d904      	bls.n	80019e4 <main+0x68>
				  max_value[i] = current_sample;
 80019da:	4bde      	ldr	r3, [pc, #888]	@ (8001d54 <main+0x3d8>)
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	50d1      	str	r1, [r2, r3]
			  }
			  // Store the maximum value in I2C_REGISTERS_2[i + 32]
//			  I2C_REGISTERS[i + 32] = max_value[i]*0.001345219;
			  I2C_REGISTERS[i + 32] = (uint32_t)(max_value[i] * 1748.879);
 80019e4:	4bdb      	ldr	r3, [pc, #876]	@ (8001d54 <main+0x3d8>)
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	58d3      	ldr	r3, [r2, r3]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fc83 	bl	80012f8 <__aeabi_ui2d>
 80019f2:	4ad9      	ldr	r2, [pc, #868]	@ (8001d58 <main+0x3dc>)
 80019f4:	4bd9      	ldr	r3, [pc, #868]	@ (8001d5c <main+0x3e0>)
 80019f6:	f7fe fddf 	bl	80005b8 <__aeabi_dmul>
 80019fa:	0002      	movs	r2, r0
 80019fc:	000b      	movs	r3, r1
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	3120      	adds	r1, #32
 8001a02:	000c      	movs	r4, r1
 8001a04:	0010      	movs	r0, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	f7fe fc0a 	bl	8000220 <__aeabi_d2uiz>
 8001a0c:	0001      	movs	r1, r0
 8001a0e:	4bd4      	ldr	r3, [pc, #848]	@ (8001d60 <main+0x3e4>)
 8001a10:	00a2      	lsls	r2, r4, #2
 8001a12:	50d1      	str	r1, [r2, r3]
	          // If current sample is 0, and not currently sampling, reset the register to 0
	          if (current_sample == 0) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d130      	bne.n	8001a7c <main+0x100>
	        	  zero_count[i]++;
 8001a1a:	4bd2      	ldr	r3, [pc, #840]	@ (8001d64 <main+0x3e8>)
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	5ad3      	ldrh	r3, [r2, r3]
 8001a22:	3301      	adds	r3, #1
 8001a24:	b299      	uxth	r1, r3
 8001a26:	4bcf      	ldr	r3, [pc, #828]	@ (8001d64 <main+0x3e8>)
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	52d1      	strh	r1, [r2, r3]
	        	  if (zero_count[i] > 5) { // Adjust threshold as needed for continuous zero detection
 8001a2e:	4bcd      	ldr	r3, [pc, #820]	@ (8001d64 <main+0x3e8>)
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	0052      	lsls	r2, r2, #1
 8001a34:	5ad3      	ldrh	r3, [r2, r3]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d90b      	bls.n	8001a52 <main+0xd6>
						  max_value[i] = 0; // Reset max value to zero if zeros are continuous
 8001a3a:	4bc6      	ldr	r3, [pc, #792]	@ (8001d54 <main+0x3d8>)
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	2100      	movs	r1, #0
 8001a42:	50d1      	str	r1, [r2, r3]
						  I2C_REGISTERS[i + 32] = 0; // Also reset register to zero
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3320      	adds	r3, #32
 8001a48:	001a      	movs	r2, r3
 8001a4a:	4bc5      	ldr	r3, [pc, #788]	@ (8001d60 <main+0x3e4>)
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	2100      	movs	r1, #0
 8001a50:	50d1      	str	r1, [r2, r3]
					  }
	              I2C_REGISTERS[i] = 0; // Set register to 0
 8001a52:	4bc3      	ldr	r3, [pc, #780]	@ (8001d60 <main+0x3e4>)
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	2100      	movs	r1, #0
 8001a5a:	50d1      	str	r1, [r2, r3]
//	              I2C_REGISTERS[i + 32] = 0; // Set maximum value register to 0
	              sampling[i] = false; // Reset the sampling state
 8001a5c:	4ac2      	ldr	r2, [pc, #776]	@ (8001d68 <main+0x3ec>)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
	              sample_sum[i] = 0; // Reset sum for averaging
 8001a66:	4bc1      	ldr	r3, [pc, #772]	@ (8001d6c <main+0x3f0>)
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	50d1      	str	r1, [r2, r3]
	              sample_count[i] = 0; // Reset count for averaging
 8001a70:	4bbf      	ldr	r3, [pc, #764]	@ (8001d70 <main+0x3f4>)
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	0052      	lsls	r2, r2, #1
 8001a76:	2100      	movs	r1, #0
 8001a78:	52d1      	strh	r1, [r2, r3]
 8001a7a:	e06d      	b.n	8001b58 <main+0x1dc>
//	              max_value[i] = 0; // Reset max value for the next signal cycle
	          } else {
	        	  zero_count[i] = 0; // Reset zero count when a non-zero sample is detected
 8001a7c:	4bb9      	ldr	r3, [pc, #740]	@ (8001d64 <main+0x3e8>)
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	0052      	lsls	r2, r2, #1
 8001a82:	2100      	movs	r1, #0
 8001a84:	52d1      	strh	r1, [r2, r3]
	              // Check for the start of sampling
	              if (!sampling[i]) {
 8001a86:	4ab8      	ldr	r2, [pc, #736]	@ (8001d68 <main+0x3ec>)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	18d3      	adds	r3, r2, r3
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4053      	eors	r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <main+0x13a>
	                  sampling[i] = true; // Start sampling
 8001a98:	4ab3      	ldr	r2, [pc, #716]	@ (8001d68 <main+0x3ec>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	18d3      	adds	r3, r2, r3
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
	                  sample_sum[i] = 0; // Reset sum for new samples
 8001aa2:	4bb2      	ldr	r3, [pc, #712]	@ (8001d6c <main+0x3f0>)
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	50d1      	str	r1, [r2, r3]
	                  sample_count[i] = 0; // Reset count for new samples
 8001aac:	4bb0      	ldr	r3, [pc, #704]	@ (8001d70 <main+0x3f4>)
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	52d1      	strh	r1, [r2, r3]
//	                  max_value[i] = current_sample; // Initialize max with the first sample
	              }

	              if (sampling[i]) {
 8001ab6:	4aac      	ldr	r2, [pc, #688]	@ (8001d68 <main+0x3ec>)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	18d3      	adds	r3, r2, r3
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d04a      	beq.n	8001b58 <main+0x1dc>
	                  // Accumulate samples for averaging
	                  sample_sum[i] += current_sample;
 8001ac2:	4baa      	ldr	r3, [pc, #680]	@ (8001d6c <main+0x3f0>)
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	58d2      	ldr	r2, [r2, r3]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	18d1      	adds	r1, r2, r3
 8001ace:	4ba7      	ldr	r3, [pc, #668]	@ (8001d6c <main+0x3f0>)
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	50d1      	str	r1, [r2, r3]
	                  sample_count[i]++;
 8001ad6:	4ba6      	ldr	r3, [pc, #664]	@ (8001d70 <main+0x3f4>)
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	0052      	lsls	r2, r2, #1
 8001adc:	5ad3      	ldrh	r3, [r2, r3]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b299      	uxth	r1, r3
 8001ae2:	4ba3      	ldr	r3, [pc, #652]	@ (8001d70 <main+0x3f4>)
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	0052      	lsls	r2, r2, #1
 8001ae8:	52d1      	strh	r1, [r2, r3]
	                  I2C_REGISTERS[i] = current_sample;
 8001aea:	4b9d      	ldr	r3, [pc, #628]	@ (8001d60 <main+0x3e4>)
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	50d1      	str	r1, [r2, r3]

	                  // Check for falling edge zero crossing to stop sampling
	                  if (current_sample == 0) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12e      	bne.n	8001b58 <main+0x1dc>
	                      sampling[i] = false;
 8001afa:	4a9b      	ldr	r2, [pc, #620]	@ (8001d68 <main+0x3ec>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	18d3      	adds	r3, r2, r3
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]

	                      // Calculate average value of the half-wave
	                      if (sample_count[i] > 0) {
 8001b04:	4b9a      	ldr	r3, [pc, #616]	@ (8001d70 <main+0x3f4>)
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	0052      	lsls	r2, r2, #1
 8001b0a:	5ad3      	ldrh	r3, [r2, r3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d019      	beq.n	8001b44 <main+0x1c8>
	                          average_value[i] = (float)sample_sum[i] / sample_count[i];
 8001b10:	4b96      	ldr	r3, [pc, #600]	@ (8001d6c <main+0x3f0>)
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	58d3      	ldr	r3, [r2, r3]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7fe fd0b 	bl	8000534 <__aeabi_ui2f>
 8001b1e:	1c04      	adds	r4, r0, #0
 8001b20:	4b93      	ldr	r3, [pc, #588]	@ (8001d70 <main+0x3f4>)
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	5ad3      	ldrh	r3, [r2, r3]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe fcb7 	bl	800049c <__aeabi_i2f>
 8001b2e:	1c03      	adds	r3, r0, #0
 8001b30:	1c19      	adds	r1, r3, #0
 8001b32:	1c20      	adds	r0, r4, #0
 8001b34:	f7fe fb92 	bl	800025c <__aeabi_fdiv>
 8001b38:	1c03      	adds	r3, r0, #0
 8001b3a:	1c19      	adds	r1, r3, #0
 8001b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001d74 <main+0x3f8>)
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	50d1      	str	r1, [r2, r3]
	                          // For example, if you want to store it in index 8 for each channel:
//	                           I2C_REGISTERS[i] = (uint32_t)average_value[i];
	                      }

	                      // Reset for the next half-sine wave cycle
	                      sample_sum[i] = 0;
 8001b44:	4b89      	ldr	r3, [pc, #548]	@ (8001d6c <main+0x3f0>)
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	50d1      	str	r1, [r2, r3]
	                      sample_count[i] = 0;
 8001b4e:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <main+0x3f4>)
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	2100      	movs	r1, #0
 8001b56:	52d1      	strh	r1, [r2, r3]
	      for (int i = 0; i < 8; i++) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	dc00      	bgt.n	8001b66 <main+0x1ea>
 8001b64:	e72d      	b.n	80019c2 <main+0x46>
	                  }
	              }
	          }
	      }
	      // Update digital input feedback values to I2C registers 16-23
	          I2C_REGISTERS[16] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	4a83      	ldr	r2, [pc, #524]	@ (8001d78 <main+0x3fc>)
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	0010      	movs	r0, r2
 8001b70:	f001 fe38 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001b74:	0003      	movs	r3, r0
 8001b76:	001a      	movs	r2, r3
 8001b78:	4b79      	ldr	r3, [pc, #484]	@ (8001d60 <main+0x3e4>)
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
	          I2C_REGISTERS[17] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4a7d      	ldr	r2, [pc, #500]	@ (8001d78 <main+0x3fc>)
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f001 fe2d 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	4b74      	ldr	r3, [pc, #464]	@ (8001d60 <main+0x3e4>)
 8001b90:	645a      	str	r2, [r3, #68]	@ 0x44
	          I2C_REGISTERS[18] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <main+0x400>)
 8001b94:	2102      	movs	r1, #2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f001 fe24 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d60 <main+0x3e4>)
 8001ba2:	649a      	str	r2, [r3, #72]	@ 0x48
	          I2C_REGISTERS[19] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0);
 8001ba4:	4b75      	ldr	r3, [pc, #468]	@ (8001d7c <main+0x400>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f001 fe1b 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d60 <main+0x3e4>)
 8001bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
	          I2C_REGISTERS[20] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	4a71      	ldr	r2, [pc, #452]	@ (8001d80 <main+0x404>)
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	f001 fe10 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	4b65      	ldr	r3, [pc, #404]	@ (8001d60 <main+0x3e4>)
 8001bca:	651a      	str	r2, [r3, #80]	@ 0x50
	          I2C_REGISTERS[21] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	005a      	lsls	r2, r3, #1
 8001bd0:	2390      	movs	r3, #144	@ 0x90
 8001bd2:	05db      	lsls	r3, r3, #23
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f001 fe04 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	001a      	movs	r2, r3
 8001be0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d60 <main+0x3e4>)
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54
	          I2C_REGISTERS[22] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	009a      	lsls	r2, r3, #2
 8001be8:	2390      	movs	r3, #144	@ 0x90
 8001bea:	05db      	lsls	r3, r3, #23
 8001bec:	0011      	movs	r1, r2
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f001 fdf8 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <main+0x3e4>)
 8001bfa:	659a      	str	r2, [r3, #88]	@ 0x58
	          I2C_REGISTERS[23] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	00da      	lsls	r2, r3, #3
 8001c00:	2390      	movs	r3, #144	@ 0x90
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f001 fdec 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	001a      	movs	r2, r3
 8001c10:	4b53      	ldr	r3, [pc, #332]	@ (8001d60 <main+0x3e4>)
 8001c12:	65da      	str	r2, [r3, #92]	@ 0x5c
//      }

      // Read the button states (registers 24-31)


      currentButtonState[0] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);   // PF7
 8001c14:	4b59      	ldr	r3, [pc, #356]	@ (8001d7c <main+0x400>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f001 fde3 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	001a      	movs	r2, r3
 8001c22:	4b58      	ldr	r3, [pc, #352]	@ (8001d84 <main+0x408>)
 8001c24:	601a      	str	r2, [r3, #0]
      currentButtonState[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);  // PA15
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	021a      	lsls	r2, r3, #8
 8001c2a:	2390      	movs	r3, #144	@ 0x90
 8001c2c:	05db      	lsls	r3, r3, #23
 8001c2e:	0011      	movs	r1, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	f001 fdd7 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c36:	0003      	movs	r3, r0
 8001c38:	001a      	movs	r2, r3
 8001c3a:	4b52      	ldr	r3, [pc, #328]	@ (8001d84 <main+0x408>)
 8001c3c:	605a      	str	r2, [r3, #4]
      currentButtonState[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);   // PB3
 8001c3e:	4b50      	ldr	r3, [pc, #320]	@ (8001d80 <main+0x404>)
 8001c40:	2108      	movs	r1, #8
 8001c42:	0018      	movs	r0, r3
 8001c44:	f001 fdce 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d84 <main+0x408>)
 8001c4e:	609a      	str	r2, [r3, #8]
      currentButtonState[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);   // PB4
 8001c50:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <main+0x404>)
 8001c52:	2110      	movs	r1, #16
 8001c54:	0018      	movs	r0, r3
 8001c56:	f001 fdc5 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	4b49      	ldr	r3, [pc, #292]	@ (8001d84 <main+0x408>)
 8001c60:	60da      	str	r2, [r3, #12]
      currentButtonState[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);   // PB5
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <main+0x404>)
 8001c64:	2120      	movs	r1, #32
 8001c66:	0018      	movs	r0, r3
 8001c68:	f001 fdbc 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	001a      	movs	r2, r3
 8001c70:	4b44      	ldr	r3, [pc, #272]	@ (8001d84 <main+0x408>)
 8001c72:	611a      	str	r2, [r3, #16]
      currentButtonState[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);   // PB8
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4a41      	ldr	r2, [pc, #260]	@ (8001d80 <main+0x404>)
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f001 fdb1 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c82:	0003      	movs	r3, r0
 8001c84:	001a      	movs	r2, r3
 8001c86:	4b3f      	ldr	r3, [pc, #252]	@ (8001d84 <main+0x408>)
 8001c88:	615a      	str	r2, [r3, #20]
      currentButtonState[7] =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);   //
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d80 <main+0x404>)
 8001c90:	0019      	movs	r1, r3
 8001c92:	0010      	movs	r0, r2
 8001c94:	f001 fda6 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <main+0x408>)
 8001c9e:	61da      	str	r2, [r3, #28]
      currentButtonState[6] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);  // PC13
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	4a34      	ldr	r2, [pc, #208]	@ (8001d78 <main+0x3fc>)
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	0010      	movs	r0, r2
 8001caa:	f001 fd9b 	bl	80037e4 <HAL_GPIO_ReadPin>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <main+0x408>)
 8001cb4:	619a      	str	r2, [r3, #24]

      // Update I2C_REGISTERS 24-31 with the current button states
      memcpy(&I2C_REGISTERS[24], currentButtonState, 8 * sizeof(uint32_t));
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <main+0x3e4>)
 8001cb8:	4a32      	ldr	r2, [pc, #200]	@ (8001d84 <main+0x408>)
 8001cba:	3360      	adds	r3, #96	@ 0x60
 8001cbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cc2:	c313      	stmia	r3!, {r0, r1, r4}
 8001cc4:	ca03      	ldmia	r2!, {r0, r1}
 8001cc6:	c303      	stmia	r3!, {r0, r1}

      // Toggle LEDs based on button states
      for (int i = 0; i < 8; i++) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e035      	b.n	8001d3a <main+0x3be>
          // Check if the button was previously HIGH and is now LOW (pressed)
          if (currentButtonState[i] == GPIO_PIN_RESET && lastButtonState[i] == GPIO_PIN_SET) {
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <main+0x408>)
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	58d3      	ldr	r3, [r2, r3]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d124      	bne.n	8001d24 <main+0x3a8>
 8001cda:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <main+0x40c>)
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	58d3      	ldr	r3, [r2, r3]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d11e      	bne.n	8001d24 <main+0x3a8>
              // Toggle the corresponding LED in registers 8-15
              I2C_REGISTERS[8 + i] ^= 1; // Toggle the LED state (1 for ON, 0 for OFF)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3308      	adds	r3, #8
 8001cea:	001a      	movs	r2, r3
 8001cec:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <main+0x3e4>)
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	58d3      	ldr	r3, [r2, r3]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4059      	eors	r1, r3
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <main+0x3e4>)
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	50d1      	str	r1, [r2, r3]
              // Update the physical state of the LEDs
//              HAL_GPIO_WritePin(GPIOB, (GPIO_PIN_0 << i), I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
              HAL_GPIO_WritePin(GPIOB, ledPins[i], I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <main+0x410>)
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	0052      	lsls	r2, r2, #1
 8001d06:	5ad1      	ldrh	r1, [r2, r3]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <main+0x3e4>)
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	58d3      	ldr	r3, [r2, r3]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	4193      	sbcs	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <main+0x404>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f001 fd7d 	bl	800381e <HAL_GPIO_WritePin>
          }
          lastButtonState[i] = currentButtonState[i]; // Update last button state
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <main+0x408>)
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	58d1      	ldr	r1, [r2, r3]
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <main+0x40c>)
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	50d1      	str	r1, [r2, r3]
      for (int i = 0; i < 8; i++) {
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	ddc6      	ble.n	8001cce <main+0x352>
      }

      HAL_Delay(100);  // Delay of 100ms between reads
 8001d40:	2064      	movs	r0, #100	@ 0x64
 8001d42:	f000 fc19 	bl	8002578 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc, ADC_Reads, 8);
 8001d46:	e630      	b.n	80019aa <main+0x2e>
 8001d48:	2000017c 	.word	0x2000017c
 8001d4c:	200001d0 	.word	0x200001d0
 8001d50:	200000f8 	.word	0x200000f8
 8001d54:	20000268 	.word	0x20000268
 8001d58:	189374bc 	.word	0x189374bc
 8001d5c:	409b5384 	.word	0x409b5384
 8001d60:	20000028 	.word	0x20000028
 8001d64:	20000288 	.word	0x20000288
 8001d68:	20000260 	.word	0x20000260
 8001d6c:	20000210 	.word	0x20000210
 8001d70:	20000230 	.word	0x20000230
 8001d74:	20000240 	.word	0x20000240
 8001d78:	48000800 	.word	0x48000800
 8001d7c:	48001400 	.word	0x48001400
 8001d80:	48000400 	.word	0x48000400
 8001d84:	20000298 	.word	0x20000298
 8001d88:	200001f0 	.word	0x200001f0
 8001d8c:	08005f3c 	.word	0x08005f3c

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b095      	sub	sp, #84	@ 0x54
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	2420      	movs	r4, #32
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	2330      	movs	r3, #48	@ 0x30
 8001d9e:	001a      	movs	r2, r3
 8001da0:	2100      	movs	r1, #0
 8001da2:	f004 f855 	bl	8005e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da6:	2310      	movs	r3, #16
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	0018      	movs	r0, r3
 8001dac:	2310      	movs	r3, #16
 8001dae:	001a      	movs	r2, r3
 8001db0:	2100      	movs	r1, #0
 8001db2:	f004 f84d 	bl	8005e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db6:	003b      	movs	r3, r7
 8001db8:	0018      	movs	r0, r3
 8001dba:	2310      	movs	r3, #16
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	f004 f846 	bl	8005e50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001dc4:	0021      	movs	r1, r4
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2212      	movs	r2, #18
 8001dca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	2201      	movs	r2, #1
 8001dd0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	2210      	movs	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	2210      	movs	r2, #16
 8001de2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dea:	187b      	adds	r3, r7, r1
 8001dec:	0018      	movs	r0, r3
 8001dee:	f003 fb23 	bl	8005438 <HAL_RCC_OscConfig>
 8001df2:	1e03      	subs	r3, r0, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001df6:	f000 f9d3 	bl	80021a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfa:	2110      	movs	r1, #16
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2207      	movs	r2, #7
 8001e00:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2100      	movs	r1, #0
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f003 fe27 	bl	8005a6c <HAL_RCC_ClockConfig>
 8001e1e:	1e03      	subs	r3, r0, #0
 8001e20:	d001      	beq.n	8001e26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e22:	f000 f9bd 	bl	80021a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e26:	003b      	movs	r3, r7
 8001e28:	2220      	movs	r2, #32
 8001e2a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e2c:	003b      	movs	r3, r7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e32:	003b      	movs	r3, r7
 8001e34:	0018      	movs	r0, r3
 8001e36:	f003 ff3d 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001e3e:	f000 f9af 	bl	80021a0 <Error_Handler>
  }
}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b015      	add	sp, #84	@ 0x54
 8001e48:	bd90      	pop	{r4, r7, pc}
	...

08001e4c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	0018      	movs	r0, r3
 8001e56:	230c      	movs	r3, #12
 8001e58:	001a      	movs	r2, r3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f003 fff8 	bl	8005e50 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001e60:	4b53      	ldr	r3, [pc, #332]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e62:	4a54      	ldr	r2, [pc, #336]	@ (8001fb4 <MX_ADC_Init+0x168>)
 8001e64:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e66:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001e6c:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e72:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001e78:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e80:	2204      	movs	r2, #4
 8001e82:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001e84:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001e8a:	4b49      	ldr	r3, [pc, #292]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001e90:	4b47      	ldr	r3, [pc, #284]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e96:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e9c:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001e9e:	22c2      	movs	r2, #194	@ 0xc2
 8001ea0:	32ff      	adds	r2, #255	@ 0xff
 8001ea2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ea4:	4b42      	ldr	r3, [pc, #264]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001eac:	2224      	movs	r2, #36	@ 0x24
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 fb80 	bl	80025c0 <HAL_ADC_Init>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001ec4:	f000 f96c 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	0152      	lsls	r2, r2, #5
 8001ed4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2280      	movs	r2, #128	@ 0x80
 8001eda:	0552      	lsls	r2, r2, #21
 8001edc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ede:	1d3a      	adds	r2, r7, #4
 8001ee0:	4b33      	ldr	r3, [pc, #204]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 fd45 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001eee:	f000 f957 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ef8:	1d3a      	adds	r2, r7, #4
 8001efa:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001efc:	0011      	movs	r1, r2
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 fd38 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001f04:	1e03      	subs	r3, r0, #0
 8001f06:	d001      	beq.n	8001f0c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001f08:	f000 f94a 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2202      	movs	r2, #2
 8001f10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f12:	1d3a      	adds	r2, r7, #4
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fd2b 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d001      	beq.n	8001f26 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001f22:	f000 f93d 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2203      	movs	r2, #3
 8001f2a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f2c:	1d3a      	adds	r2, r7, #4
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 fd1e 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001f3c:	f000 f930 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2204      	movs	r2, #4
 8001f44:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f46:	1d3a      	adds	r2, r7, #4
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 fd11 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001f52:	1e03      	subs	r3, r0, #0
 8001f54:	d001      	beq.n	8001f5a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001f56:	f000 f923 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f60:	1d3a      	adds	r2, r7, #4
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001f64:	0011      	movs	r1, r2
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 fd04 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8001f70:	f000 f916 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2206      	movs	r2, #6
 8001f78:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f7a:	1d3a      	adds	r2, r7, #4
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fcf7 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8001f8a:	f000 f909 	bl	80021a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f94:	1d3a      	adds	r2, r7, #4
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_ADC_Init+0x164>)
 8001f98:	0011      	movs	r1, r2
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fcea 	bl	8002974 <HAL_ADC_ConfigChannel>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8001fa4:	f000 f8fc 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200000f8 	.word	0x200000f8
 8001fb4:	40012400 	.word	0x40012400

08001fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fbe:	4a14      	ldr	r2, [pc, #80]	@ (8002010 <MX_I2C1_Init+0x58>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fc4:	4a13      	ldr	r2, [pc, #76]	@ (8002014 <MX_I2C1_Init+0x5c>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8001fc8:	4b10      	ldr	r3, [pc, #64]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fca:	2224      	movs	r2, #36	@ 0x24
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fd6:	2280      	movs	r2, #128	@ 0x80
 8001fd8:	0212      	lsls	r2, r2, #8
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0x45<<1;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fde:	228a      	movs	r2, #138	@ 0x8a
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	0312      	lsls	r2, r2, #12
 8001fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_I2C1_Init+0x54>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <MX_I2C1_Init+0x54>)
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f001 fc2d 	bl	8003858 <HAL_I2C_Init>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d001      	beq.n	8002006 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8002002:	f000 f8cd 	bl	80021a0 <Error_Handler>
//  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000017c 	.word	0x2000017c
 8002010:	40005400 	.word	0x40005400
 8002014:	2000090e 	.word	0x2000090e

08002018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <MX_DMA_Init+0x38>)
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <MX_DMA_Init+0x38>)
 8002024:	2101      	movs	r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_DMA_Init+0x38>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2009      	movs	r0, #9
 800203c:	f000 ff66 	bl	8002f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002040:	2009      	movs	r0, #9
 8002042:	f000 ff78 	bl	8002f36 <HAL_NVIC_EnableIRQ>

}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b002      	add	sp, #8
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40021000 	.word	0x40021000

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b08b      	sub	sp, #44	@ 0x2c
 8002058:	af00      	add	r7, sp, #0
  // Enable the required GPIO Ports Clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b4c      	ldr	r3, [pc, #304]	@ (800218c <MX_GPIO_Init+0x138>)
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <MX_GPIO_Init+0x138>)
 8002060:	2180      	movs	r1, #128	@ 0x80
 8002062:	0289      	lsls	r1, r1, #10
 8002064:	430a      	orrs	r2, r1
 8002066:	615a      	str	r2, [r3, #20]
 8002068:	4b48      	ldr	r3, [pc, #288]	@ (800218c <MX_GPIO_Init+0x138>)
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	4b45      	ldr	r3, [pc, #276]	@ (800218c <MX_GPIO_Init+0x138>)
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	4b44      	ldr	r3, [pc, #272]	@ (800218c <MX_GPIO_Init+0x138>)
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	02c9      	lsls	r1, r1, #11
 8002080:	430a      	orrs	r2, r1
 8002082:	615a      	str	r2, [r3, #20]
 8002084:	4b41      	ldr	r3, [pc, #260]	@ (800218c <MX_GPIO_Init+0x138>)
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	02db      	lsls	r3, r3, #11
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b3e      	ldr	r3, [pc, #248]	@ (800218c <MX_GPIO_Init+0x138>)
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <MX_GPIO_Init+0x138>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0309      	lsls	r1, r1, #12
 800209c:	430a      	orrs	r2, r1
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	4b3a      	ldr	r3, [pc, #232]	@ (800218c <MX_GPIO_Init+0x138>)
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	031b      	lsls	r3, r3, #12
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ae:	4b37      	ldr	r3, [pc, #220]	@ (800218c <MX_GPIO_Init+0x138>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <MX_GPIO_Init+0x138>)
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	03c9      	lsls	r1, r1, #15
 80020b8:	430a      	orrs	r2, r1
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	4b33      	ldr	r3, [pc, #204]	@ (800218c <MX_GPIO_Init+0x138>)
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	03db      	lsls	r3, r3, #15
 80020c4:	4013      	ands	r3, r2
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	2414      	movs	r4, #20
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	0018      	movs	r0, r3
 80020d0:	2314      	movs	r3, #20
 80020d2:	001a      	movs	r2, r3
 80020d4:	2100      	movs	r1, #0
 80020d6:	f003 febb 	bl	8005e50 <memset>

  // Configure PA0-PA7 as Analog Inputs
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	22ff      	movs	r2, #255	@ 0xff
 80020de:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	2203      	movs	r2, #3
 80020e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	193a      	adds	r2, r7, r4
 80020ee:	2390      	movs	r3, #144	@ 0x90
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f001 f935 	bl	8003364 <HAL_GPIO_Init>

  // Configure PB0, PB1, PB2, PB10, PB11, PB12, PB13, PB14 as Output Pins
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 |
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	4a24      	ldr	r2, [pc, #144]	@ (8002190 <MX_GPIO_Init+0x13c>)
 80020fe:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002100:	193b      	adds	r3, r7, r4
 8002102:	2201      	movs	r2, #1
 8002104:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	193b      	adds	r3, r7, r4
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	193b      	adds	r3, r7, r4
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	193b      	adds	r3, r7, r4
 8002114:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <MX_GPIO_Init+0x140>)
 8002116:	0019      	movs	r1, r3
 8002118:	0010      	movs	r0, r2
 800211a:	f001 f923 	bl	8003364 <HAL_GPIO_Init>

  // Configure PC15, PC14, PF1, PF0, PB15, PA8, PA9, PA10 as Digital Input Pins with Pull-Down
  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14;
 800211e:	0021      	movs	r1, r4
 8002120:	187b      	adds	r3, r7, r1
 8002122:	22c0      	movs	r2, #192	@ 0xc0
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002128:	000c      	movs	r4, r1
 800212a:	193b      	adds	r3, r7, r4
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Set pull-down for input pins
 8002130:	193b      	adds	r3, r7, r4
 8002132:	2202      	movs	r2, #2
 8002134:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	193b      	adds	r3, r7, r4
 8002138:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <MX_GPIO_Init+0x144>)
 800213a:	0019      	movs	r1, r3
 800213c:	0010      	movs	r0, r2
 800213e:	f001 f911 	bl	8003364 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_0;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2203      	movs	r2, #3
 8002146:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002148:	193b      	adds	r3, r7, r4
 800214a:	4a14      	ldr	r2, [pc, #80]	@ (800219c <MX_GPIO_Init+0x148>)
 800214c:	0019      	movs	r1, r3
 800214e:	0010      	movs	r0, r2
 8002150:	f001 f908 	bl	8003364 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002154:	0021      	movs	r1, r4
 8002156:	187b      	adds	r3, r7, r1
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	0212      	lsls	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	000c      	movs	r4, r1
 8002160:	187b      	adds	r3, r7, r1
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <MX_GPIO_Init+0x140>)
 8002164:	0019      	movs	r1, r3
 8002166:	0010      	movs	r0, r2
 8002168:	f001 f8fc 	bl	8003364 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 800216c:	0021      	movs	r1, r4
 800216e:	187b      	adds	r3, r7, r1
 8002170:	22e0      	movs	r2, #224	@ 0xe0
 8002172:	00d2      	lsls	r2, r2, #3
 8002174:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	187a      	adds	r2, r7, r1
 8002178:	2390      	movs	r3, #144	@ 0x90
 800217a:	05db      	lsls	r3, r3, #23
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f001 f8f0 	bl	8003364 <HAL_GPIO_Init>
}
 8002184:	46c0      	nop			@ (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b00b      	add	sp, #44	@ 0x2c
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	00007c07 	.word	0x00007c07
 8002194:	48000400 	.word	0x48000400
 8002198:	48000800 	.word	0x48000800
 800219c:	48001400 	.word	0x48001400

080021a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a8:	46c0      	nop			@ (mov r8, r8)
 80021aa:	e7fd      	b.n	80021a8 <Error_Handler+0x8>

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_MspInit+0x44>)
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_MspInit+0x44>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	619a      	str	r2, [r3, #24]
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_MspInit+0x44>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_MspInit+0x44>)
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_MspInit+0x44>)
 80021d0:	2180      	movs	r1, #128	@ 0x80
 80021d2:	0549      	lsls	r1, r1, #21
 80021d4:	430a      	orrs	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_MspInit+0x44>)
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	055b      	lsls	r3, r3, #21
 80021e0:	4013      	ands	r3, r2
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b002      	add	sp, #8
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b08b      	sub	sp, #44	@ 0x2c
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	2414      	movs	r4, #20
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	0018      	movs	r0, r3
 8002202:	2314      	movs	r3, #20
 8002204:	001a      	movs	r2, r3
 8002206:	2100      	movs	r1, #0
 8002208:	f003 fe22 	bl	8005e50 <memset>
  if(hadc->Instance==ADC1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d153      	bne.n	80022be <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002216:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <HAL_ADC_MspInit+0xd8>)
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	4b2c      	ldr	r3, [pc, #176]	@ (80022cc <HAL_ADC_MspInit+0xd8>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0089      	lsls	r1, r1, #2
 8002220:	430a      	orrs	r2, r1
 8002222:	619a      	str	r2, [r3, #24]
 8002224:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <HAL_ADC_MspInit+0xd8>)
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b26      	ldr	r3, [pc, #152]	@ (80022cc <HAL_ADC_MspInit+0xd8>)
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <HAL_ADC_MspInit+0xd8>)
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	0289      	lsls	r1, r1, #10
 800223c:	430a      	orrs	r2, r1
 800223e:	615a      	str	r2, [r3, #20]
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_ADC_MspInit+0xd8>)
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800224e:	193b      	adds	r3, r7, r4
 8002250:	22ff      	movs	r2, #255	@ 0xff
 8002252:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002254:	193b      	adds	r3, r7, r4
 8002256:	2203      	movs	r2, #3
 8002258:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	193a      	adds	r2, r7, r4
 8002262:	2390      	movs	r3, #144	@ 0x90
 8002264:	05db      	lsls	r3, r3, #23
 8002266:	0011      	movs	r1, r2
 8002268:	0018      	movs	r0, r3
 800226a:	f001 f87b 	bl	8003364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 8002270:	4a18      	ldr	r2, [pc, #96]	@ (80022d4 <HAL_ADC_MspInit+0xe0>)
 8002272:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002274:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 8002276:	2200      	movs	r2, #0
 8002278:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 8002288:	2280      	movs	r2, #128	@ 0x80
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80022a2:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 fe73 	bl	8002f90 <HAL_DMA_Init>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80022ae:	f7ff ff77 	bl	80021a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_ADC_MspInit+0xdc>)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b00b      	add	sp, #44	@ 0x2c
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	40012400 	.word	0x40012400
 80022cc:	40021000 	.word	0x40021000
 80022d0:	20000138 	.word	0x20000138
 80022d4:	40020008 	.word	0x40020008

080022d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b08b      	sub	sp, #44	@ 0x2c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	2414      	movs	r4, #20
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	0018      	movs	r0, r3
 80022e6:	2314      	movs	r3, #20
 80022e8:	001a      	movs	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	f003 fdb0 	bl	8005e50 <memset>
  if(hi2c->Instance==I2C1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a20      	ldr	r2, [pc, #128]	@ (8002378 <HAL_I2C_MspInit+0xa0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d139      	bne.n	800236e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_I2C_MspInit+0xa4>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <HAL_I2C_MspInit+0xa4>)
 8002300:	2180      	movs	r1, #128	@ 0x80
 8002302:	02c9      	lsls	r1, r1, #11
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	4b1c      	ldr	r3, [pc, #112]	@ (800237c <HAL_I2C_MspInit+0xa4>)
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	02db      	lsls	r3, r3, #11
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002316:	0021      	movs	r1, r4
 8002318:	187b      	adds	r3, r7, r1
 800231a:	22c0      	movs	r2, #192	@ 0xc0
 800231c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2212      	movs	r2, #18
 8002322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2203      	movs	r2, #3
 800232e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2201      	movs	r2, #1
 8002334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	187b      	adds	r3, r7, r1
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_I2C_MspInit+0xa8>)
 800233a:	0019      	movs	r1, r3
 800233c:	0010      	movs	r0, r2
 800233e:	f001 f811 	bl	8003364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_I2C_MspInit+0xa4>)
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <HAL_I2C_MspInit+0xa4>)
 8002348:	2180      	movs	r1, #128	@ 0x80
 800234a:	0389      	lsls	r1, r1, #14
 800234c:	430a      	orrs	r2, r1
 800234e:	61da      	str	r2, [r3, #28]
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_I2C_MspInit+0xa4>)
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	039b      	lsls	r3, r3, #14
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2017      	movs	r0, #23
 8002364:	f000 fdd2 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002368:	2017      	movs	r0, #23
 800236a:	f000 fde4 	bl	8002f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b00b      	add	sp, #44	@ 0x2c
 8002374:	bd90      	pop	{r4, r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40005400 	.word	0x40005400
 800237c:	40021000 	.word	0x40021000
 8002380:	48000400 	.word	0x48000400

08002384 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_I2C_MspDeInit+0x40>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d112      	bne.n	80023bc <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HAL_I2C_MspDeInit+0x44>)
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_I2C_MspDeInit+0x44>)
 800239c:	490b      	ldr	r1, [pc, #44]	@ (80023cc <HAL_I2C_MspDeInit+0x48>)
 800239e:	400a      	ands	r2, r1
 80023a0:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_I2C_MspDeInit+0x4c>)
 80023a4:	2140      	movs	r1, #64	@ 0x40
 80023a6:	0018      	movs	r0, r3
 80023a8:	f001 f94c 	bl	8003644 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_I2C_MspDeInit+0x4c>)
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	0018      	movs	r0, r3
 80023b2:	f001 f947 	bl	8003644 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 80023b6:	2017      	movs	r0, #23
 80023b8:	f000 fdcd 	bl	8002f56 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40005400 	.word	0x40005400
 80023c8:	40021000 	.word	0x40021000
 80023cc:	ffdfffff 	.word	0xffdfffff
 80023d0:	48000400 	.word	0x48000400

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	e7fd      	b.n	80023d8 <NMI_Handler+0x4>

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	e7fd      	b.n	80023e0 <HardFault_Handler+0x4>

080023e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023e8:	46c0      	nop			@ (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 f8a0 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	46c0      	nop			@ (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <DMA1_Channel1_IRQHandler+0x14>)
 800240e:	0018      	movs	r0, r3
 8002410:	f000 feb1 	bl	8003176 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	20000138 	.word	0x20000138

08002420 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002424:	4b09      	ldr	r3, [pc, #36]	@ (800244c <I2C1_IRQHandler+0x2c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	23e0      	movs	r3, #224	@ 0xe0
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4013      	ands	r3, r2
 8002430:	d004      	beq.n	800243c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <I2C1_IRQHandler+0x2c>)
 8002434:	0018      	movs	r0, r3
 8002436:	f001 fca3 	bl	8003d80 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800243a:	e003      	b.n	8002444 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <I2C1_IRQHandler+0x2c>)
 800243e:	0018      	movs	r0, r3
 8002440:	f001 fc84 	bl	8003d4c <HAL_I2C_EV_IRQHandler>
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	2000017c 	.word	0x2000017c

08002450 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 800245c:	480d      	ldr	r0, [pc, #52]	@ (8002494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800245e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002460:	f7ff fff6 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002464:	480c      	ldr	r0, [pc, #48]	@ (8002498 <LoopForever+0x6>)
  ldr r1, =_edata
 8002466:	490d      	ldr	r1, [pc, #52]	@ (800249c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <LoopForever+0xe>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800247c:	4c0a      	ldr	r4, [pc, #40]	@ (80024a8 <LoopForever+0x16>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800248a:	f003 fce9 	bl	8005e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248e:	f7ff fa75 	bl	800197c <main>

08002492 <LoopForever>:

LoopForever:
    b LoopForever
 8002492:	e7fe      	b.n	8002492 <LoopForever>
   ldr   r0, =_estack
 8002494:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80024a0:	08005f84 	.word	0x08005f84
  ldr r2, =_sbss
 80024a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80024a8:	200002bc 	.word	0x200002bc

080024ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC1_IRQHandler>
	...

080024b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <HAL_Init+0x24>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_Init+0x24>)
 80024ba:	2110      	movs	r1, #16
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f000 f809 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c6:	f7ff fe71 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_InitTick+0x5c>)
 80024e2:	681c      	ldr	r4, [r3, #0]
 80024e4:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <HAL_InitTick+0x60>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	0019      	movs	r1, r3
 80024ea:	23fa      	movs	r3, #250	@ 0xfa
 80024ec:	0098      	lsls	r0, r3, #2
 80024ee:	f7fd fe0b 	bl	8000108 <__udivsi3>
 80024f2:	0003      	movs	r3, r0
 80024f4:	0019      	movs	r1, r3
 80024f6:	0020      	movs	r0, r4
 80024f8:	f7fd fe06 	bl	8000108 <__udivsi3>
 80024fc:	0003      	movs	r3, r0
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fd39 	bl	8002f76 <HAL_SYSTICK_Config>
 8002504:	1e03      	subs	r3, r0, #0
 8002506:	d001      	beq.n	800250c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e00f      	b.n	800252c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d80b      	bhi.n	800252a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	2301      	movs	r3, #1
 8002516:	425b      	negs	r3, r3
 8002518:	2200      	movs	r2, #0
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fcf6 	bl	8002f0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_InitTick+0x64>)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b003      	add	sp, #12
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	20000000 	.word	0x20000000
 8002538:	20000008 	.word	0x20000008
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_IncTick+0x1c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	001a      	movs	r2, r3
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_IncTick+0x20>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	18d2      	adds	r2, r2, r3
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_IncTick+0x20>)
 8002552:	601a      	str	r2, [r3, #0]
}
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	20000008 	.word	0x20000008
 8002560:	200002b8 	.word	0x200002b8

08002564 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b02      	ldr	r3, [pc, #8]	@ (8002574 <HAL_GetTick+0x10>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	200002b8 	.word	0x200002b8

08002578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff fff0 	bl	8002564 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3301      	adds	r3, #1
 8002590:	d005      	beq.n	800259e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <HAL_Delay+0x44>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	001a      	movs	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	189b      	adds	r3, r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	f7ff ffe0 	bl	8002564 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d8f7      	bhi.n	80025a0 <HAL_Delay+0x28>
  {
  }
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	20000008 	.word	0x20000008

080025c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c8:	230f      	movs	r3, #15
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e125      	b.n	800282a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2234      	movs	r2, #52	@ 0x34
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7ff fdfc 	bl	80021f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	2210      	movs	r2, #16
 8002602:	4013      	ands	r3, r2
 8002604:	d000      	beq.n	8002608 <HAL_ADC_Init+0x48>
 8002606:	e103      	b.n	8002810 <HAL_ADC_Init+0x250>
 8002608:	230f      	movs	r3, #15
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d000      	beq.n	8002614 <HAL_ADC_Init+0x54>
 8002612:	e0fd      	b.n	8002810 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800261e:	d000      	beq.n	8002622 <HAL_ADC_Init+0x62>
 8002620:	e0f6      	b.n	8002810 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002626:	4a83      	ldr	r2, [pc, #524]	@ (8002834 <HAL_ADC_Init+0x274>)
 8002628:	4013      	ands	r3, r2
 800262a:	2202      	movs	r2, #2
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d112      	bne.n	8002666 <HAL_ADC_Init+0xa6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	2b01      	cmp	r3, #1
 800264c:	d009      	beq.n	8002662 <HAL_ADC_Init+0xa2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	401a      	ands	r2, r3
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	429a      	cmp	r2, r3
 8002660:	d101      	bne.n	8002666 <HAL_ADC_Init+0xa6>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_ADC_Init+0xa8>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2218      	movs	r2, #24
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	0899      	lsrs	r1, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4964      	ldr	r1, [pc, #400]	@ (8002838 <HAL_ADC_Init+0x278>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7e1b      	ldrb	r3, [r3, #24]
 80026ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e5b      	ldrb	r3, [r3, #25]
 80026b4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e9b      	ldrb	r3, [r3, #26]
 80026bc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80026be:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d002      	beq.n	80026ce <HAL_ADC_Init+0x10e>
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	015b      	lsls	r3, r3, #5
 80026cc:	e000      	b.n	80026d0 <HAL_ADC_Init+0x110>
 80026ce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80026d6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_Init+0x124>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e000      	b.n	80026e6 <HAL_ADC_Init+0x126>
 80026e4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80026e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2124      	movs	r1, #36	@ 0x24
 80026ec:	5c5b      	ldrb	r3, [r3, r1]
 80026ee:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80026f0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7edb      	ldrb	r3, [r3, #27]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d115      	bne.n	800272c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e9b      	ldrb	r3, [r3, #26]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2280      	movs	r2, #128	@ 0x80
 800270c:	0252      	lsls	r2, r2, #9
 800270e:	4313      	orrs	r3, r2
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	e00b      	b.n	800272c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002718:	2220      	movs	r2, #32
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	2201      	movs	r2, #1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	23c2      	movs	r3, #194	@ 0xc2
 8002732:	33ff      	adds	r3, #255	@ 0xff
 8002734:	429a      	cmp	r2, r3
 8002736:	d007      	beq.n	8002748 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002740:	4313      	orrs	r3, r2
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4313      	orrs	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	055b      	lsls	r3, r3, #21
 8002760:	429a      	cmp	r2, r3
 8002762:	d01b      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d017      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	2b02      	cmp	r3, #2
 8002772:	d013      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	2b03      	cmp	r3, #3
 800277a:	d00f      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	2b04      	cmp	r3, #4
 8002782:	d00b      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	2b05      	cmp	r3, #5
 800278a:	d007      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	2b06      	cmp	r3, #6
 8002792:	d003      	beq.n	800279c <HAL_ADC_Init+0x1dc>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	2b07      	cmp	r3, #7
 800279a:	d112      	bne.n	80027c2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2107      	movs	r1, #7
 80027a8:	438a      	bics	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6959      	ldr	r1, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	2207      	movs	r2, #7
 80027b8:	401a      	ands	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	@ (800283c <HAL_ADC_Init+0x27c>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10b      	bne.n	80027ea <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	2203      	movs	r2, #3
 80027de:	4393      	bics	r3, r2
 80027e0:	2201      	movs	r2, #1
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80027e8:	e01c      	b.n	8002824 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	2212      	movs	r2, #18
 80027f0:	4393      	bics	r3, r2
 80027f2:	2210      	movs	r2, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fe:	2201      	movs	r2, #1
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002806:	230f      	movs	r3, #15
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800280e:	e009      	b.n	8002824 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	2210      	movs	r2, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800281c:	230f      	movs	r3, #15
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002824:	230f      	movs	r3, #15
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	781b      	ldrb	r3, [r3, #0]
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	fffffefd 	.word	0xfffffefd
 8002838:	fffe0219 	.word	0xfffe0219
 800283c:	833fffe7 	.word	0x833fffe7

08002840 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2317      	movs	r3, #23
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2204      	movs	r2, #4
 800285c:	4013      	ands	r3, r2
 800285e:	d15e      	bne.n	800291e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2234      	movs	r2, #52	@ 0x34
 8002864:	5c9b      	ldrb	r3, [r3, r2]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_ADC_Start_DMA+0x2e>
 800286a:	2302      	movs	r3, #2
 800286c:	e05e      	b.n	800292c <HAL_ADC_Start_DMA+0xec>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2234      	movs	r2, #52	@ 0x34
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	7e5b      	ldrb	r3, [r3, #25]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d007      	beq.n	800288e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800287e:	2317      	movs	r3, #23
 8002880:	18fc      	adds	r4, r7, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f96b 	bl	8002b60 <ADC_Enable>
 800288a:	0003      	movs	r3, r0
 800288c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800288e:	2317      	movs	r3, #23
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d146      	bne.n	8002926 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <HAL_ADC_Start_DMA+0xf4>)
 800289e:	4013      	ands	r3, r2
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	0052      	lsls	r2, r2, #1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2234      	movs	r2, #52	@ 0x34
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_ADC_Start_DMA+0xf8>)
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	4a1d      	ldr	r2, [pc, #116]	@ (800293c <HAL_ADC_Start_DMA+0xfc>)
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_ADC_Start_DMA+0x100>)
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	221c      	movs	r2, #28
 80028d6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2110      	movs	r1, #16
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3340      	adds	r3, #64	@ 0x40
 8002902:	0019      	movs	r1, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f000 fb8a 	bl	8003020 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2104      	movs	r1, #4
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e003      	b.n	8002926 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800291e:	2317      	movs	r3, #23
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002926:	2317      	movs	r3, #23
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	781b      	ldrb	r3, [r3, #0]
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b007      	add	sp, #28
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	fffff0fe 	.word	0xfffff0fe
 8002938:	08002c69 	.word	0x08002c69
 800293c:	08002d1d 	.word	0x08002d1d
 8002940:	08002d3b 	.word	0x08002d3b

08002944 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	055b      	lsls	r3, r3, #21
 8002992:	429a      	cmp	r2, r3
 8002994:	d011      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x46>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d00d      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x46>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d009      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x46>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d005      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x46>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d001      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x46>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2234      	movs	r2, #52	@ 0x34
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x54>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e0bb      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x1cc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2234      	movs	r2, #52	@ 0x34
 80029cc:	2101      	movs	r1, #1
 80029ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4013      	ands	r3, r2
 80029da:	d000      	beq.n	80029de <HAL_ADC_ConfigChannel+0x6a>
 80029dc:	e09f      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a59      	ldr	r2, [pc, #356]	@ (8002b48 <HAL_ADC_ConfigChannel+0x1d4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x76>
 80029e8:	e077      	b.n	8002ada <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	055b      	lsls	r3, r3, #21
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d037      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d033      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d02f      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d02b      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d027      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d023      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d01f      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	2b07      	cmp	r3, #7
 8002a42:	d01b      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	2107      	movs	r1, #7
 8002a50:	400b      	ands	r3, r1
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d012      	beq.n	8002a7c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2107      	movs	r1, #7
 8002a62:	438a      	bics	r2, r1
 8002a64:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6959      	ldr	r1, [r3, #20]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2207      	movs	r2, #7
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d003      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x118>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b11      	cmp	r3, #17
 8002a8a:	d152      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <HAL_ADC_ConfigChannel+0x1d8>)
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d102      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x12a>
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	e001      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x12e>
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	03db      	lsls	r3, r3, #15
 8002aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b4c <HAL_ADC_ConfigChannel+0x1d8>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d140      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab0:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <HAL_ADC_ConfigChannel+0x1dc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4927      	ldr	r1, [pc, #156]	@ (8002b54 <HAL_ADC_ConfigChannel+0x1e0>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fd fb26 	bl	8000108 <__udivsi3>
 8002abc:	0003      	movs	r3, r0
 8002abe:	001a      	movs	r2, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aca:	e002      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f9      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x158>
 8002ad8:	e02b      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4099      	lsls	r1, r3
 8002ae8:	000b      	movs	r3, r1
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	400a      	ands	r2, r1
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d003      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x190>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b11      	cmp	r3, #17
 8002b02:	d116      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_ADC_ConfigChannel+0x1d8>)
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1a0>
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b12:	e000      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1a2>
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <HAL_ADC_ConfigChannel+0x1e8>)
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <HAL_ADC_ConfigChannel+0x1d8>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e009      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	2220      	movs	r2, #32
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002b2a:	230f      	movs	r3, #15
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2234      	movs	r2, #52	@ 0x34
 8002b36:	2100      	movs	r1, #0
 8002b38:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	781b      	ldrb	r3, [r3, #0]
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00001001 	.word	0x00001001
 8002b4c:	40012708 	.word	0x40012708
 8002b50:	20000000 	.word	0x20000000
 8002b54:	000f4240 	.word	0x000f4240
 8002b58:	ff7fffff 	.word	0xff7fffff
 8002b5c:	ffbfffff 	.word	0xffbfffff

08002b60 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2203      	movs	r2, #3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d112      	bne.n	8002ba4 <ADC_Enable+0x44>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d009      	beq.n	8002ba0 <ADC_Enable+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	401a      	ands	r2, r3
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d101      	bne.n	8002ba4 <ADC_Enable+0x44>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <ADC_Enable+0x46>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d152      	bne.n	8002c50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c5c <ADC_Enable+0xfc>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	2210      	movs	r2, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e03f      	b.n	8002c52 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002be2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <ADC_Enable+0x100>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	491f      	ldr	r1, [pc, #124]	@ (8002c64 <ADC_Enable+0x104>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fd fa8d 	bl	8000108 <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bf2:	e002      	b.n	8002bfa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c00:	f7ff fcb0 	bl	8002564 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c08:	e01b      	b.n	8002c42 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c0a:	f7ff fcab 	bl	8002564 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d914      	bls.n	8002c42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00d      	beq.n	8002c42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c36:	2201      	movs	r2, #1
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d1dc      	bne.n	8002c0a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	80000017 	.word	0x80000017
 8002c60:	20000000 	.word	0x20000000
 8002c64:	000f4240 	.word	0x000f4240

08002c68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7a:	2250      	movs	r2, #80	@ 0x50
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d140      	bne.n	8002d02 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	2280      	movs	r2, #128	@ 0x80
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	23c0      	movs	r3, #192	@ 0xc0
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d12d      	bne.n	8002cf8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d129      	bne.n	8002cf8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2208      	movs	r2, #8
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d122      	bne.n	8002cf8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d110      	bne.n	8002ce0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	210c      	movs	r1, #12
 8002cca:	438a      	bics	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <ADC_DMAConvCplt+0xb0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cde:	e00b      	b.n	8002cf8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fe22 	bl	8002944 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002d00:	e005      	b.n	8002d0e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	4798      	blx	r3
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	fffffefe 	.word	0xfffffefe

08002d1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7ff fe11 	bl	8002954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	2240      	movs	r2, #64	@ 0x40
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	2204      	movs	r2, #4
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7ff fdfe 	bl	8002964 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	0002      	movs	r2, r0
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d82:	d809      	bhi.n	8002d98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	001a      	movs	r2, r3
 8002d8a:	231f      	movs	r3, #31
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <__NVIC_EnableIRQ+0x30>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	4091      	lsls	r1, r2
 8002d94:	000a      	movs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
  }
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	0002      	movs	r2, r0
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002db6:	d810      	bhi.n	8002dda <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	231f      	movs	r3, #31
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	4908      	ldr	r1, [pc, #32]	@ (8002de4 <__NVIC_DisableIRQ+0x40>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	0013      	movs	r3, r2
 8002dca:	2280      	movs	r2, #128	@ 0x80
 8002dcc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dce:	f3bf 8f4f 	dsb	sy
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002dd4:	f3bf 8f6f 	isb	sy
}
 8002dd8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b002      	add	sp, #8
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	0002      	movs	r2, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dfc:	d828      	bhi.n	8002e50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8002ebc <__NVIC_SetPriority+0xd4>)
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	33c0      	adds	r3, #192	@ 0xc0
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	589b      	ldr	r3, [r3, r2]
 8002e0e:	1dfa      	adds	r2, r7, #7
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	0011      	movs	r1, r2
 8002e14:	2203      	movs	r2, #3
 8002e16:	400a      	ands	r2, r1
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	21ff      	movs	r1, #255	@ 0xff
 8002e1c:	4091      	lsls	r1, r2
 8002e1e:	000a      	movs	r2, r1
 8002e20:	43d2      	mvns	r2, r2
 8002e22:	401a      	ands	r2, r3
 8002e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	22ff      	movs	r2, #255	@ 0xff
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	2303      	movs	r3, #3
 8002e36:	4003      	ands	r3, r0
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e3c:	481f      	ldr	r0, [pc, #124]	@ (8002ebc <__NVIC_SetPriority+0xd4>)
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b25b      	sxtb	r3, r3
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	430a      	orrs	r2, r1
 8002e48:	33c0      	adds	r3, #192	@ 0xc0
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e4e:	e031      	b.n	8002eb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e50:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <__NVIC_SetPriority+0xd8>)
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	0019      	movs	r1, r3
 8002e58:	230f      	movs	r3, #15
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	3b08      	subs	r3, #8
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3306      	adds	r3, #6
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	18d3      	adds	r3, r2, r3
 8002e66:	3304      	adds	r3, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1dfa      	adds	r2, r7, #7
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	0011      	movs	r1, r2
 8002e70:	2203      	movs	r2, #3
 8002e72:	400a      	ands	r2, r1
 8002e74:	00d2      	lsls	r2, r2, #3
 8002e76:	21ff      	movs	r1, #255	@ 0xff
 8002e78:	4091      	lsls	r1, r2
 8002e7a:	000a      	movs	r2, r1
 8002e7c:	43d2      	mvns	r2, r2
 8002e7e:	401a      	ands	r2, r3
 8002e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	22ff      	movs	r2, #255	@ 0xff
 8002e88:	401a      	ands	r2, r3
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2303      	movs	r3, #3
 8002e92:	4003      	ands	r3, r0
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e98:	4809      	ldr	r0, [pc, #36]	@ (8002ec0 <__NVIC_SetPriority+0xd8>)
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	001c      	movs	r4, r3
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	4023      	ands	r3, r4
 8002ea4:	3b08      	subs	r3, #8
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	3306      	adds	r3, #6
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	18c3      	adds	r3, r0, r3
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b003      	add	sp, #12
 8002eba:	bd90      	pop	{r4, r7, pc}
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	045b      	lsls	r3, r3, #17
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d301      	bcc.n	8002edc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e010      	b.n	8002efe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <SysTick_Config+0x44>)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	425b      	negs	r3, r3
 8002ee8:	2103      	movs	r1, #3
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff ff7c 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <SysTick_Config+0x44>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <SysTick_Config+0x44>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	210f      	movs	r1, #15
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	1c02      	adds	r2, r0, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff ff5d 	bl	8002de8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	1dfb      	adds	r3, r7, #7
 8002f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f42:	1dfb      	adds	r3, r7, #7
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b25b      	sxtb	r3, r3
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff ff11 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7ff ff1b 	bl	8002da4 <__NVIC_DisableIRQ>
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff ff9f 	bl	8002ec4 <SysTick_Config>
 8002f86:	0003      	movs	r3, r0
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e036      	b.n	8003014 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2221      	movs	r2, #33	@ 0x21
 8002faa:	2102      	movs	r1, #2
 8002fac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_DMA_Init+0x8c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f998 	bl	800332c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	2100      	movs	r1, #0
 8003010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b004      	add	sp, #16
 800301a:	bd80      	pop	{r7, pc}
 800301c:	ffffc00f 	.word	0xffffc00f

08003020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2317      	movs	r3, #23
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	5c9b      	ldrb	r3, [r3, r2]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Start_IT+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e04f      	b.n	80030e4 <HAL_DMA_Start_IT+0xc4>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	2101      	movs	r1, #1
 800304a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2221      	movs	r2, #33	@ 0x21
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d13a      	bne.n	80030ce <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2221      	movs	r2, #33	@ 0x21
 800305c:	2102      	movs	r1, #2
 800305e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	438a      	bics	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f928 	bl	80032d2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	210e      	movs	r1, #14
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e00f      	b.n	80030bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	210a      	movs	r1, #10
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2104      	movs	r1, #4
 80030b8:	438a      	bics	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e007      	b.n	80030de <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030d6:	2317      	movs	r3, #23
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80030de:	2317      	movs	r3, #23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b006      	add	sp, #24
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	210f      	movs	r1, #15
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2221      	movs	r2, #33	@ 0x21
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d006      	beq.n	8003116 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2204      	movs	r2, #4
 800310c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800310e:	187b      	adds	r3, r7, r1
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e028      	b.n	8003168 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	210e      	movs	r1, #14
 8003122:	438a      	bics	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	438a      	bics	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	2101      	movs	r1, #1
 8003140:	4091      	lsls	r1, r2
 8003142:	000a      	movs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2221      	movs	r2, #33	@ 0x21
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	0010      	movs	r0, r2
 8003166:	4798      	blx	r3
    }
  }
  return status;
 8003168:	230f      	movs	r3, #15
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	781b      	ldrb	r3, [r3, #0]
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2204      	movs	r2, #4
 8003194:	409a      	lsls	r2, r3
 8003196:	0013      	movs	r3, r2
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	d024      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x72>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d020      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2220      	movs	r2, #32
 80031ae:	4013      	ands	r3, r2
 80031b0:	d107      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2104      	movs	r1, #4
 80031be:	438a      	bics	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ca:	2104      	movs	r1, #4
 80031cc:	4091      	lsls	r1, r2
 80031ce:	000a      	movs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d100      	bne.n	80031dc <HAL_DMA_IRQHandler+0x66>
 80031da:	e06a      	b.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	0010      	movs	r0, r2
 80031e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031e6:	e064      	b.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2202      	movs	r2, #2
 80031ee:	409a      	lsls	r2, r3
 80031f0:	0013      	movs	r3, r2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4013      	ands	r3, r2
 80031f6:	d02b      	beq.n	8003250 <HAL_DMA_IRQHandler+0xda>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2220      	movs	r2, #32
 8003208:	4013      	ands	r3, r2
 800320a:	d10b      	bne.n	8003224 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	210a      	movs	r1, #10
 8003218:	438a      	bics	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2221      	movs	r2, #33	@ 0x21
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	2102      	movs	r1, #2
 800322e:	4091      	lsls	r1, r2
 8003230:	000a      	movs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d036      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	0010      	movs	r0, r2
 800324c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800324e:	e030      	b.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	2208      	movs	r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	0013      	movs	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	d028      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2208      	movs	r2, #8
 8003264:	4013      	ands	r3, r2
 8003266:	d024      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	210e      	movs	r1, #14
 8003274:	438a      	bics	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	2101      	movs	r1, #1
 8003282:	4091      	lsls	r1, r2
 8003284:	000a      	movs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2221      	movs	r2, #33	@ 0x21
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	0010      	movs	r0, r2
 80032ae:	4798      	blx	r3
    }
  }
}
 80032b0:	e7ff      	b.n	80032b2 <HAL_DMA_IRQHandler+0x13c>
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2221      	movs	r2, #33	@ 0x21
 80032c6:	5c9b      	ldrb	r3, [r3, r2]
 80032c8:	b2db      	uxtb	r3, r3
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b002      	add	sp, #8
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e8:	2101      	movs	r1, #1
 80032ea:	4091      	lsls	r1, r2
 80032ec:	000a      	movs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d108      	bne.n	8003312 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003310:	e007      	b.n	8003322 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a08      	ldr	r2, [pc, #32]	@ (800335c <DMA_CalcBaseAndBitshift+0x30>)
 800333a:	4694      	mov	ip, r2
 800333c:	4463      	add	r3, ip
 800333e:	2114      	movs	r1, #20
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc fee1 	bl	8000108 <__udivsi3>
 8003346:	0003      	movs	r3, r0
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a03      	ldr	r2, [pc, #12]	@ (8003360 <DMA_CalcBaseAndBitshift+0x34>)
 8003352:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	bffdfff8 	.word	0xbffdfff8
 8003360:	40020000 	.word	0x40020000

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003372:	e14f      	b.n	8003614 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4091      	lsls	r1, r2
 800337e:	000a      	movs	r2, r1
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d100      	bne.n	800338c <HAL_GPIO_Init+0x28>
 800338a:	e140      	b.n	800360e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2203      	movs	r2, #3
 8003392:	4013      	ands	r3, r2
 8003394:	2b01      	cmp	r3, #1
 8003396:	d005      	beq.n	80033a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d130      	bne.n	8003406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	409a      	lsls	r2, r3
 80033b2:	0013      	movs	r3, r2
 80033b4:	43da      	mvns	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	0013      	movs	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033da:	2201      	movs	r2, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	409a      	lsls	r2, r3
 80033e0:	0013      	movs	r3, r2
 80033e2:	43da      	mvns	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	2201      	movs	r2, #1
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2203      	movs	r2, #3
 800340c:	4013      	ands	r3, r2
 800340e:	2b03      	cmp	r3, #3
 8003410:	d017      	beq.n	8003442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	409a      	lsls	r2, r3
 8003420:	0013      	movs	r3, r2
 8003422:	43da      	mvns	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	4013      	ands	r3, r2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d123      	bne.n	8003496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	58d3      	ldr	r3, [r2, r3]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2207      	movs	r2, #7
 8003460:	4013      	ands	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	409a      	lsls	r2, r3
 8003468:	0013      	movs	r3, r2
 800346a:	43da      	mvns	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2107      	movs	r1, #7
 800347a:	400b      	ands	r3, r1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	409a      	lsls	r2, r3
 8003480:	0013      	movs	r3, r2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	6939      	ldr	r1, [r7, #16]
 8003494:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	409a      	lsls	r2, r3
 80034a4:	0013      	movs	r3, r2
 80034a6:	43da      	mvns	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2203      	movs	r2, #3
 80034b4:	401a      	ands	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	0013      	movs	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	23c0      	movs	r3, #192	@ 0xc0
 80034d0:	029b      	lsls	r3, r3, #10
 80034d2:	4013      	ands	r3, r2
 80034d4:	d100      	bne.n	80034d8 <HAL_GPIO_Init+0x174>
 80034d6:	e09a      	b.n	800360e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d8:	4b54      	ldr	r3, [pc, #336]	@ (800362c <HAL_GPIO_Init+0x2c8>)
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	4b53      	ldr	r3, [pc, #332]	@ (800362c <HAL_GPIO_Init+0x2c8>)
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
 80034e4:	4b51      	ldr	r3, [pc, #324]	@ (800362c <HAL_GPIO_Init+0x2c8>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003630 <HAL_GPIO_Init+0x2cc>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	589b      	ldr	r3, [r3, r2]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2203      	movs	r2, #3
 8003502:	4013      	ands	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	409a      	lsls	r2, r3
 800350a:	0013      	movs	r3, r2
 800350c:	43da      	mvns	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	2390      	movs	r3, #144	@ 0x90
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	429a      	cmp	r2, r3
 800351c:	d013      	beq.n	8003546 <HAL_GPIO_Init+0x1e2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a44      	ldr	r2, [pc, #272]	@ (8003634 <HAL_GPIO_Init+0x2d0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00d      	beq.n	8003542 <HAL_GPIO_Init+0x1de>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a43      	ldr	r2, [pc, #268]	@ (8003638 <HAL_GPIO_Init+0x2d4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <HAL_GPIO_Init+0x1da>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a42      	ldr	r2, [pc, #264]	@ (800363c <HAL_GPIO_Init+0x2d8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_GPIO_Init+0x1d6>
 8003536:	2303      	movs	r3, #3
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x1e4>
 800353a:	2305      	movs	r3, #5
 800353c:	e004      	b.n	8003548 <HAL_GPIO_Init+0x1e4>
 800353e:	2302      	movs	r3, #2
 8003540:	e002      	b.n	8003548 <HAL_GPIO_Init+0x1e4>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x1e4>
 8003546:	2300      	movs	r3, #0
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	2103      	movs	r1, #3
 800354c:	400a      	ands	r2, r1
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	4093      	lsls	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003558:	4935      	ldr	r1, [pc, #212]	@ (8003630 <HAL_GPIO_Init+0x2cc>)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43da      	mvns	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	035b      	lsls	r3, r3, #13
 800357e:	4013      	ands	r3, r2
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800358a:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43da      	mvns	r2, r3
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	039b      	lsls	r3, r3, #14
 80035a8:	4013      	ands	r3, r2
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035b4:	4b22      	ldr	r3, [pc, #136]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80035ba:	4b21      	ldr	r3, [pc, #132]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	4013      	ands	r3, r2
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035de:	4b18      	ldr	r3, [pc, #96]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80035e4:	4b16      	ldr	r3, [pc, #88]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	2380      	movs	r3, #128	@ 0x80
 80035fa:	025b      	lsls	r3, r3, #9
 80035fc:	4013      	ands	r3, r2
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003608:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <HAL_GPIO_Init+0x2dc>)
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3301      	adds	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	40da      	lsrs	r2, r3
 800361c:	1e13      	subs	r3, r2, #0
 800361e:	d000      	beq.n	8003622 <HAL_GPIO_Init+0x2be>
 8003620:	e6a8      	b.n	8003374 <HAL_GPIO_Init+0x10>
  } 
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b006      	add	sp, #24
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	40010000 	.word	0x40010000
 8003634:	48000400 	.word	0x48000400
 8003638:	48000800 	.word	0x48000800
 800363c:	48000c00 	.word	0x48000c00
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003652:	e0b1      	b.n	80037b8 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003654:	2201      	movs	r2, #1
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	409a      	lsls	r2, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d100      	bne.n	8003668 <HAL_GPIO_DeInit+0x24>
 8003666:	e0a4      	b.n	80037b2 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003668:	4a59      	ldr	r2, [pc, #356]	@ (80037d0 <HAL_GPIO_DeInit+0x18c>)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	589b      	ldr	r3, [r3, r2]
 8003674:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2203      	movs	r2, #3
 800367a:	4013      	ands	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	220f      	movs	r2, #15
 8003680:	409a      	lsls	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	2390      	movs	r3, #144	@ 0x90
 800368c:	05db      	lsls	r3, r3, #23
 800368e:	429a      	cmp	r2, r3
 8003690:	d013      	beq.n	80036ba <HAL_GPIO_DeInit+0x76>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4f      	ldr	r2, [pc, #316]	@ (80037d4 <HAL_GPIO_DeInit+0x190>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00d      	beq.n	80036b6 <HAL_GPIO_DeInit+0x72>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4e      	ldr	r2, [pc, #312]	@ (80037d8 <HAL_GPIO_DeInit+0x194>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <HAL_GPIO_DeInit+0x6e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4d      	ldr	r2, [pc, #308]	@ (80037dc <HAL_GPIO_DeInit+0x198>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_GPIO_DeInit+0x6a>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e006      	b.n	80036bc <HAL_GPIO_DeInit+0x78>
 80036ae:	2305      	movs	r3, #5
 80036b0:	e004      	b.n	80036bc <HAL_GPIO_DeInit+0x78>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e002      	b.n	80036bc <HAL_GPIO_DeInit+0x78>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_GPIO_DeInit+0x78>
 80036ba:	2300      	movs	r3, #0
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	2103      	movs	r1, #3
 80036c0:	400a      	ands	r2, r1
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	4093      	lsls	r3, r2
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d132      	bne.n	8003732 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036cc:	4b44      	ldr	r3, [pc, #272]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43d9      	mvns	r1, r3
 80036d4:	4b42      	ldr	r3, [pc, #264]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43d9      	mvns	r1, r3
 80036e2:	4b3f      	ldr	r3, [pc, #252]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036e8:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80036f6:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	43d9      	mvns	r1, r3
 80036fe:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <HAL_GPIO_DeInit+0x19c>)
 8003700:	400a      	ands	r2, r1
 8003702:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2203      	movs	r2, #3
 8003708:	4013      	ands	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	220f      	movs	r2, #15
 800370e:	409a      	lsls	r2, r3
 8003710:	0013      	movs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003714:	4a2e      	ldr	r2, [pc, #184]	@ (80037d0 <HAL_GPIO_DeInit+0x18c>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	589a      	ldr	r2, [r3, r2]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	43d9      	mvns	r1, r3
 8003724:	482a      	ldr	r0, [pc, #168]	@ (80037d0 <HAL_GPIO_DeInit+0x18c>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	400a      	ands	r2, r1
 800372c:	3302      	adds	r3, #2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	0052      	lsls	r2, r2, #1
 800373a:	2103      	movs	r1, #3
 800373c:	4091      	lsls	r1, r2
 800373e:	000a      	movs	r2, r1
 8003740:	43d2      	mvns	r2, r2
 8003742:	401a      	ands	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	58d3      	ldr	r3, [r2, r3]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	2107      	movs	r1, #7
 8003758:	400a      	ands	r2, r1
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	210f      	movs	r1, #15
 800375e:	4091      	lsls	r1, r2
 8003760:	000a      	movs	r2, r1
 8003762:	43d1      	mvns	r1, r2
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	08d2      	lsrs	r2, r2, #3
 8003768:	4019      	ands	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3208      	adds	r2, #8
 800376e:	0092      	lsls	r2, r2, #2
 8003770:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	0052      	lsls	r2, r2, #1
 800377a:	2103      	movs	r1, #3
 800377c:	4091      	lsls	r1, r2
 800377e:	000a      	movs	r2, r1
 8003780:	43d2      	mvns	r2, r2
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2101      	movs	r1, #1
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4091      	lsls	r1, r2
 8003792:	000a      	movs	r2, r1
 8003794:	43d2      	mvns	r2, r2
 8003796:	401a      	ands	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	2103      	movs	r1, #3
 80037a6:	4091      	lsls	r1, r2
 80037a8:	000a      	movs	r2, r1
 80037aa:	43d2      	mvns	r2, r2
 80037ac:	401a      	ands	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]

    }

    position++;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	3301      	adds	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	40da      	lsrs	r2, r3
 80037be:	1e13      	subs	r3, r2, #0
 80037c0:	d000      	beq.n	80037c4 <HAL_GPIO_DeInit+0x180>
 80037c2:	e747      	b.n	8003654 <HAL_GPIO_DeInit+0x10>
  }
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	40010000 	.word	0x40010000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48000c00 	.word	0x48000c00
 80037e0:	40010400 	.word	0x40010400

080037e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	000a      	movs	r2, r1
 80037ee:	1cbb      	adds	r3, r7, #2
 80037f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	1cba      	adds	r2, r7, #2
 80037f8:	8812      	ldrh	r2, [r2, #0]
 80037fa:	4013      	ands	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80037fe:	230f      	movs	r3, #15
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e003      	b.n	8003810 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	781b      	ldrb	r3, [r3, #0]
  }
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	0008      	movs	r0, r1
 8003828:	0011      	movs	r1, r2
 800382a:	1cbb      	adds	r3, r7, #2
 800382c:	1c02      	adds	r2, r0, #0
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	1c7b      	adds	r3, r7, #1
 8003832:	1c0a      	adds	r2, r1, #0
 8003834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003836:	1c7b      	adds	r3, r7, #1
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383e:	1cbb      	adds	r3, r7, #2
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003846:	e003      	b.n	8003850 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003848:	1cbb      	adds	r3, r7, #2
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e08f      	b.n	800398a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2241      	movs	r2, #65	@ 0x41
 800386e:	5c9b      	ldrb	r3, [r3, r2]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2240      	movs	r2, #64	@ 0x40
 800387a:	2100      	movs	r1, #0
 800387c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0018      	movs	r0, r3
 8003882:	f7fe fd29 	bl	80022d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2241      	movs	r2, #65	@ 0x41
 800388a:	2124      	movs	r1, #36	@ 0x24
 800388c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	438a      	bics	r2, r1
 800389c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	493b      	ldr	r1, [pc, #236]	@ (8003994 <HAL_I2C_Init+0x13c>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4938      	ldr	r1, [pc, #224]	@ (8003998 <HAL_I2C_Init+0x140>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2180      	movs	r1, #128	@ 0x80
 80038ce:	0209      	lsls	r1, r1, #8
 80038d0:	430a      	orrs	r2, r1
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e007      	b.n	80038e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2184      	movs	r1, #132	@ 0x84
 80038e0:	0209      	lsls	r1, r1, #8
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d109      	bne.n	8003902 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2180      	movs	r1, #128	@ 0x80
 80038fa:	0109      	lsls	r1, r1, #4
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	e007      	b.n	8003912 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4923      	ldr	r1, [pc, #140]	@ (800399c <HAL_I2C_Init+0x144>)
 800390e:	400a      	ands	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4920      	ldr	r1, [pc, #128]	@ (80039a0 <HAL_I2C_Init+0x148>)
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	491a      	ldr	r1, [pc, #104]	@ (8003998 <HAL_I2C_Init+0x140>)
 800392e:	400a      	ands	r2, r1
 8003930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69d9      	ldr	r1, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2241      	movs	r2, #65	@ 0x41
 8003976:	2120      	movs	r1, #32
 8003978:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2242      	movs	r2, #66	@ 0x42
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	f0ffffff 	.word	0xf0ffffff
 8003998:	ffff7fff 	.word	0xffff7fff
 800399c:	fffff7ff 	.word	0xfffff7ff
 80039a0:	02008000 	.word	0x02008000

080039a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e022      	b.n	80039fc <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2241      	movs	r2, #65	@ 0x41
 80039ba:	2124      	movs	r1, #36	@ 0x24
 80039bc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	438a      	bics	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7fe fcd7 	bl	8002384 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2241      	movs	r2, #65	@ 0x41
 80039e0:	2100      	movs	r1, #0
 80039e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2242      	movs	r2, #66	@ 0x42
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2240      	movs	r2, #64	@ 0x40
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	1dbb      	adds	r3, r7, #6
 8003a12:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2241      	movs	r2, #65	@ 0x41
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	2328      	movs	r3, #40	@ 0x28
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b28      	cmp	r3, #40	@ 0x28
 8003a24:	d000      	beq.n	8003a28 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8003a26:	e09f      	b.n	8003b68 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8003a2e:	1dbb      	adds	r3, r7, #6
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d105      	bne.n	8003a42 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2280      	movs	r2, #128	@ 0x80
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e093      	b.n	8003b6a <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a42:	4a4c      	ldr	r2, [pc, #304]	@ (8003b74 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f001 fc91 	bl	8005370 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2240      	movs	r2, #64	@ 0x40
 8003a52:	5c9b      	ldrb	r3, [r3, r2]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e086      	b.n	8003b6a <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2240      	movs	r2, #64	@ 0x40
 8003a60:	2101      	movs	r1, #1
 8003a62:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2241      	movs	r2, #65	@ 0x41
 8003a68:	5c9b      	ldrb	r3, [r3, r2]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a6e:	d12c      	bne.n	8003aca <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2102      	movs	r1, #2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f001 fc7b 	bl	8005370 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	401a      	ands	r2, r3
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d11d      	bne.n	8003aca <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4937      	ldr	r1, [pc, #220]	@ (8003b78 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d011      	beq.n	8003aca <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	4a34      	ldr	r2, [pc, #208]	@ (8003b7c <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 8003aac:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff fb1a 	bl	80030ec <HAL_DMA_Abort_IT>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d006      	beq.n	8003aca <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2241      	movs	r2, #65	@ 0x41
 8003ace:	2129      	movs	r1, #41	@ 0x29
 8003ad0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2242      	movs	r2, #66	@ 0x42
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4923      	ldr	r1, [pc, #140]	@ (8003b78 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1dba      	adds	r2, r7, #6
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a1b      	ldr	r2, [pc, #108]	@ (8003b80 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 8003b12:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	3b08      	subs	r3, #8
 8003b20:	425a      	negs	r2, r3
 8003b22:	4153      	adcs	r3, r2
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	2117      	movs	r1, #23
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2201      	movs	r2, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2240      	movs	r2, #64	@ 0x40
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003b58:	4a06      	ldr	r2, [pc, #24]	@ (8003b74 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f001 fb7c 	bl	800525c <I2C_Enable_IRQ>

    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e000      	b.n	8003b6a <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
  }
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	00008001 	.word	0x00008001
 8003b78:	ffff7fff 	.word	0xffff7fff
 8003b7c:	080051ab 	.word	0x080051ab
 8003b80:	08003ea9 	.word	0x08003ea9

08003b84 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	1dbb      	adds	r3, r7, #6
 8003b92:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2241      	movs	r2, #65	@ 0x41
 8003b98:	5c9b      	ldrb	r3, [r3, r2]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	2328      	movs	r3, #40	@ 0x28
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b28      	cmp	r3, #40	@ 0x28
 8003ba4:	d000      	beq.n	8003ba8 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 8003ba6:	e09f      	b.n	8003ce8 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 8003bae:	1dbb      	adds	r3, r7, #6
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e093      	b.n	8003cea <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf4 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f001 fbd1 	bl	8005370 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2240      	movs	r2, #64	@ 0x40
 8003bd2:	5c9b      	ldrb	r3, [r3, r2]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e086      	b.n	8003cea <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2240      	movs	r2, #64	@ 0x40
 8003be0:	2101      	movs	r1, #1
 8003be2:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2241      	movs	r2, #65	@ 0x41
 8003be8:	5c9b      	ldrb	r3, [r3, r2]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b29      	cmp	r3, #41	@ 0x29
 8003bee:	d12c      	bne.n	8003c4a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f001 fbbb 	bl	8005370 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	01db      	lsls	r3, r3, #7
 8003c04:	401a      	ands	r2, r3
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	01db      	lsls	r3, r3, #7
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11d      	bne.n	8003c4a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4937      	ldr	r1, [pc, #220]	@ (8003cf8 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 8003c1a:	400a      	ands	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	4a34      	ldr	r2, [pc, #208]	@ (8003cfc <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff fa5a 	bl	80030ec <HAL_DMA_Abort_IT>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d006      	beq.n	8003c4a <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c46:	0018      	movs	r0, r3
 8003c48:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2241      	movs	r2, #65	@ 0x41
 8003c4e:	212a      	movs	r1, #42	@ 0x2a
 8003c50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2242      	movs	r2, #66	@ 0x42
 8003c56:	2120      	movs	r1, #32
 8003c58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4925      	ldr	r1, [pc, #148]	@ (8003d00 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1dba      	adds	r2, r7, #6
 8003c7a:	8812      	ldrh	r2, [r2, #0]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 8003c92:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	3b08      	subs	r3, #8
 8003ca0:	425a      	negs	r2, r3
 8003ca2:	4153      	adcs	r3, r2
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	2117      	movs	r1, #23
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003cd8:	4a06      	ldr	r2, [pc, #24]	@ (8003cf4 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	0011      	movs	r1, r2
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f001 fabc 	bl	800525c <I2C_Enable_IRQ>

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
  }
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b006      	add	sp, #24
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	00008002 	.word	0x00008002
 8003cf8:	ffffbfff 	.word	0xffffbfff
 8003cfc:	080051ab 	.word	0x080051ab
 8003d00:	ffff7fff 	.word	0xffff7fff
 8003d04:	08003ea9 	.word	0x08003ea9

08003d08 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2241      	movs	r2, #65	@ 0x41
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d10f      	bne.n	8003d3c <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2241      	movs	r2, #65	@ 0x41
 8003d20:	2128      	movs	r1, #40	@ 0x28
 8003d22:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a08      	ldr	r2, [pc, #32]	@ (8003d48 <HAL_I2C_EnableListen_IT+0x40>)
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	021a      	lsls	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f001 fa92 	bl	800525c <I2C_Enable_IRQ>

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	08003ea9 	.word	0x08003ea9

08003d4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
  }
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b004      	add	sp, #16
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003da8:	d00a      	beq.n	8003dc0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	2201      	movs	r2, #1
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2280      	movs	r2, #128	@ 0x80
 8003dbc:	0052      	lsls	r2, r2, #1
 8003dbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2280      	movs	r2, #128	@ 0x80
 8003dce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003dd0:	d00a      	beq.n	8003de8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2280      	movs	r2, #128	@ 0x80
 8003de4:	00d2      	lsls	r2, r2, #3
 8003de6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2280      	movs	r2, #128	@ 0x80
 8003df6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003df8:	d00a      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	2202      	movs	r2, #2
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	0092      	lsls	r2, r2, #2
 8003e0e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	220b      	movs	r2, #11
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d005      	beq.n	8003e2a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	0011      	movs	r1, r2
 8003e24:	0018      	movs	r0, r3
 8003e26:	f001 f873 	bl	8004f10 <I2C_ITError>
  }
}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b006      	add	sp, #24
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b002      	add	sp, #8
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b002      	add	sp, #8
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2240      	movs	r2, #64	@ 0x40
 8003ec2:	5c9b      	ldrb	r3, [r3, r2]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <I2C_Slave_ISR_IT+0x24>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0e7      	b.n	800409c <I2C_Slave_ISR_IT+0x1f4>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2240      	movs	r2, #64	@ 0x40
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d00a      	beq.n	8003ef2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ee2:	d006      	beq.n	8003ef2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 fe30 	bl	8004b50 <I2C_ITSlaveCplt>
 8003ef0:	e0cf      	b.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d052      	beq.n	8003fa0 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2210      	movs	r2, #16
 8003efe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f00:	d04e      	beq.n	8003fa0 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d12d      	bne.n	8003f68 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2241      	movs	r2, #65	@ 0x41
 8003f10:	5c9b      	ldrb	r3, [r3, r2]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b28      	cmp	r3, #40	@ 0x28
 8003f16:	d10b      	bne.n	8003f30 <I2C_Slave_ISR_IT+0x88>
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	049b      	lsls	r3, r3, #18
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d106      	bne.n	8003f30 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	0011      	movs	r1, r2
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 ff99 	bl	8004e60 <I2C_ITListenCplt>
 8003f2e:	e036      	b.n	8003f9e <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2241      	movs	r2, #65	@ 0x41
 8003f34:	5c9b      	ldrb	r3, [r3, r2]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b29      	cmp	r3, #41	@ 0x29
 8003f3a:	d110      	bne.n	8003f5e <I2C_Slave_ISR_IT+0xb6>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4a59      	ldr	r2, [pc, #356]	@ (80040a4 <I2C_Slave_ISR_IT+0x1fc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00c      	beq.n	8003f5e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f001 f909 	bl	8005166 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 fcc8 	bl	80048ec <I2C_ITSlaveSeqCplt>
 8003f5c:	e01f      	b.n	8003f9e <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f66:	e091      	b.n	800408c <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f74:	2204      	movs	r2, #4
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <I2C_Slave_ISR_IT+0xe6>
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	045b      	lsls	r3, r3, #17
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d000      	beq.n	8003f8e <I2C_Slave_ISR_IT+0xe6>
 8003f8c:	e07e      	b.n	800408c <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 ffba 	bl	8004f10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f9c:	e076      	b.n	800408c <I2C_Slave_ISR_IT+0x1e4>
 8003f9e:	e075      	b.n	800408c <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d02f      	beq.n	8004008 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2204      	movs	r2, #4
 8003fac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003fae:	d02b      	beq.n	8004008 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d14c      	bne.n	8004090 <I2C_Slave_ISR_IT+0x1e8>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80040a4 <I2C_Slave_ISR_IT+0x1fc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d048      	beq.n	8004090 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0018      	movs	r0, r3
 8004002:	f000 fc73 	bl	80048ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004006:	e043      	b.n	8004090 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2208      	movs	r2, #8
 800400c:	4013      	ands	r3, r2
 800400e:	d00a      	beq.n	8004026 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2208      	movs	r2, #8
 8004014:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004016:	d006      	beq.n	8004026 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f000 fb7e 	bl	8004720 <I2C_ITAddrCplt>
 8004024:	e035      	b.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d031      	beq.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004034:	d02d      	beq.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d018      	beq.n	8004072 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004070:	e00f      	b.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	2380      	movs	r3, #128	@ 0x80
 8004076:	045b      	lsls	r3, r3, #17
 8004078:	429a      	cmp	r2, r3
 800407a:	d002      	beq.n	8004082 <I2C_Slave_ISR_IT+0x1da>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 fc31 	bl	80048ec <I2C_ITSlaveSeqCplt>
 800408a:	e002      	b.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	e000      	b.n	8004092 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004090:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2240      	movs	r2, #64	@ 0x40
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b006      	add	sp, #24
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	ffff0000 	.word	0xffff0000

080040a8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b089      	sub	sp, #36	@ 0x24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2240      	movs	r2, #64	@ 0x40
 80040b8:	5c9b      	ldrb	r3, [r3, r2]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <I2C_Master_ISR_DMA+0x1a>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0f5      	b.n	80042ae <I2C_Master_ISR_DMA+0x206>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2240      	movs	r2, #64	@ 0x40
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2210      	movs	r2, #16
 80040ce:	4013      	ands	r3, r2
 80040d0:	d017      	beq.n	8004102 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2210      	movs	r2, #16
 80040d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040d8:	d013      	beq.n	8004102 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2210      	movs	r2, #16
 80040e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	2204      	movs	r2, #4
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2120      	movs	r1, #32
 80040f2:	0018      	movs	r0, r3
 80040f4:	f001 f8b2 	bl	800525c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f001 f833 	bl	8005166 <I2C_Flush_TXDR>
 8004100:	e0d0      	b.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	4013      	ands	r3, r2
 8004108:	d100      	bne.n	800410c <I2C_Master_ISR_DMA+0x64>
 800410a:	e08a      	b.n	8004222 <I2C_Master_ISR_DMA+0x17a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004112:	d100      	bne.n	8004116 <I2C_Master_ISR_DMA+0x6e>
 8004114:	e085      	b.n	8004222 <I2C_Master_ISR_DMA+0x17a>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2140      	movs	r1, #64	@ 0x40
 8004122:	438a      	bics	r2, r1
 8004124:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d063      	beq.n	80041f8 <I2C_Master_ISR_DMA+0x150>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b29a      	uxth	r2, r3
 8004138:	2312      	movs	r3, #18
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	0592      	lsls	r2, r2, #22
 800413e:	0d92      	lsrs	r2, r2, #22
 8004140:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	2bff      	cmp	r3, #255	@ 0xff
 800414a:	d914      	bls.n	8004176 <I2C_Master_ISR_DMA+0xce>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2201      	movs	r2, #1
 8004158:	4013      	ands	r3, r2
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d103      	bne.n	8004168 <I2C_Master_ISR_DMA+0xc0>
        {
          hi2c->XferSize = 1U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004166:	e002      	b.n	800416e <I2C_Master_ISR_DMA+0xc6>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	22ff      	movs	r2, #255	@ 0xff
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	045b      	lsls	r3, r3, #17
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e010      	b.n	8004198 <I2C_Master_ISR_DMA+0xf0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	4a4c      	ldr	r2, [pc, #304]	@ (80042b8 <I2C_Master_ISR_DMA+0x210>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <I2C_Master_ISR_DMA+0xea>
        {
          xfermode = hi2c->XferOptions;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e002      	b.n	8004198 <I2C_Master_ISR_DMA+0xf0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	049b      	lsls	r3, r3, #18
 8004196:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	b2da      	uxtb	r2, r3
 800419e:	697c      	ldr	r4, [r7, #20]
 80041a0:	2312      	movs	r3, #18
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	8819      	ldrh	r1, [r3, #0]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	0023      	movs	r3, r4
 80041ae:	f001 f81b 	bl	80051e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2241      	movs	r2, #65	@ 0x41
 80041c8:	5c9b      	ldrb	r3, [r3, r2]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b22      	cmp	r3, #34	@ 0x22
 80041ce:	d109      	bne.n	80041e4 <I2C_Master_ISR_DMA+0x13c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2180      	movs	r1, #128	@ 0x80
 80041dc:	0209      	lsls	r1, r1, #8
 80041de:	430a      	orrs	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80041e2:	e05f      	b.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	01c9      	lsls	r1, r1, #7
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80041f6:	e055      	b.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	049b      	lsls	r3, r3, #18
 8004202:	401a      	ands	r2, r3
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	049b      	lsls	r3, r3, #18
 8004208:	429a      	cmp	r2, r3
 800420a:	d004      	beq.n	8004216 <I2C_Master_ISR_DMA+0x16e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	0018      	movs	r0, r3
 8004210:	f000 fb2a 	bl	8004868 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004214:	e046      	b.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2140      	movs	r1, #64	@ 0x40
 800421a:	0018      	movs	r0, r3
 800421c:	f000 fe78 	bl	8004f10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004220:	e040      	b.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2240      	movs	r2, #64	@ 0x40
 8004226:	4013      	ands	r3, r2
 8004228:	d02c      	beq.n	8004284 <I2C_Master_ISR_DMA+0x1dc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004230:	d028      	beq.n	8004284 <I2C_Master_ISR_DMA+0x1dc>
  {
    if (hi2c->XferCount == 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d11d      	bne.n	8004278 <I2C_Master_ISR_DMA+0x1d0>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	049b      	lsls	r3, r3, #18
 8004246:	401a      	ands	r2, r3
 8004248:	2380      	movs	r3, #128	@ 0x80
 800424a:	049b      	lsls	r3, r3, #18
 800424c:	429a      	cmp	r2, r3
 800424e:	d028      	beq.n	80042a2 <I2C_Master_ISR_DMA+0x1fa>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	4a18      	ldr	r2, [pc, #96]	@ (80042b8 <I2C_Master_ISR_DMA+0x210>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d109      	bne.n	800426e <I2C_Master_ISR_DMA+0x1c6>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2180      	movs	r1, #128	@ 0x80
 8004266:	01c9      	lsls	r1, r1, #7
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800426c:	e019      	b.n	80042a2 <I2C_Master_ISR_DMA+0x1fa>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 faf9 	bl	8004868 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004276:	e014      	b.n	80042a2 <I2C_Master_ISR_DMA+0x1fa>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2140      	movs	r1, #64	@ 0x40
 800427c:	0018      	movs	r0, r3
 800427e:	f000 fe47 	bl	8004f10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004282:	e00e      	b.n	80042a2 <I2C_Master_ISR_DMA+0x1fa>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2220      	movs	r2, #32
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004292:	d007      	beq.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0011      	movs	r1, r2
 800429a:	0018      	movs	r0, r3
 800429c:	f000 fb8a 	bl	80049b4 <I2C_ITMasterCplt>
 80042a0:	e000      	b.n	80042a4 <I2C_Master_ISR_DMA+0x1fc>
    if (hi2c->XferCount == 0U)
 80042a2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b007      	add	sp, #28
 80042b4:	bd90      	pop	{r4, r7, pc}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	ffff0000 	.word	0xffff0000

080042bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	@ 0x24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80042c8:	4b9f      	ldr	r3, [pc, #636]	@ (8004548 <I2C_Mem_ISR_DMA+0x28c>)
 80042ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	@ 0x40
 80042d0:	5c9b      	ldrb	r3, [r3, r2]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <I2C_Mem_ISR_DMA+0x1e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e132      	b.n	8004540 <I2C_Mem_ISR_DMA+0x284>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2240      	movs	r2, #64	@ 0x40
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2210      	movs	r2, #16
 80042e6:	4013      	ands	r3, r2
 80042e8:	d017      	beq.n	800431a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2210      	movs	r2, #16
 80042ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042f0:	d013      	beq.n	800431a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2210      	movs	r2, #16
 80042f8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	2204      	movs	r2, #4
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2120      	movs	r1, #32
 800430a:	0018      	movs	r0, r3
 800430c:	f000 ffa6 	bl	800525c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 ff27 	bl	8005166 <I2C_Flush_TXDR>
 8004318:	e10d      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2202      	movs	r2, #2
 800431e:	4013      	ands	r3, r2
 8004320:	d00d      	beq.n	800433e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004328:	d009      	beq.n	800433e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004332:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	4252      	negs	r2, r2
 800433a:	651a      	str	r2, [r3, #80]	@ 0x50
 800433c:	e0fb      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	4013      	ands	r3, r2
 8004344:	d100      	bne.n	8004348 <I2C_Mem_ISR_DMA+0x8c>
 8004346:	e072      	b.n	800442e <I2C_Mem_ISR_DMA+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2240      	movs	r2, #64	@ 0x40
 800434c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800434e:	d100      	bne.n	8004352 <I2C_Mem_ISR_DMA+0x96>
 8004350:	e06d      	b.n	800442e <I2C_Mem_ISR_DMA+0x172>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2101      	movs	r1, #1
 8004356:	0018      	movs	r0, r3
 8004358:	f001 f80a 	bl	8005370 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2110      	movs	r1, #16
 8004360:	0018      	movs	r0, r3
 8004362:	f000 ff7b 	bl	800525c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d058      	beq.n	8004422 <I2C_Mem_ISR_DMA+0x166>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2bff      	cmp	r3, #255	@ 0xff
 8004378:	d91e      	bls.n	80043b8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2201      	movs	r2, #1
 8004386:	4013      	ands	r3, r2
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d103      	bne.n	8004396 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004394:	e002      	b.n	800439c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	22ff      	movs	r2, #255	@ 0xff
 800439a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a0:	b299      	uxth	r1, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	045b      	lsls	r3, r3, #17
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	2400      	movs	r4, #0
 80043b0:	9400      	str	r4, [sp, #0]
 80043b2:	f000 ff19 	bl	80051e8 <I2C_TransferConfig>
 80043b6:	e011      	b.n	80043dc <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c6:	b299      	uxth	r1, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	2380      	movs	r3, #128	@ 0x80
 80043d0:	049b      	lsls	r3, r3, #18
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	2400      	movs	r4, #0
 80043d6:	9400      	str	r4, [sp, #0]
 80043d8:	f000 ff06 	bl	80051e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2241      	movs	r2, #65	@ 0x41
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b22      	cmp	r3, #34	@ 0x22
 80043f8:	d109      	bne.n	800440e <I2C_Mem_ISR_DMA+0x152>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	0209      	lsls	r1, r1, #8
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800440c:	e093      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2180      	movs	r1, #128	@ 0x80
 800441a:	01c9      	lsls	r1, r1, #7
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004420:	e089      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	0018      	movs	r0, r3
 8004428:	f000 fd72 	bl	8004f10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800442c:	e083      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2240      	movs	r2, #64	@ 0x40
 8004432:	4013      	ands	r3, r2
 8004434:	d100      	bne.n	8004438 <I2C_Mem_ISR_DMA+0x17c>
 8004436:	e070      	b.n	800451a <I2C_Mem_ISR_DMA+0x25e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2240      	movs	r2, #64	@ 0x40
 800443c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800443e:	d06c      	beq.n	800451a <I2C_Mem_ISR_DMA+0x25e>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2101      	movs	r1, #1
 8004444:	0018      	movs	r0, r3
 8004446:	f000 ff93 	bl	8005370 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2110      	movs	r1, #16
 800444e:	0018      	movs	r0, r3
 8004450:	f000 ff04 	bl	800525c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2241      	movs	r2, #65	@ 0x41
 8004458:	5c9b      	ldrb	r3, [r3, r2]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b22      	cmp	r3, #34	@ 0x22
 800445e:	d101      	bne.n	8004464 <I2C_Mem_ISR_DMA+0x1a8>
    {
      direction = I2C_GENERATE_START_READ;
 8004460:	4b3a      	ldr	r3, [pc, #232]	@ (800454c <I2C_Mem_ISR_DMA+0x290>)
 8004462:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2bff      	cmp	r3, #255	@ 0xff
 800446c:	d91f      	bls.n	80044ae <I2C_Mem_ISR_DMA+0x1f2>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d103      	bne.n	800448a <I2C_Mem_ISR_DMA+0x1ce>
      {
        hi2c->XferSize = 1U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004488:	e002      	b.n	8004490 <I2C_Mem_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22ff      	movs	r2, #255	@ 0xff
 800448e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004494:	b299      	uxth	r1, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	b2da      	uxtb	r2, r3
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	045c      	lsls	r4, r3, #17
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	0023      	movs	r3, r4
 80044a8:	f000 fe9e 	bl	80051e8 <I2C_TransferConfig>
 80044ac:	e012      	b.n	80044d4 <I2C_Mem_ISR_DMA+0x218>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044bc:	b299      	uxth	r1, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	049c      	lsls	r4, r3, #18
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	0023      	movs	r3, r4
 80044d0:	f000 fe8a 	bl	80051e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2241      	movs	r2, #65	@ 0x41
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b22      	cmp	r3, #34	@ 0x22
 80044f0:	d109      	bne.n	8004506 <I2C_Mem_ISR_DMA+0x24a>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2180      	movs	r1, #128	@ 0x80
 80044fe:	0209      	lsls	r1, r1, #8
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004504:	e017      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2180      	movs	r1, #128	@ 0x80
 8004512:	01c9      	lsls	r1, r1, #7
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004518:	e00d      	b.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2220      	movs	r2, #32
 800451e:	4013      	ands	r3, r2
 8004520:	d009      	beq.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004528:	d005      	beq.n	8004536 <I2C_Mem_ISR_DMA+0x27a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	0011      	movs	r1, r2
 8004530:	0018      	movs	r0, r3
 8004532:	f000 fa3f 	bl	80049b4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2240      	movs	r2, #64	@ 0x40
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b007      	add	sp, #28
 8004546:	bd90      	pop	{r4, r7, pc}
 8004548:	80002000 	.word	0x80002000
 800454c:	80002400 	.word	0x80002400

08004550 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2240      	movs	r2, #64	@ 0x40
 800456a:	5c9b      	ldrb	r3, [r3, r2]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <I2C_Slave_ISR_DMA+0x24>
 8004570:	2302      	movs	r3, #2
 8004572:	e0ce      	b.n	8004712 <I2C_Slave_ISR_DMA+0x1c2>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2240      	movs	r2, #64	@ 0x40
 8004578:	2101      	movs	r1, #1
 800457a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2220      	movs	r2, #32
 8004580:	4013      	ands	r3, r2
 8004582:	d00a      	beq.n	800459a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800458a:	d006      	beq.n	800459a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	0011      	movs	r1, r2
 8004592:	0018      	movs	r0, r3
 8004594:	f000 fadc 	bl	8004b50 <I2C_ITSlaveCplt>
 8004598:	e0b6      	b.n	8004708 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2210      	movs	r2, #16
 800459e:	4013      	ands	r3, r2
 80045a0:	d100      	bne.n	80045a4 <I2C_Slave_ISR_DMA+0x54>
 80045a2:	e0a3      	b.n	80046ec <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2210      	movs	r2, #16
 80045a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045aa:	d100      	bne.n	80045ae <I2C_Slave_ISR_DMA+0x5e>
 80045ac:	e09e      	b.n	80046ec <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	2380      	movs	r3, #128	@ 0x80
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4013      	ands	r3, r2
 80045b6:	d105      	bne.n	80045c4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045c0:	d100      	bne.n	80045c4 <I2C_Slave_ISR_DMA+0x74>
 80045c2:	e08c      	b.n	80046de <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00c      	beq.n	80045e6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	2380      	movs	r3, #128	@ 0x80
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	4013      	ands	r3, r2
 80045d4:	d007      	beq.n	80045e6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	01db      	lsls	r3, r3, #7
 80045f4:	4013      	ands	r3, r2
 80045f6:	d007      	beq.n	8004608 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004604:	2301      	movs	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d12d      	bne.n	800466a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2241      	movs	r2, #65	@ 0x41
 8004612:	5c9b      	ldrb	r3, [r3, r2]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b28      	cmp	r3, #40	@ 0x28
 8004618:	d10b      	bne.n	8004632 <I2C_Slave_ISR_DMA+0xe2>
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	2380      	movs	r3, #128	@ 0x80
 800461e:	049b      	lsls	r3, r3, #18
 8004620:	429a      	cmp	r2, r3
 8004622:	d106      	bne.n	8004632 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f000 fc18 	bl	8004e60 <I2C_ITListenCplt>
 8004630:	e054      	b.n	80046dc <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2241      	movs	r2, #65	@ 0x41
 8004636:	5c9b      	ldrb	r3, [r3, r2]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b29      	cmp	r3, #41	@ 0x29
 800463c:	d110      	bne.n	8004660 <I2C_Slave_ISR_DMA+0x110>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4a36      	ldr	r2, [pc, #216]	@ (800471c <I2C_Slave_ISR_DMA+0x1cc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00c      	beq.n	8004660 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2210      	movs	r2, #16
 800464c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 fd88 	bl	8005166 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	0018      	movs	r0, r3
 800465a:	f000 f947 	bl	80048ec <I2C_ITSlaveSeqCplt>
 800465e:	e03d      	b.n	80046dc <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2210      	movs	r2, #16
 8004666:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004668:	e03e      	b.n	80046e8 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2210      	movs	r2, #16
 8004670:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	2204      	movs	r2, #4
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800467e:	2317      	movs	r3, #23
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	2141      	movs	r1, #65	@ 0x41
 8004686:	5c52      	ldrb	r2, [r2, r1]
 8004688:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <I2C_Slave_ISR_DMA+0x14a>
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	045b      	lsls	r3, r3, #17
 8004696:	429a      	cmp	r2, r3
 8004698:	d126      	bne.n	80046e8 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800469a:	2217      	movs	r2, #23
 800469c:	18bb      	adds	r3, r7, r2
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b21      	cmp	r3, #33	@ 0x21
 80046a2:	d003      	beq.n	80046ac <I2C_Slave_ISR_DMA+0x15c>
 80046a4:	18bb      	adds	r3, r7, r2
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b29      	cmp	r3, #41	@ 0x29
 80046aa:	d103      	bne.n	80046b4 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2221      	movs	r2, #33	@ 0x21
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b2:	e00b      	b.n	80046cc <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046b4:	2217      	movs	r2, #23
 80046b6:	18bb      	adds	r3, r7, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b22      	cmp	r3, #34	@ 0x22
 80046bc:	d003      	beq.n	80046c6 <I2C_Slave_ISR_DMA+0x176>
 80046be:	18bb      	adds	r3, r7, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046c4:	d102      	bne.n	80046cc <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2222      	movs	r2, #34	@ 0x22
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	0011      	movs	r1, r2
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fc1b 	bl	8004f10 <I2C_ITError>
      if (treatdmanack == 1U)
 80046da:	e005      	b.n	80046e8 <I2C_Slave_ISR_DMA+0x198>
 80046dc:	e004      	b.n	80046e8 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2210      	movs	r2, #16
 80046e4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046e6:	e00f      	b.n	8004708 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 80046e8:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046ea:	e00d      	b.n	8004708 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2208      	movs	r2, #8
 80046f0:	4013      	ands	r3, r2
 80046f2:	d009      	beq.n	8004708 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2208      	movs	r2, #8
 80046f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046fa:	d005      	beq.n	8004708 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	0011      	movs	r1, r2
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f80c 	bl	8004720 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2240      	movs	r2, #64	@ 0x40
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	0018      	movs	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	b008      	add	sp, #32
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	ffff0000 	.word	0xffff0000

08004720 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004720:	b5b0      	push	{r4, r5, r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2241      	movs	r2, #65	@ 0x41
 800472e:	5c9b      	ldrb	r3, [r3, r2]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	001a      	movs	r2, r3
 8004734:	2328      	movs	r3, #40	@ 0x28
 8004736:	4013      	ands	r3, r2
 8004738:	2b28      	cmp	r3, #40	@ 0x28
 800473a:	d000      	beq.n	800473e <I2C_ITAddrCplt+0x1e>
 800473c:	e088      	b.n	8004850 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	b2da      	uxtb	r2, r3
 8004748:	250f      	movs	r5, #15
 800474a:	197b      	adds	r3, r7, r5
 800474c:	2101      	movs	r1, #1
 800474e:	400a      	ands	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b29a      	uxth	r2, r3
 800475c:	200c      	movs	r0, #12
 800475e:	183b      	adds	r3, r7, r0
 8004760:	21fe      	movs	r1, #254	@ 0xfe
 8004762:	400a      	ands	r2, r1
 8004764:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	b29a      	uxth	r2, r3
 800476e:	240a      	movs	r4, #10
 8004770:	193b      	adds	r3, r7, r4
 8004772:	0592      	lsls	r2, r2, #22
 8004774:	0d92      	lsrs	r2, r2, #22
 8004776:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	b29a      	uxth	r2, r3
 8004780:	2308      	movs	r3, #8
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	21fe      	movs	r1, #254	@ 0xfe
 8004786:	400a      	ands	r2, r1
 8004788:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d148      	bne.n	8004824 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004792:	0021      	movs	r1, r4
 8004794:	187b      	adds	r3, r7, r1
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	09db      	lsrs	r3, r3, #7
 800479a:	b29a      	uxth	r2, r3
 800479c:	183b      	adds	r3, r7, r0
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	4053      	eors	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	001a      	movs	r2, r3
 80047a6:	2306      	movs	r3, #6
 80047a8:	4013      	ands	r3, r2
 80047aa:	d120      	bne.n	80047ee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80047ac:	183b      	adds	r3, r7, r0
 80047ae:	187a      	adds	r2, r7, r1
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d14c      	bne.n	8004860 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2208      	movs	r2, #8
 80047d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2240      	movs	r2, #64	@ 0x40
 80047d8:	2100      	movs	r1, #0
 80047da:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80047dc:	183b      	adds	r3, r7, r0
 80047de:	881a      	ldrh	r2, [r3, #0]
 80047e0:	197b      	adds	r3, r7, r5
 80047e2:	7819      	ldrb	r1, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7fd f828 	bl	800183c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047ec:	e038      	b.n	8004860 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80047ee:	240c      	movs	r4, #12
 80047f0:	193b      	adds	r3, r7, r4
 80047f2:	2208      	movs	r2, #8
 80047f4:	18ba      	adds	r2, r7, r2
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	021a      	lsls	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f000 fdb4 	bl	8005370 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2240      	movs	r2, #64	@ 0x40
 800480c:	2100      	movs	r1, #0
 800480e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004810:	193b      	adds	r3, r7, r4
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	230f      	movs	r3, #15
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	7819      	ldrb	r1, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f7fd f80d 	bl	800183c <HAL_I2C_AddrCallback>
}
 8004822:	e01d      	b.n	8004860 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0011      	movs	r1, r2
 800482c:	0018      	movs	r0, r3
 800482e:	f000 fd9f 	bl	8005370 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2240      	movs	r2, #64	@ 0x40
 8004836:	2100      	movs	r1, #0
 8004838:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800483a:	230c      	movs	r3, #12
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	230f      	movs	r3, #15
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	7819      	ldrb	r1, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f7fc fff7 	bl	800183c <HAL_I2C_AddrCallback>
}
 800484e:	e007      	b.n	8004860 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2240      	movs	r2, #64	@ 0x40
 800485c:	2100      	movs	r1, #0
 800485e:	5499      	strb	r1, [r3, r2]
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bdb0      	pop	{r4, r5, r7, pc}

08004868 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2242      	movs	r2, #66	@ 0x42
 8004874:	2100      	movs	r1, #0
 8004876:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2241      	movs	r2, #65	@ 0x41
 800487c:	5c9b      	ldrb	r3, [r3, r2]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b21      	cmp	r3, #33	@ 0x21
 8004882:	d117      	bne.n	80048b4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2241      	movs	r2, #65	@ 0x41
 8004888:	2120      	movs	r1, #32
 800488a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2211      	movs	r2, #17
 8004890:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2101      	movs	r1, #1
 800489c:	0018      	movs	r0, r3
 800489e:	f000 fd67 	bl	8005370 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2240      	movs	r2, #64	@ 0x40
 80048a6:	2100      	movs	r1, #0
 80048a8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff fac0 	bl	8003e32 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048b2:	e016      	b.n	80048e2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2241      	movs	r2, #65	@ 0x41
 80048b8:	2120      	movs	r1, #32
 80048ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2212      	movs	r2, #18
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2102      	movs	r1, #2
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 fd4f 	bl	8005370 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2240      	movs	r2, #64	@ 0x40
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f7ff fab0 	bl	8003e42 <HAL_I2C_MasterRxCpltCallback>
}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2242      	movs	r2, #66	@ 0x42
 8004900:	2100      	movs	r1, #0
 8004902:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	01db      	lsls	r3, r3, #7
 800490a:	4013      	ands	r3, r2
 800490c:	d008      	beq.n	8004920 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4924      	ldr	r1, [pc, #144]	@ (80049ac <I2C_ITSlaveSeqCplt+0xc0>)
 800491a:	400a      	ands	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e00c      	b.n	800493a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	4013      	ands	r3, r2
 8004928:	d007      	beq.n	800493a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	491e      	ldr	r1, [pc, #120]	@ (80049b0 <I2C_ITSlaveSeqCplt+0xc4>)
 8004936:	400a      	ands	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2241      	movs	r2, #65	@ 0x41
 800493e:	5c9b      	ldrb	r3, [r3, r2]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b29      	cmp	r3, #41	@ 0x29
 8004944:	d114      	bne.n	8004970 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2241      	movs	r2, #65	@ 0x41
 800494a:	2128      	movs	r1, #40	@ 0x28
 800494c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2221      	movs	r2, #33	@ 0x21
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2101      	movs	r1, #1
 8004958:	0018      	movs	r0, r3
 800495a:	f000 fd09 	bl	8005370 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2240      	movs	r2, #64	@ 0x40
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0018      	movs	r0, r3
 800496a:	f7ff fa72 	bl	8003e52 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800496e:	e019      	b.n	80049a4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2241      	movs	r2, #65	@ 0x41
 8004974:	5c9b      	ldrb	r3, [r3, r2]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b2a      	cmp	r3, #42	@ 0x2a
 800497a:	d113      	bne.n	80049a4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2241      	movs	r2, #65	@ 0x41
 8004980:	2128      	movs	r1, #40	@ 0x28
 8004982:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2222      	movs	r2, #34	@ 0x22
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2102      	movs	r1, #2
 800498e:	0018      	movs	r0, r3
 8004990:	f000 fcee 	bl	8005370 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f7fc ff84 	bl	80018ac <HAL_I2C_SlaveRxCpltCallback>
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b004      	add	sp, #16
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	ffffbfff 	.word	0xffffbfff
 80049b0:	ffff7fff 	.word	0xffff7fff

080049b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2220      	movs	r2, #32
 80049c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2241      	movs	r2, #65	@ 0x41
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b21      	cmp	r3, #33	@ 0x21
 80049d4:	d108      	bne.n	80049e8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2101      	movs	r1, #1
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fcc8 	bl	8005370 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2211      	movs	r2, #17
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80049e6:	e00d      	b.n	8004a04 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2241      	movs	r2, #65	@ 0x41
 80049ec:	5c9b      	ldrb	r3, [r3, r2]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b22      	cmp	r3, #34	@ 0x22
 80049f2:	d107      	bne.n	8004a04 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2102      	movs	r1, #2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 fcb9 	bl	8005370 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2212      	movs	r2, #18
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	494e      	ldr	r1, [pc, #312]	@ (8004b48 <I2C_ITMasterCplt+0x194>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b4c <I2C_ITMasterCplt+0x198>)
 8004a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2210      	movs	r2, #16
 8004a24:	4013      	ands	r3, r2
 8004a26:	d009      	beq.n	8004a3c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a34:	2204      	movs	r2, #4
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2241      	movs	r2, #65	@ 0x41
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d109      	bne.n	8004a5c <I2C_ITMasterCplt+0xa8>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d005      	beq.n	8004a5c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 fb81 	bl	8005166 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2241      	movs	r2, #65	@ 0x41
 8004a6e:	5c9b      	ldrb	r3, [r3, r2]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b60      	cmp	r3, #96	@ 0x60
 8004a74:	d002      	beq.n	8004a7c <I2C_ITMasterCplt+0xc8>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 fa43 	bl	8004f10 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a8a:	e058      	b.n	8004b3e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2241      	movs	r2, #65	@ 0x41
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b21      	cmp	r3, #33	@ 0x21
 8004a96:	d126      	bne.n	8004ae6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2241      	movs	r2, #65	@ 0x41
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2242      	movs	r2, #66	@ 0x42
 8004aaa:	5c9b      	ldrb	r3, [r3, r2]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b40      	cmp	r3, #64	@ 0x40
 8004ab0:	d10c      	bne.n	8004acc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2242      	movs	r2, #66	@ 0x42
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2240      	movs	r2, #64	@ 0x40
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7ff f9cc 	bl	8003e62 <HAL_I2C_MemTxCpltCallback>
}
 8004aca:	e038      	b.n	8004b3e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2242      	movs	r2, #66	@ 0x42
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2240      	movs	r2, #64	@ 0x40
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f7ff f9a7 	bl	8003e32 <HAL_I2C_MasterTxCpltCallback>
}
 8004ae4:	e02b      	b.n	8004b3e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2241      	movs	r2, #65	@ 0x41
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b22      	cmp	r3, #34	@ 0x22
 8004af0:	d125      	bne.n	8004b3e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2241      	movs	r2, #65	@ 0x41
 8004af6:	2120      	movs	r1, #32
 8004af8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2242      	movs	r2, #66	@ 0x42
 8004b04:	5c9b      	ldrb	r3, [r3, r2]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b40      	cmp	r3, #64	@ 0x40
 8004b0a:	d10c      	bne.n	8004b26 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2242      	movs	r2, #66	@ 0x42
 8004b10:	2100      	movs	r1, #0
 8004b12:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2240      	movs	r2, #64	@ 0x40
 8004b18:	2100      	movs	r1, #0
 8004b1a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7ff f9a7 	bl	8003e72 <HAL_I2C_MemRxCpltCallback>
}
 8004b24:	e00b      	b.n	8004b3e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2242      	movs	r2, #66	@ 0x42
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2240      	movs	r2, #64	@ 0x40
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff f982 	bl	8003e42 <HAL_I2C_MasterRxCpltCallback>
}
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b006      	add	sp, #24
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	fe00e800 	.word	0xfe00e800
 8004b4c:	ffff0000 	.word	0xffff0000

08004b50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b6c:	200b      	movs	r0, #11
 8004b6e:	183b      	adds	r3, r7, r0
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	2141      	movs	r1, #65	@ 0x41
 8004b74:	5c52      	ldrb	r2, [r2, r1]
 8004b76:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b80:	183b      	adds	r3, r7, r0
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b21      	cmp	r3, #33	@ 0x21
 8004b86:	d003      	beq.n	8004b90 <I2C_ITSlaveCplt+0x40>
 8004b88:	183b      	adds	r3, r7, r0
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b29      	cmp	r3, #41	@ 0x29
 8004b8e:	d109      	bne.n	8004ba4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b90:	4aac      	ldr	r2, [pc, #688]	@ (8004e44 <I2C_ITSlaveCplt+0x2f4>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0011      	movs	r1, r2
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 fbea 	bl	8005370 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2221      	movs	r2, #33	@ 0x21
 8004ba0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ba2:	e020      	b.n	8004be6 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ba4:	220b      	movs	r2, #11
 8004ba6:	18bb      	adds	r3, r7, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b22      	cmp	r3, #34	@ 0x22
 8004bac:	d003      	beq.n	8004bb6 <I2C_ITSlaveCplt+0x66>
 8004bae:	18bb      	adds	r3, r7, r2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bb4:	d109      	bne.n	8004bca <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004bb6:	4aa4      	ldr	r2, [pc, #656]	@ (8004e48 <I2C_ITSlaveCplt+0x2f8>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0011      	movs	r1, r2
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fbd7 	bl	8005370 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2222      	movs	r2, #34	@ 0x22
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bc8:	e00d      	b.n	8004be6 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004bca:	230b      	movs	r3, #11
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b28      	cmp	r3, #40	@ 0x28
 8004bd2:	d108      	bne.n	8004be6 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004bd4:	4a9d      	ldr	r2, [pc, #628]	@ (8004e4c <I2C_ITSlaveCplt+0x2fc>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 fbc8 	bl	8005370 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2180      	movs	r1, #128	@ 0x80
 8004bf2:	0209      	lsls	r1, r1, #8
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4993      	ldr	r1, [pc, #588]	@ (8004e50 <I2C_ITSlaveCplt+0x300>)
 8004c04:	400a      	ands	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 faab 	bl	8005166 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	2380      	movs	r3, #128	@ 0x80
 8004c14:	01db      	lsls	r3, r3, #7
 8004c16:	4013      	ands	r3, r2
 8004c18:	d013      	beq.n	8004c42 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	498b      	ldr	r1, [pc, #556]	@ (8004e54 <I2C_ITSlaveCplt+0x304>)
 8004c26:	400a      	ands	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01f      	beq.n	8004c72 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c40:	e017      	b.n	8004c72 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d012      	beq.n	8004c72 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4980      	ldr	r1, [pc, #512]	@ (8004e58 <I2C_ITSlaveCplt+0x308>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2204      	movs	r2, #4
 8004c76:	4013      	ands	r3, r2
 8004c78:	d020      	beq.n	8004cbc <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	4393      	bics	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	2204      	movs	r2, #4
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d04f      	beq.n	8004d7a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ce0:	d04b      	beq.n	8004d7a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d12d      	bne.n	8004d48 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2241      	movs	r2, #65	@ 0x41
 8004cf0:	5c9b      	ldrb	r3, [r3, r2]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b28      	cmp	r3, #40	@ 0x28
 8004cf6:	d10b      	bne.n	8004d10 <I2C_ITSlaveCplt+0x1c0>
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	049b      	lsls	r3, r3, #18
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d106      	bne.n	8004d10 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 f8a9 	bl	8004e60 <I2C_ITListenCplt>
 8004d0e:	e034      	b.n	8004d7a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2241      	movs	r2, #65	@ 0x41
 8004d14:	5c9b      	ldrb	r3, [r3, r2]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b29      	cmp	r3, #41	@ 0x29
 8004d1a:	d110      	bne.n	8004d3e <I2C_ITSlaveCplt+0x1ee>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a4f      	ldr	r2, [pc, #316]	@ (8004e5c <I2C_ITSlaveCplt+0x30c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00c      	beq.n	8004d3e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 fa19 	bl	8005166 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff fdd8 	bl	80048ec <I2C_ITSlaveSeqCplt>
 8004d3c:	e01d      	b.n	8004d7a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	61da      	str	r2, [r3, #28]
 8004d46:	e018      	b.n	8004d7a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d54:	2204      	movs	r2, #4
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <I2C_ITSlaveCplt+0x21c>
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	045b      	lsls	r3, r3, #17
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d106      	bne.n	8004d7a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f000 f8cb 	bl	8004f10 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2242      	movs	r2, #66	@ 0x42
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 f8b9 	bl	8004f10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2241      	movs	r2, #65	@ 0x41
 8004da2:	5c9b      	ldrb	r3, [r3, r2]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b28      	cmp	r3, #40	@ 0x28
 8004da8:	d147      	bne.n	8004e3a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	0011      	movs	r1, r2
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f855 	bl	8004e60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004db6:	e040      	b.n	8004e3a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	4a27      	ldr	r2, [pc, #156]	@ (8004e5c <I2C_ITSlaveCplt+0x30c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d016      	beq.n	8004df0 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7ff fd91 	bl	80048ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a23      	ldr	r2, [pc, #140]	@ (8004e5c <I2C_ITSlaveCplt+0x30c>)
 8004dce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2241      	movs	r2, #65	@ 0x41
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2240      	movs	r2, #64	@ 0x40
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fc fd1b 	bl	8001824 <HAL_I2C_ListenCpltCallback>
}
 8004dee:	e024      	b.n	8004e3a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2241      	movs	r2, #65	@ 0x41
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b22      	cmp	r3, #34	@ 0x22
 8004dfa:	d10f      	bne.n	8004e1c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2241      	movs	r2, #65	@ 0x41
 8004e00:	2120      	movs	r1, #32
 8004e02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2240      	movs	r2, #64	@ 0x40
 8004e0e:	2100      	movs	r1, #0
 8004e10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fc fd49 	bl	80018ac <HAL_I2C_SlaveRxCpltCallback>
}
 8004e1a:	e00e      	b.n	8004e3a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2241      	movs	r2, #65	@ 0x41
 8004e20:	2120      	movs	r1, #32
 8004e22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2240      	movs	r2, #64	@ 0x40
 8004e2e:	2100      	movs	r1, #0
 8004e30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7ff f80c 	bl	8003e52 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b006      	add	sp, #24
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	00008001 	.word	0x00008001
 8004e48:	00008002 	.word	0x00008002
 8004e4c:	00008003 	.word	0x00008003
 8004e50:	fe00e800 	.word	0xfe00e800
 8004e54:	ffffbfff 	.word	0xffffbfff
 8004e58:	ffff7fff 	.word	0xffff7fff
 8004e5c:	ffff0000 	.word	0xffff0000

08004e60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <I2C_ITListenCplt+0xa8>)
 8004e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2241      	movs	r2, #65	@ 0x41
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2242      	movs	r2, #66	@ 0x42
 8004e82:	2100      	movs	r1, #0
 8004e84:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	4013      	ands	r3, r2
 8004e92:	d022      	beq.n	8004eda <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eda:	4a0c      	ldr	r2, [pc, #48]	@ (8004f0c <I2C_ITListenCplt+0xac>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0011      	movs	r1, r2
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fa45 	bl	8005370 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2210      	movs	r2, #16
 8004eec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2240      	movs	r2, #64	@ 0x40
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7fc fc93 	bl	8001824 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	ffff0000 	.word	0xffff0000
 8004f0c:	00008003 	.word	0x00008003

08004f10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f1a:	200f      	movs	r0, #15
 8004f1c:	183b      	adds	r3, r7, r0
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	2141      	movs	r1, #65	@ 0x41
 8004f22:	5c52      	ldrb	r2, [r2, r1]
 8004f24:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2242      	movs	r2, #66	@ 0x42
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a72      	ldr	r2, [pc, #456]	@ (80050fc <I2C_ITError+0x1ec>)
 8004f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f46:	183b      	adds	r3, r7, r0
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b28      	cmp	r3, #40	@ 0x28
 8004f4c:	d007      	beq.n	8004f5e <I2C_ITError+0x4e>
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b29      	cmp	r3, #41	@ 0x29
 8004f54:	d003      	beq.n	8004f5e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f5c:	d10c      	bne.n	8004f78 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2103      	movs	r1, #3
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 fa04 	bl	8005370 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2241      	movs	r2, #65	@ 0x41
 8004f6c:	2128      	movs	r1, #40	@ 0x28
 8004f6e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a63      	ldr	r2, [pc, #396]	@ (8005100 <I2C_ITError+0x1f0>)
 8004f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f76:	e032      	b.n	8004fde <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f78:	4a62      	ldr	r2, [pc, #392]	@ (8005104 <I2C_ITError+0x1f4>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0011      	movs	r1, r2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f000 f9f6 	bl	8005370 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 f8ed 	bl	8005166 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2241      	movs	r2, #65	@ 0x41
 8004f90:	5c9b      	ldrb	r3, [r3, r2]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b60      	cmp	r3, #96	@ 0x60
 8004f96:	d01f      	beq.n	8004fd8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2241      	movs	r2, #65	@ 0x41
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d114      	bne.n	8004fd8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d109      	bne.n	8004fd0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc8:	2204      	movs	r2, #4
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d03b      	beq.n	8005064 <I2C_ITError+0x154>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b11      	cmp	r3, #17
 8004ff0:	d002      	beq.n	8004ff8 <I2C_ITError+0xe8>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b21      	cmp	r3, #33	@ 0x21
 8004ff6:	d135      	bne.n	8005064 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	01db      	lsls	r3, r3, #7
 8005002:	401a      	ands	r2, r3
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	01db      	lsls	r3, r3, #7
 8005008:	429a      	cmp	r2, r3
 800500a:	d107      	bne.n	800501c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	493c      	ldr	r1, [pc, #240]	@ (8005108 <I2C_ITError+0x1f8>)
 8005018:	400a      	ands	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	0018      	movs	r0, r3
 8005022:	f7fe f94a 	bl	80032ba <HAL_DMA_GetState>
 8005026:	0003      	movs	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d016      	beq.n	800505a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	4a36      	ldr	r2, [pc, #216]	@ (800510c <I2C_ITError+0x1fc>)
 8005032:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2240      	movs	r2, #64	@ 0x40
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	0018      	movs	r0, r3
 8005042:	f7fe f853 	bl	80030ec <HAL_DMA_Abort_IT>
 8005046:	1e03      	subs	r3, r0, #0
 8005048:	d051      	beq.n	80050ee <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	0018      	movs	r0, r3
 8005056:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005058:	e049      	b.n	80050ee <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	0018      	movs	r0, r3
 800505e:	f000 f859 	bl	8005114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005062:	e044      	b.n	80050ee <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03b      	beq.n	80050e4 <I2C_ITError+0x1d4>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b12      	cmp	r3, #18
 8005070:	d002      	beq.n	8005078 <I2C_ITError+0x168>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b22      	cmp	r3, #34	@ 0x22
 8005076:	d135      	bne.n	80050e4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	@ 0x80
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	401a      	ands	r2, r3
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	429a      	cmp	r2, r3
 800508a:	d107      	bne.n	800509c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	491e      	ldr	r1, [pc, #120]	@ (8005110 <I2C_ITError+0x200>)
 8005098:	400a      	ands	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe f90a 	bl	80032ba <HAL_DMA_GetState>
 80050a6:	0003      	movs	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d016      	beq.n	80050da <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	4a16      	ldr	r2, [pc, #88]	@ (800510c <I2C_ITError+0x1fc>)
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2240      	movs	r2, #64	@ 0x40
 80050b8:	2100      	movs	r1, #0
 80050ba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fe f813 	bl	80030ec <HAL_DMA_Abort_IT>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d013      	beq.n	80050f2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	0018      	movs	r0, r3
 80050d6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050d8:	e00b      	b.n	80050f2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f819 	bl	8005114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050e2:	e006      	b.n	80050f2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 f814 	bl	8005114 <I2C_TreatErrorCallback>
  }
}
 80050ec:	e002      	b.n	80050f4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	e000      	b.n	80050f4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050f2:	46c0      	nop			@ (mov r8, r8)
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b004      	add	sp, #16
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	ffff0000 	.word	0xffff0000
 8005100:	08003ea9 	.word	0x08003ea9
 8005104:	00008003 	.word	0x00008003
 8005108:	ffffbfff 	.word	0xffffbfff
 800510c:	080051ab 	.word	0x080051ab
 8005110:	ffff7fff 	.word	0xffff7fff

08005114 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2241      	movs	r2, #65	@ 0x41
 8005120:	5c9b      	ldrb	r3, [r3, r2]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b60      	cmp	r3, #96	@ 0x60
 8005126:	d10f      	bne.n	8005148 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2241      	movs	r2, #65	@ 0x41
 800512c:	2120      	movs	r1, #32
 800512e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2240      	movs	r2, #64	@ 0x40
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f7fe fe9e 	bl	8003e82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005146:	e00a      	b.n	800515e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2240      	movs	r2, #64	@ 0x40
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f7fc fbdf 	bl	800191c <HAL_I2C_ErrorCallback>
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d103      	bne.n	8005184 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2201      	movs	r2, #1
 800518c:	4013      	ands	r3, r2
 800518e:	2b01      	cmp	r3, #1
 8005190:	d007      	beq.n	80051a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2101      	movs	r1, #1
 800519e:	430a      	orrs	r2, r1
 80051a0:	619a      	str	r2, [r3, #24]
  }
}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b002      	add	sp, #8
 80051a8:	bd80      	pop	{r7, pc}

080051aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	2200      	movs	r2, #0
 80051c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	2200      	movs	r2, #0
 80051d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0018      	movs	r0, r3
 80051dc:	f7ff ff9a 	bl	8005114 <I2C_TreatErrorCallback>
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b004      	add	sp, #16
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	0008      	movs	r0, r1
 80051f2:	0011      	movs	r1, r2
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	240a      	movs	r4, #10
 80051f8:	193b      	adds	r3, r7, r4
 80051fa:	1c02      	adds	r2, r0, #0
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	2009      	movs	r0, #9
 8005200:	183b      	adds	r3, r7, r0
 8005202:	1c0a      	adds	r2, r1, #0
 8005204:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005206:	193b      	adds	r3, r7, r4
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	059b      	lsls	r3, r3, #22
 800520c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800520e:	183b      	adds	r3, r7, r0
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	0419      	lsls	r1, r3, #16
 8005214:	23ff      	movs	r3, #255	@ 0xff
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800521a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005222:	4313      	orrs	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005232:	0d51      	lsrs	r1, r2, #21
 8005234:	2280      	movs	r2, #128	@ 0x80
 8005236:	00d2      	lsls	r2, r2, #3
 8005238:	400a      	ands	r2, r1
 800523a:	4907      	ldr	r1, [pc, #28]	@ (8005258 <I2C_TransferConfig+0x70>)
 800523c:	430a      	orrs	r2, r1
 800523e:	43d2      	mvns	r2, r2
 8005240:	401a      	ands	r2, r3
 8005242:	0011      	movs	r1, r2
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b007      	add	sp, #28
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	03ff63ff 	.word	0x03ff63ff

0800525c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	000a      	movs	r2, r1
 8005266:	1cbb      	adds	r3, r7, #2
 8005268:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005272:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <I2C_Enable_IRQ+0x108>)
 8005274:	429a      	cmp	r2, r3
 8005276:	d035      	beq.n	80052e4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800527c:	4b3a      	ldr	r3, [pc, #232]	@ (8005368 <I2C_Enable_IRQ+0x10c>)
 800527e:	429a      	cmp	r2, r3
 8005280:	d030      	beq.n	80052e4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005286:	4b39      	ldr	r3, [pc, #228]	@ (800536c <I2C_Enable_IRQ+0x110>)
 8005288:	429a      	cmp	r2, r3
 800528a:	d02b      	beq.n	80052e4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800528c:	1cbb      	adds	r3, r7, #2
 800528e:	2200      	movs	r2, #0
 8005290:	5e9b      	ldrsh	r3, [r3, r2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da03      	bge.n	800529e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	22b8      	movs	r2, #184	@ 0xb8
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800529e:	1cbb      	adds	r3, r7, #2
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d003      	beq.n	80052b0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	22f2      	movs	r2, #242	@ 0xf2
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052b0:	1cbb      	adds	r3, r7, #2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	2202      	movs	r2, #2
 80052b6:	4013      	ands	r3, r2
 80052b8:	d003      	beq.n	80052c2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	22f4      	movs	r2, #244	@ 0xf4
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052c2:	1cbb      	adds	r3, r7, #2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d103      	bne.n	80052d2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2290      	movs	r2, #144	@ 0x90
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052d2:	1cbb      	adds	r3, r7, #2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d137      	bne.n	800534a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052e2:	e032      	b.n	800534a <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052e4:	1cbb      	adds	r3, r7, #2
 80052e6:	2200      	movs	r2, #0
 80052e8:	5e9b      	ldrsh	r3, [r3, r2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da03      	bge.n	80052f6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22b8      	movs	r2, #184	@ 0xb8
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052f6:	1cbb      	adds	r3, r7, #2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	4013      	ands	r3, r2
 80052fe:	d003      	beq.n	8005308 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	22f2      	movs	r2, #242	@ 0xf2
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005308:	1cbb      	adds	r3, r7, #2
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	2202      	movs	r2, #2
 800530e:	4013      	ands	r3, r2
 8005310:	d003      	beq.n	800531a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	22f4      	movs	r2, #244	@ 0xf4
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800531a:	1cbb      	adds	r3, r7, #2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	2b10      	cmp	r3, #16
 8005320:	d103      	bne.n	800532a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2290      	movs	r2, #144	@ 0x90
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800532a:	1cbb      	adds	r3, r7, #2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	2b20      	cmp	r3, #32
 8005330:	d103      	bne.n	800533a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2260      	movs	r2, #96	@ 0x60
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800533a:	1cbb      	adds	r3, r7, #2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	2b40      	cmp	r3, #64	@ 0x40
 8005340:	d103      	bne.n	800534a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2240      	movs	r2, #64	@ 0x40
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	080040a9 	.word	0x080040a9
 8005368:	08004551 	.word	0x08004551
 800536c:	080042bd 	.word	0x080042bd

08005370 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	000a      	movs	r2, r1
 800537a:	1cbb      	adds	r3, r7, #2
 800537c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005382:	1cbb      	adds	r3, r7, #2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	4013      	ands	r3, r2
 800538a:	d010      	beq.n	80053ae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2242      	movs	r2, #66	@ 0x42
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2241      	movs	r2, #65	@ 0x41
 8005398:	5c9b      	ldrb	r3, [r3, r2]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	001a      	movs	r2, r3
 800539e:	2328      	movs	r3, #40	@ 0x28
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b28      	cmp	r3, #40	@ 0x28
 80053a4:	d003      	beq.n	80053ae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	22b0      	movs	r2, #176	@ 0xb0
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053ae:	1cbb      	adds	r3, r7, #2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	2202      	movs	r2, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	d010      	beq.n	80053da <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2244      	movs	r2, #68	@ 0x44
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2241      	movs	r2, #65	@ 0x41
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	001a      	movs	r2, r3
 80053ca:	2328      	movs	r3, #40	@ 0x28
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b28      	cmp	r3, #40	@ 0x28
 80053d0:	d003      	beq.n	80053da <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22b0      	movs	r2, #176	@ 0xb0
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80053da:	1cbb      	adds	r3, r7, #2
 80053dc:	2200      	movs	r2, #0
 80053de:	5e9b      	ldrsh	r3, [r3, r2]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	da03      	bge.n	80053ec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	22b8      	movs	r2, #184	@ 0xb8
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80053ec:	1cbb      	adds	r3, r7, #2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d103      	bne.n	80053fc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2290      	movs	r2, #144	@ 0x90
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053fc:	1cbb      	adds	r3, r7, #2
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	2b20      	cmp	r3, #32
 8005402:	d103      	bne.n	800540c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800540c:	1cbb      	adds	r3, r7, #2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	d103      	bne.n	800541c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2240      	movs	r2, #64	@ 0x40
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	43d9      	mvns	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	400a      	ands	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	46bd      	mov	sp, r7
 8005432:	b004      	add	sp, #16
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e301      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d100      	bne.n	8005456 <HAL_RCC_OscConfig+0x1e>
 8005454:	e08d      	b.n	8005572 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005456:	4bc3      	ldr	r3, [pc, #780]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	220c      	movs	r2, #12
 800545c:	4013      	ands	r3, r2
 800545e:	2b04      	cmp	r3, #4
 8005460:	d00e      	beq.n	8005480 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005462:	4bc0      	ldr	r3, [pc, #768]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	220c      	movs	r2, #12
 8005468:	4013      	ands	r3, r2
 800546a:	2b08      	cmp	r3, #8
 800546c:	d116      	bne.n	800549c <HAL_RCC_OscConfig+0x64>
 800546e:	4bbd      	ldr	r3, [pc, #756]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	2380      	movs	r3, #128	@ 0x80
 8005474:	025b      	lsls	r3, r3, #9
 8005476:	401a      	ands	r2, r3
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	429a      	cmp	r2, r3
 800547e:	d10d      	bne.n	800549c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	4bb8      	ldr	r3, [pc, #736]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2380      	movs	r3, #128	@ 0x80
 8005486:	029b      	lsls	r3, r3, #10
 8005488:	4013      	ands	r3, r2
 800548a:	d100      	bne.n	800548e <HAL_RCC_OscConfig+0x56>
 800548c:	e070      	b.n	8005570 <HAL_RCC_OscConfig+0x138>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d000      	beq.n	8005498 <HAL_RCC_OscConfig+0x60>
 8005496:	e06b      	b.n	8005570 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e2d8      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x7c>
 80054a4:	4baf      	ldr	r3, [pc, #700]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4bae      	ldr	r3, [pc, #696]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054aa:	2180      	movs	r1, #128	@ 0x80
 80054ac:	0249      	lsls	r1, r1, #9
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e02f      	b.n	8005514 <HAL_RCC_OscConfig+0xdc>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10c      	bne.n	80054d6 <HAL_RCC_OscConfig+0x9e>
 80054bc:	4ba9      	ldr	r3, [pc, #676]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4ba8      	ldr	r3, [pc, #672]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054c2:	49a9      	ldr	r1, [pc, #676]	@ (8005768 <HAL_RCC_OscConfig+0x330>)
 80054c4:	400a      	ands	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	4ba6      	ldr	r3, [pc, #664]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4ba5      	ldr	r3, [pc, #660]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054ce:	49a7      	ldr	r1, [pc, #668]	@ (800576c <HAL_RCC_OscConfig+0x334>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e01e      	b.n	8005514 <HAL_RCC_OscConfig+0xdc>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d10e      	bne.n	80054fc <HAL_RCC_OscConfig+0xc4>
 80054de:	4ba1      	ldr	r3, [pc, #644]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4ba0      	ldr	r3, [pc, #640]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054e4:	2180      	movs	r1, #128	@ 0x80
 80054e6:	02c9      	lsls	r1, r1, #11
 80054e8:	430a      	orrs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b9c      	ldr	r3, [pc, #624]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054f2:	2180      	movs	r1, #128	@ 0x80
 80054f4:	0249      	lsls	r1, r1, #9
 80054f6:	430a      	orrs	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0xdc>
 80054fc:	4b99      	ldr	r3, [pc, #612]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b98      	ldr	r3, [pc, #608]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005502:	4999      	ldr	r1, [pc, #612]	@ (8005768 <HAL_RCC_OscConfig+0x330>)
 8005504:	400a      	ands	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	4b96      	ldr	r3, [pc, #600]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b95      	ldr	r3, [pc, #596]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800550e:	4997      	ldr	r1, [pc, #604]	@ (800576c <HAL_RCC_OscConfig+0x334>)
 8005510:	400a      	ands	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d014      	beq.n	8005546 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd f822 	bl	8002564 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005526:	f7fd f81d 	bl	8002564 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	@ 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e28a      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005538:	4b8a      	ldr	r3, [pc, #552]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	4013      	ands	r3, r2
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0xee>
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fd f80d 	bl	8002564 <HAL_GetTick>
 800554a:	0003      	movs	r3, r0
 800554c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005550:	f7fd f808 	bl	8002564 <HAL_GetTick>
 8005554:	0002      	movs	r2, r0
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	@ 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e275      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005562:	4b80      	ldr	r3, [pc, #512]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	4013      	ands	r3, r2
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x118>
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	4013      	ands	r3, r2
 800557a:	d100      	bne.n	800557e <HAL_RCC_OscConfig+0x146>
 800557c:	e069      	b.n	8005652 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800557e:	4b79      	ldr	r3, [pc, #484]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	220c      	movs	r2, #12
 8005584:	4013      	ands	r3, r2
 8005586:	d00b      	beq.n	80055a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005588:	4b76      	ldr	r3, [pc, #472]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	220c      	movs	r2, #12
 800558e:	4013      	ands	r3, r2
 8005590:	2b08      	cmp	r3, #8
 8005592:	d11c      	bne.n	80055ce <HAL_RCC_OscConfig+0x196>
 8005594:	4b73      	ldr	r3, [pc, #460]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	2380      	movs	r3, #128	@ 0x80
 800559a:	025b      	lsls	r3, r3, #9
 800559c:	4013      	ands	r3, r2
 800559e:	d116      	bne.n	80055ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a0:	4b70      	ldr	r3, [pc, #448]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x17e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e24b      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b6:	4b6b      	ldr	r3, [pc, #428]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	22f8      	movs	r2, #248	@ 0xf8
 80055bc:	4393      	bics	r3, r2
 80055be:	0019      	movs	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	00da      	lsls	r2, r3, #3
 80055c6:	4b67      	ldr	r3, [pc, #412]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055cc:	e041      	b.n	8005652 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d024      	beq.n	8005620 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d6:	4b63      	ldr	r3, [pc, #396]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b62      	ldr	r3, [pc, #392]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80055dc:	2101      	movs	r1, #1
 80055de:	430a      	orrs	r2, r1
 80055e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e2:	f7fc ffbf 	bl	8002564 <HAL_GetTick>
 80055e6:	0003      	movs	r3, r0
 80055e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ec:	f7fc ffba 	bl	8002564 <HAL_GetTick>
 80055f0:	0002      	movs	r2, r0
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e227      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fe:	4b59      	ldr	r3, [pc, #356]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2202      	movs	r2, #2
 8005604:	4013      	ands	r3, r2
 8005606:	d0f1      	beq.n	80055ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	4b56      	ldr	r3, [pc, #344]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	22f8      	movs	r2, #248	@ 0xf8
 800560e:	4393      	bics	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	00da      	lsls	r2, r3, #3
 8005618:	4b52      	ldr	r3, [pc, #328]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e018      	b.n	8005652 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005620:	4b50      	ldr	r3, [pc, #320]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b4f      	ldr	r3, [pc, #316]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005626:	2101      	movs	r1, #1
 8005628:	438a      	bics	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fc ff9a 	bl	8002564 <HAL_GetTick>
 8005630:	0003      	movs	r3, r0
 8005632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005636:	f7fc ff95 	bl	8002564 <HAL_GetTick>
 800563a:	0002      	movs	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e202      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005648:	4b46      	ldr	r3, [pc, #280]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2202      	movs	r2, #2
 800564e:	4013      	ands	r3, r2
 8005650:	d1f1      	bne.n	8005636 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2208      	movs	r2, #8
 8005658:	4013      	ands	r3, r2
 800565a:	d036      	beq.n	80056ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d019      	beq.n	8005698 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005664:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005666:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005668:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800566a:	2101      	movs	r1, #1
 800566c:	430a      	orrs	r2, r1
 800566e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005670:	f7fc ff78 	bl	8002564 <HAL_GetTick>
 8005674:	0003      	movs	r3, r0
 8005676:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567a:	f7fc ff73 	bl	8002564 <HAL_GetTick>
 800567e:	0002      	movs	r2, r0
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e1e0      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568c:	4b35      	ldr	r3, [pc, #212]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	2202      	movs	r2, #2
 8005692:	4013      	ands	r3, r2
 8005694:	d0f1      	beq.n	800567a <HAL_RCC_OscConfig+0x242>
 8005696:	e018      	b.n	80056ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005698:	4b32      	ldr	r3, [pc, #200]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800569a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800569c:	4b31      	ldr	r3, [pc, #196]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800569e:	2101      	movs	r1, #1
 80056a0:	438a      	bics	r2, r1
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a4:	f7fc ff5e 	bl	8002564 <HAL_GetTick>
 80056a8:	0003      	movs	r3, r0
 80056aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ae:	f7fc ff59 	bl	8002564 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e1c6      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c0:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	2202      	movs	r2, #2
 80056c6:	4013      	ands	r3, r2
 80056c8:	d1f1      	bne.n	80056ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2204      	movs	r2, #4
 80056d0:	4013      	ands	r3, r2
 80056d2:	d100      	bne.n	80056d6 <HAL_RCC_OscConfig+0x29e>
 80056d4:	e0b4      	b.n	8005840 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d6:	201f      	movs	r0, #31
 80056d8:	183b      	adds	r3, r7, r0
 80056da:	2200      	movs	r2, #0
 80056dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056de:	4b21      	ldr	r3, [pc, #132]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	055b      	lsls	r3, r3, #21
 80056e6:	4013      	ands	r3, r2
 80056e8:	d110      	bne.n	800570c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80056f0:	2180      	movs	r1, #128	@ 0x80
 80056f2:	0549      	lsls	r1, r1, #21
 80056f4:	430a      	orrs	r2, r1
 80056f6:	61da      	str	r2, [r3, #28]
 80056f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	2380      	movs	r3, #128	@ 0x80
 80056fe:	055b      	lsls	r3, r3, #21
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005706:	183b      	adds	r3, r7, r0
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570c:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <HAL_RCC_OscConfig+0x338>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4013      	ands	r3, r2
 8005716:	d11a      	bne.n	800574e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005718:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <HAL_RCC_OscConfig+0x338>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4b14      	ldr	r3, [pc, #80]	@ (8005770 <HAL_RCC_OscConfig+0x338>)
 800571e:	2180      	movs	r1, #128	@ 0x80
 8005720:	0049      	lsls	r1, r1, #1
 8005722:	430a      	orrs	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005726:	f7fc ff1d 	bl	8002564 <HAL_GetTick>
 800572a:	0003      	movs	r3, r0
 800572c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005730:	f7fc ff18 	bl	8002564 <HAL_GetTick>
 8005734:	0002      	movs	r2, r0
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	@ 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e185      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <HAL_RCC_OscConfig+0x338>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	2380      	movs	r3, #128	@ 0x80
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4013      	ands	r3, r2
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d10e      	bne.n	8005774 <HAL_RCC_OscConfig+0x33c>
 8005756:	4b03      	ldr	r3, [pc, #12]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	4b02      	ldr	r3, [pc, #8]	@ (8005764 <HAL_RCC_OscConfig+0x32c>)
 800575c:	2101      	movs	r1, #1
 800575e:	430a      	orrs	r2, r1
 8005760:	621a      	str	r2, [r3, #32]
 8005762:	e035      	b.n	80057d0 <HAL_RCC_OscConfig+0x398>
 8005764:	40021000 	.word	0x40021000
 8005768:	fffeffff 	.word	0xfffeffff
 800576c:	fffbffff 	.word	0xfffbffff
 8005770:	40007000 	.word	0x40007000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <HAL_RCC_OscConfig+0x35e>
 800577c:	4bb6      	ldr	r3, [pc, #728]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	4bb5      	ldr	r3, [pc, #724]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005782:	2101      	movs	r1, #1
 8005784:	438a      	bics	r2, r1
 8005786:	621a      	str	r2, [r3, #32]
 8005788:	4bb3      	ldr	r3, [pc, #716]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	4bb2      	ldr	r3, [pc, #712]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800578e:	2104      	movs	r1, #4
 8005790:	438a      	bics	r2, r1
 8005792:	621a      	str	r2, [r3, #32]
 8005794:	e01c      	b.n	80057d0 <HAL_RCC_OscConfig+0x398>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b05      	cmp	r3, #5
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x380>
 800579e:	4bae      	ldr	r3, [pc, #696]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	4bad      	ldr	r3, [pc, #692]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057a4:	2104      	movs	r1, #4
 80057a6:	430a      	orrs	r2, r1
 80057a8:	621a      	str	r2, [r3, #32]
 80057aa:	4bab      	ldr	r3, [pc, #684]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	4baa      	ldr	r3, [pc, #680]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057b0:	2101      	movs	r1, #1
 80057b2:	430a      	orrs	r2, r1
 80057b4:	621a      	str	r2, [r3, #32]
 80057b6:	e00b      	b.n	80057d0 <HAL_RCC_OscConfig+0x398>
 80057b8:	4ba7      	ldr	r3, [pc, #668]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	4ba6      	ldr	r3, [pc, #664]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057be:	2101      	movs	r1, #1
 80057c0:	438a      	bics	r2, r1
 80057c2:	621a      	str	r2, [r3, #32]
 80057c4:	4ba4      	ldr	r3, [pc, #656]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	4ba3      	ldr	r3, [pc, #652]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057ca:	2104      	movs	r1, #4
 80057cc:	438a      	bics	r2, r1
 80057ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d014      	beq.n	8005802 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d8:	f7fc fec4 	bl	8002564 <HAL_GetTick>
 80057dc:	0003      	movs	r3, r0
 80057de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e0:	e009      	b.n	80057f6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e2:	f7fc febf 	bl	8002564 <HAL_GetTick>
 80057e6:	0002      	movs	r2, r0
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	4a9b      	ldr	r2, [pc, #620]	@ (8005a5c <HAL_RCC_OscConfig+0x624>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e12b      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f6:	4b98      	ldr	r3, [pc, #608]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	2202      	movs	r2, #2
 80057fc:	4013      	ands	r3, r2
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x3aa>
 8005800:	e013      	b.n	800582a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005802:	f7fc feaf 	bl	8002564 <HAL_GetTick>
 8005806:	0003      	movs	r3, r0
 8005808:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800580a:	e009      	b.n	8005820 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f7fc feaa 	bl	8002564 <HAL_GetTick>
 8005810:	0002      	movs	r2, r0
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	4a91      	ldr	r2, [pc, #580]	@ (8005a5c <HAL_RCC_OscConfig+0x624>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e116      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005820:	4b8d      	ldr	r3, [pc, #564]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	2202      	movs	r2, #2
 8005826:	4013      	ands	r3, r2
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800582a:	231f      	movs	r3, #31
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d105      	bne.n	8005840 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005834:	4b88      	ldr	r3, [pc, #544]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	4b87      	ldr	r3, [pc, #540]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800583a:	4989      	ldr	r1, [pc, #548]	@ (8005a60 <HAL_RCC_OscConfig+0x628>)
 800583c:	400a      	ands	r2, r1
 800583e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2210      	movs	r2, #16
 8005846:	4013      	ands	r3, r2
 8005848:	d063      	beq.n	8005912 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d12a      	bne.n	80058a8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005852:	4b81      	ldr	r3, [pc, #516]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005856:	4b80      	ldr	r3, [pc, #512]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005858:	2104      	movs	r1, #4
 800585a:	430a      	orrs	r2, r1
 800585c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800585e:	4b7e      	ldr	r3, [pc, #504]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005862:	4b7d      	ldr	r3, [pc, #500]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005864:	2101      	movs	r1, #1
 8005866:	430a      	orrs	r2, r1
 8005868:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586a:	f7fc fe7b 	bl	8002564 <HAL_GetTick>
 800586e:	0003      	movs	r3, r0
 8005870:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005874:	f7fc fe76 	bl	8002564 <HAL_GetTick>
 8005878:	0002      	movs	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e0e3      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005886:	4b74      	ldr	r3, [pc, #464]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588a:	2202      	movs	r2, #2
 800588c:	4013      	ands	r3, r2
 800588e:	d0f1      	beq.n	8005874 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005890:	4b71      	ldr	r3, [pc, #452]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005894:	22f8      	movs	r2, #248	@ 0xf8
 8005896:	4393      	bics	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	00da      	lsls	r2, r3, #3
 80058a0:	4b6d      	ldr	r3, [pc, #436]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058a2:	430a      	orrs	r2, r1
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80058a6:	e034      	b.n	8005912 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	3305      	adds	r3, #5
 80058ae:	d111      	bne.n	80058d4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80058b0:	4b69      	ldr	r3, [pc, #420]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058b4:	4b68      	ldr	r3, [pc, #416]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058b6:	2104      	movs	r1, #4
 80058b8:	438a      	bics	r2, r1
 80058ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80058bc:	4b66      	ldr	r3, [pc, #408]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c0:	22f8      	movs	r2, #248	@ 0xf8
 80058c2:	4393      	bics	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	00da      	lsls	r2, r3, #3
 80058cc:	4b62      	ldr	r3, [pc, #392]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80058d2:	e01e      	b.n	8005912 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80058d4:	4b60      	ldr	r3, [pc, #384]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058da:	2104      	movs	r1, #4
 80058dc:	430a      	orrs	r2, r1
 80058de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80058e0:	4b5d      	ldr	r3, [pc, #372]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80058e6:	2101      	movs	r1, #1
 80058e8:	438a      	bics	r2, r1
 80058ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ec:	f7fc fe3a 	bl	8002564 <HAL_GetTick>
 80058f0:	0003      	movs	r3, r0
 80058f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80058f6:	f7fc fe35 	bl	8002564 <HAL_GetTick>
 80058fa:	0002      	movs	r2, r0
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0a2      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005908:	4b53      	ldr	r3, [pc, #332]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800590a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590c:	2202      	movs	r2, #2
 800590e:	4013      	ands	r3, r2
 8005910:	d1f1      	bne.n	80058f6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d100      	bne.n	800591c <HAL_RCC_OscConfig+0x4e4>
 800591a:	e097      	b.n	8005a4c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800591c:	4b4e      	ldr	r3, [pc, #312]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	220c      	movs	r2, #12
 8005922:	4013      	ands	r3, r2
 8005924:	2b08      	cmp	r3, #8
 8005926:	d100      	bne.n	800592a <HAL_RCC_OscConfig+0x4f2>
 8005928:	e06b      	b.n	8005a02 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d14c      	bne.n	80059cc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005932:	4b49      	ldr	r3, [pc, #292]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b48      	ldr	r3, [pc, #288]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005938:	494a      	ldr	r1, [pc, #296]	@ (8005a64 <HAL_RCC_OscConfig+0x62c>)
 800593a:	400a      	ands	r2, r1
 800593c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fc fe11 	bl	8002564 <HAL_GetTick>
 8005942:	0003      	movs	r3, r0
 8005944:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005948:	f7fc fe0c 	bl	8002564 <HAL_GetTick>
 800594c:	0002      	movs	r2, r0
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e079      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800595a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	2380      	movs	r3, #128	@ 0x80
 8005960:	049b      	lsls	r3, r3, #18
 8005962:	4013      	ands	r3, r2
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005966:	4b3c      	ldr	r3, [pc, #240]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	220f      	movs	r2, #15
 800596c:	4393      	bics	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005974:	4b38      	ldr	r3, [pc, #224]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005976:	430a      	orrs	r2, r1
 8005978:	62da      	str	r2, [r3, #44]	@ 0x2c
 800597a:	4b37      	ldr	r3, [pc, #220]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a68 <HAL_RCC_OscConfig+0x630>)
 8005980:	4013      	ands	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	431a      	orrs	r2, r3
 800598e:	4b32      	ldr	r3, [pc, #200]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005990:	430a      	orrs	r2, r1
 8005992:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005994:	4b30      	ldr	r3, [pc, #192]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 800599a:	2180      	movs	r1, #128	@ 0x80
 800599c:	0449      	lsls	r1, r1, #17
 800599e:	430a      	orrs	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fc fddf 	bl	8002564 <HAL_GetTick>
 80059a6:	0003      	movs	r3, r0
 80059a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fc fdda 	bl	8002564 <HAL_GetTick>
 80059b0:	0002      	movs	r2, r0
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e047      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059be:	4b26      	ldr	r3, [pc, #152]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	049b      	lsls	r3, r3, #18
 80059c6:	4013      	ands	r3, r2
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x574>
 80059ca:	e03f      	b.n	8005a4c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059cc:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b21      	ldr	r3, [pc, #132]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80059d2:	4924      	ldr	r1, [pc, #144]	@ (8005a64 <HAL_RCC_OscConfig+0x62c>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fc fdc4 	bl	8002564 <HAL_GetTick>
 80059dc:	0003      	movs	r3, r0
 80059de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fc fdbf 	bl	8002564 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e02c      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059f4:	4b18      	ldr	r3, [pc, #96]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	049b      	lsls	r3, r3, #18
 80059fc:	4013      	ands	r3, r2
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x5aa>
 8005a00:	e024      	b.n	8005a4c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e01f      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005a0e:	4b12      	ldr	r3, [pc, #72]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <HAL_RCC_OscConfig+0x620>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	025b      	lsls	r3, r3, #9
 8005a20:	401a      	ands	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d10e      	bne.n	8005a48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	220f      	movs	r2, #15
 8005a2e:	401a      	ands	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	23f0      	movs	r3, #240	@ 0xf0
 8005a3c:	039b      	lsls	r3, r3, #14
 8005a3e:	401a      	ands	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	0018      	movs	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b008      	add	sp, #32
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	00001388 	.word	0x00001388
 8005a60:	efffffff 	.word	0xefffffff
 8005a64:	feffffff 	.word	0xfeffffff
 8005a68:	ffc2ffff 	.word	0xffc2ffff

08005a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0b3      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a80:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2201      	movs	r2, #1
 8005a86:	4013      	ands	r3, r2
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d911      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8e:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2201      	movs	r2, #1
 8005a94:	4393      	bics	r3, r2
 8005a96:	0019      	movs	r1, r3
 8005a98:	4b55      	ldr	r3, [pc, #340]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa0:	4b53      	ldr	r3, [pc, #332]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e09a      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d015      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d006      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005acc:	21e0      	movs	r1, #224	@ 0xe0
 8005ace:	00c9      	lsls	r1, r1, #3
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b47      	ldr	r3, [pc, #284]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	22f0      	movs	r2, #240	@ 0xf0
 8005ada:	4393      	bics	r3, r2
 8005adc:	0019      	movs	r1, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	4b44      	ldr	r3, [pc, #272]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	4013      	ands	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d107      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	2380      	movs	r3, #128	@ 0x80
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	4013      	ands	r3, r2
 8005b04:	d114      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e06e      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b12:	4b38      	ldr	r3, [pc, #224]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	049b      	lsls	r3, r3, #18
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d108      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e062      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b22:	4b34      	ldr	r3, [pc, #208]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2202      	movs	r2, #2
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e05b      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b30:	4b30      	ldr	r3, [pc, #192]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2203      	movs	r2, #3
 8005b36:	4393      	bics	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b44:	f7fc fd0e 	bl	8002564 <HAL_GetTick>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4c:	e009      	b.n	8005b62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4e:	f7fc fd09 	bl	8002564 <HAL_GetTick>
 8005b52:	0002      	movs	r2, r0
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	4a27      	ldr	r2, [pc, #156]	@ (8005bf8 <HAL_RCC_ClockConfig+0x18c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e042      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	4b24      	ldr	r3, [pc, #144]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	220c      	movs	r2, #12
 8005b68:	401a      	ands	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1ec      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b74:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d211      	bcs.n	8005ba6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	4393      	bics	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b94:	4b16      	ldr	r3, [pc, #88]	@ (8005bf0 <HAL_RCC_ClockConfig+0x184>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e020      	b.n	8005be8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2204      	movs	r2, #4
 8005bac:	4013      	ands	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb0:	4b10      	ldr	r3, [pc, #64]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	@ (8005bfc <HAL_RCC_ClockConfig+0x190>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bc4:	f000 f820 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8005bc8:	0001      	movs	r1, r0
 8005bca:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <HAL_RCC_ClockConfig+0x188>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	220f      	movs	r2, #15
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c00 <HAL_RCC_ClockConfig+0x194>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	000a      	movs	r2, r1
 8005bda:	40da      	lsrs	r2, r3
 8005bdc:	4b09      	ldr	r3, [pc, #36]	@ (8005c04 <HAL_RCC_ClockConfig+0x198>)
 8005bde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005be0:	2003      	movs	r0, #3
 8005be2:	f7fc fc79 	bl	80024d8 <HAL_InitTick>
  
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	0018      	movs	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b004      	add	sp, #16
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	00001388 	.word	0x00001388
 8005bfc:	fffff8ff 	.word	0xfffff8ff
 8005c00:	08005f4c 	.word	0x08005f4c
 8005c04:	20000000 	.word	0x20000000

08005c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	220c      	movs	r2, #12
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d002      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x30>
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x36>
 8005c36:	e02c      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c3a:	613b      	str	r3, [r7, #16]
      break;
 8005c3c:	e02c      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	0c9b      	lsrs	r3, r3, #18
 8005c42:	220f      	movs	r2, #15
 8005c44:	4013      	ands	r3, r2
 8005c46:	4a19      	ldr	r2, [pc, #100]	@ (8005cac <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c48:	5cd3      	ldrb	r3, [r2, r3]
 8005c4a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005c4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c50:	220f      	movs	r2, #15
 8005c52:	4013      	ands	r3, r2
 8005c54:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
 8005c58:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	025b      	lsls	r3, r3, #9
 8005c60:	4013      	ands	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4810      	ldr	r0, [pc, #64]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c68:	f7fa fa4e 	bl	8000108 <__udivsi3>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	001a      	movs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4353      	muls	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e009      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	000a      	movs	r2, r1
 8005c7c:	0152      	lsls	r2, r2, #5
 8005c7e:	1a52      	subs	r2, r2, r1
 8005c80:	0193      	lsls	r3, r2, #6
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	185b      	adds	r3, r3, r1
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	613b      	str	r3, [r7, #16]
      break;
 8005c90:	e002      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c94:	613b      	str	r3, [r7, #16]
      break;
 8005c96:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c98:	693b      	ldr	r3, [r7, #16]
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b006      	add	sp, #24
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	007a1200 	.word	0x007a1200
 8005cac:	08005f5c 	.word	0x08005f5c
 8005cb0:	08005f6c 	.word	0x08005f6c

08005cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	@ 0x80
 8005cca:	025b      	lsls	r3, r3, #9
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005cd0:	e08e      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005cd2:	2017      	movs	r0, #23
 8005cd4:	183b      	adds	r3, r7, r0
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cda:	4b57      	ldr	r3, [pc, #348]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	055b      	lsls	r3, r3, #21
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d110      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ce6:	4b54      	ldr	r3, [pc, #336]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	4b53      	ldr	r3, [pc, #332]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005cec:	2180      	movs	r1, #128	@ 0x80
 8005cee:	0549      	lsls	r1, r1, #21
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	61da      	str	r2, [r3, #28]
 8005cf4:	4b50      	ldr	r3, [pc, #320]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	055b      	lsls	r3, r3, #21
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d02:	183b      	adds	r3, r7, r0
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d08:	4b4c      	ldr	r3, [pc, #304]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	2380      	movs	r3, #128	@ 0x80
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4013      	ands	r3, r2
 8005d12:	d11a      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d14:	4b49      	ldr	r3, [pc, #292]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b48      	ldr	r3, [pc, #288]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d1a:	2180      	movs	r1, #128	@ 0x80
 8005d1c:	0049      	lsls	r1, r1, #1
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d22:	f7fc fc1f 	bl	8002564 <HAL_GetTick>
 8005d26:	0003      	movs	r3, r0
 8005d28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2a:	e008      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2c:	f7fc fc1a 	bl	8002564 <HAL_GetTick>
 8005d30:	0002      	movs	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	@ 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e077      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4013      	ands	r3, r2
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	23c0      	movs	r3, #192	@ 0xc0
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4013      	ands	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d034      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	23c0      	movs	r3, #192	@ 0xc0
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4013      	ands	r3, r2
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d02c      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6c:	4b32      	ldr	r3, [pc, #200]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	4a33      	ldr	r2, [pc, #204]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d76:	4b30      	ldr	r3, [pc, #192]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d7c:	2180      	movs	r1, #128	@ 0x80
 8005d7e:	0249      	lsls	r1, r1, #9
 8005d80:	430a      	orrs	r2, r1
 8005d82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d84:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d86:	6a1a      	ldr	r2, [r3, #32]
 8005d88:	4b2b      	ldr	r3, [pc, #172]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d8a:	492e      	ldr	r1, [pc, #184]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d90:	4b29      	ldr	r3, [pc, #164]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9e:	f7fc fbe1 	bl	8002564 <HAL_GetTick>
 8005da2:	0003      	movs	r3, r0
 8005da4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da6:	e009      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f7fc fbdc 	bl	8002564 <HAL_GetTick>
 8005dac:	0002      	movs	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	4a25      	ldr	r2, [pc, #148]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e038      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	0019      	movs	r1, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	4b18      	ldr	r3, [pc, #96]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dda:	2317      	movs	r3, #23
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d105      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de4:	4b14      	ldr	r3, [pc, #80]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dea:	4918      	ldr	r1, [pc, #96]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005dec:	400a      	ands	r2, r1
 8005dee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	4013      	ands	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	2203      	movs	r2, #3
 8005e00:	4393      	bics	r3, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	4b0b      	ldr	r3, [pc, #44]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2220      	movs	r2, #32
 8005e14:	4013      	ands	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e18:	4b07      	ldr	r3, [pc, #28]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	4393      	bics	r3, r2
 8005e20:	0019      	movs	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	0018      	movs	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b006      	add	sp, #24
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	fffffcff 	.word	0xfffffcff
 8005e44:	fffeffff 	.word	0xfffeffff
 8005e48:	00001388 	.word	0x00001388
 8005e4c:	efffffff 	.word	0xefffffff

08005e50 <memset>:
 8005e50:	0003      	movs	r3, r0
 8005e52:	1882      	adds	r2, r0, r2
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d100      	bne.n	8005e5a <memset+0xa>
 8005e58:	4770      	bx	lr
 8005e5a:	7019      	strb	r1, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	e7f9      	b.n	8005e54 <memset+0x4>

08005e60 <__libc_init_array>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	2600      	movs	r6, #0
 8005e64:	4c0c      	ldr	r4, [pc, #48]	@ (8005e98 <__libc_init_array+0x38>)
 8005e66:	4d0d      	ldr	r5, [pc, #52]	@ (8005e9c <__libc_init_array+0x3c>)
 8005e68:	1b64      	subs	r4, r4, r5
 8005e6a:	10a4      	asrs	r4, r4, #2
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	d109      	bne.n	8005e84 <__libc_init_array+0x24>
 8005e70:	2600      	movs	r6, #0
 8005e72:	f000 f819 	bl	8005ea8 <_init>
 8005e76:	4c0a      	ldr	r4, [pc, #40]	@ (8005ea0 <__libc_init_array+0x40>)
 8005e78:	4d0a      	ldr	r5, [pc, #40]	@ (8005ea4 <__libc_init_array+0x44>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	42a6      	cmp	r6, r4
 8005e80:	d105      	bne.n	8005e8e <__libc_init_array+0x2e>
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	00b3      	lsls	r3, r6, #2
 8005e86:	58eb      	ldr	r3, [r5, r3]
 8005e88:	4798      	blx	r3
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	e7ee      	b.n	8005e6c <__libc_init_array+0xc>
 8005e8e:	00b3      	lsls	r3, r6, #2
 8005e90:	58eb      	ldr	r3, [r5, r3]
 8005e92:	4798      	blx	r3
 8005e94:	3601      	adds	r6, #1
 8005e96:	e7f2      	b.n	8005e7e <__libc_init_array+0x1e>
 8005e98:	08005f7c 	.word	0x08005f7c
 8005e9c:	08005f7c 	.word	0x08005f7c
 8005ea0:	08005f80 	.word	0x08005f80
 8005ea4:	08005f7c 	.word	0x08005f7c

08005ea8 <_init>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_fini>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	46c0      	nop			@ (mov r8, r8)
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr
