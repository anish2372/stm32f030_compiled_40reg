/*
 * i2c_slave.c
 *
 *  Created on: Jun 9, 2023
 *      Author: controllerstech
 */

#include "main.h"
#include "i2c_slave.h"
#include "string.h"

//uint32_t I2C_REGISTERS[48] = {0}; // Declare 41 registers

#define REGISTER_COUNT 48
uint32_t I2C_REGISTERS[REGISTER_COUNT] = {0};
extern uint8_t last_reg_address; // In i2c_slave.h

extern I2C_HandleTypeDef hi2c1;

#define RxSIZE  42  // Handle up to 41 registers + 1 for the address
uint8_t RxData[RxSIZE];
uint8_t rxcount = 0;
uint8_t txcount = 0;
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;
uint8_t last_reg_address = 0; // Initialize to 0 or a sensible default

void process_data(void)
{
    // Validate buffer boundaries early
    if (rxcount >= RxSIZE || RxData[0] >= REGISTER_COUNT) {
        memset(RxData, 0, RxSIZE);
        rxcount = 0;
        return;
    }

    int startREG = RxData[0];             // Starting register
    int numREG = rxcount - 1;             // Total register values received
    int endREG = startREG + numREG - 1;   // Ending register

    if (endREG >= REGISTER_COUNT) {
        // Prevent overflow into invalid registers
        memset(RxData, 0, RxSIZE);
        rxcount = 0;
        return;
    }

    int indx = 1;
    for (int i = 0; i < numREG; i++) {
        uint32_t value = 0;
        for (int byteIndex = 0; byteIndex < 4 && indx < rxcount; byteIndex++) {
            value |= (uint32_t)RxData[indx++] << (byteIndex * 8);
        }
        __disable_irq();
        I2C_REGISTERS[startREG++] = value;
        __enable_irq();
    }

    // Control PB0–PB2, PB10–PB14 based on I2C_REGISTERS[8–15]
    for (int i = 0; i < 8; i++) {
        uint16_t pin;
        if (i < 3) {
            pin = GPIO_PIN_0 << i;
        } else if (i == 3) {
            pin = GPIO_PIN_10;
        } else if (i == 4) {
            pin = GPIO_PIN_11;
        } else {
            pin = GPIO_PIN_12 << (i - 5);
        }

        HAL_GPIO_WritePin(GPIOB, pin, I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }

    // Read digital inputs into I2C_REGISTERS[24–31]
    __disable_irq();
    I2C_REGISTERS[24] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
    I2C_REGISTERS[25] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
    I2C_REGISTERS[26] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
    I2C_REGISTERS[27] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
    I2C_REGISTERS[28] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
    I2C_REGISTERS[29] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
    I2C_REGISTERS[30] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
    I2C_REGISTERS[31] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
    __enable_irq();

    // Clear receive buffer
    memset(RxData, 0, RxSIZE);
    rxcount = 0;
}


void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
    HAL_I2C_EnableListen_IT(hi2c);
}

//void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
//{
//    if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // Master wants to transmit
//    {
//        rxcount = 0;  // Reset the Rx count
//        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_FIRST_FRAME);
//    }
//    else
//    {
//        // Handle read request from master
//        startPosition = RxData[0];  // The first byte is the register address
//        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[startPosition], 1, I2C_FIRST_FRAME);
//    }
//}

//void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
//{
//    if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // Master wants to transmit
//    {
//        rxcount = 0;  // Reset the Rx count
//        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_FIRST_FRAME);
//    }
//    else
//    {
//        // Handle read request from master
//        startPosition = RxData[0];  // The first byte is the register address
//        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[startPosition], sizeof(uint32_t), I2C_FIRST_FRAME);
//    }
//}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
    if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // Master writes to slave
    {
        rxcount = 0;
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_FIRST_FRAME);
    }
    else  // Master reads from slave
    {
        // Use the last received register address for the read operation
        uint8_t reg_to_read = last_reg_address;
        if (reg_to_read >= REGISTER_COUNT) { // Use REGISTER_COUNT defined in i2c_slave.c
            reg_to_read = 0;  // Fallback
        }
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&I2C_REGISTERS[reg_to_read], sizeof(uint32_t), I2C_FIRST_FRAME);
    }
}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
    rxcount++;
    // If this is the *first* byte received in a master write (which is the register address)
    if (rxcount == 1 && bytesRrecvd == 0) // Assuming bytesRrecvd tracks if a new transaction started
    {
        last_reg_address = RxData[0]; // Store the register address
    }

    if (rxcount < RxSIZE)
    {
        if (rxcount == RxSIZE - 1)
        {
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_LAST_FRAME);
        }
        else
        {
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData + rxcount, 1, I2C_NEXT_FRAME);
        }
    }

    if (rxcount == RxSIZE || hi2c->XferSize == 0) // Consider if XferSize becomes 0 indicating end of transfer
    {
        process_data();  // Process received data
    }
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
    uint32_t errorcode = HAL_I2C_GetError(hi2c);
    if (errorcode == HAL_I2C_ERROR_AF)  // Acknowledge failure
    {
        // Process the received data in case of an ACK failure
        process_data();
    }
    else if (errorcode == HAL_I2C_ERROR_BERR)  // Bus error
    {
        HAL_I2C_DeInit(hi2c);
        HAL_I2C_Init(hi2c);  // Reinitialize the I2C
        memset(RxData, '\0', RxSIZE);  // Reset the Rx buffer
        rxcount = 0;  // Reset the count
    }

    HAL_I2C_EnableListen_IT(hi2c);  // Re-enable listen mode
}
