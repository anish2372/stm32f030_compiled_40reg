/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c_slave.h"
#include "string.h"
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h> // Add this line

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/**
  * @brief  Kalman Filter structure definition.
  */
typedef struct {
    float Q;  // Process noise covariance
    float R;  // Measurement noise covariance
    float P;  // Estimate error covariance
    float K;  // Kalman gain
    float x;  // Estimated state
} KalmanFilter;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ADC_CHANNELS 8
#define NOISE_THRESHOLD 10       // Raw ADC noise threshold
#define CALIBRATION_SAMPLES 100  // Samples for zero-current calibration
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

I2C_HandleTypeDef hi2c1;

volatile bool adc_done = false;


/* USER CODE BEGIN PV */
uint32_t ADC_Reads[ADC_CHANNELS];
extern uint32_t I2C_REGISTERS[41];
uint32_t lastButtonState[ADC_CHANNELS] = {0};

// ADC processing variables
float kalman_output[ADC_CHANNELS] = {0.0f};
float moving_avg[ADC_CHANNELS] = {0.0f};
uint32_t max_value[ADC_CHANNELS] = {0};
uint16_t zero_count[ADC_CHANNELS] = {0};
uint32_t currentButtonState[ADC_CHANNELS];
bool sampling[ADC_CHANNELS] = {false};
bool calibration_done = false;
uint32_t calibration_data[ADC_CHANNELS] = {0};

// Kalman Filters for each ADC channel
KalmanFilter kalmanFilters[ADC_CHANNELS];

// LED pin mapping
const uint16_t ledPins[ADC_CHANNELS] = {
    GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2,
    GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12,
    GPIO_PIN_13, GPIO_PIN_14
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void Kalman_Init(KalmanFilter *kf, float q, float r);
float Kalman_Update(KalmanFilter *kf, float measurement);
void Perform_Calibration(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
  * @brief Initializes Kalman Filter
  */
void Kalman_Init(KalmanFilter *kf, float q, float r) {
    kf->Q = q;
    kf->R = r;
    kf->P = 1.0f;
    kf->x = 0.0f;
}

/**
  * @brief Updates Kalman Filter with new measurement
  */
float Kalman_Update(KalmanFilter *kf, float measurement) {
    // Prediction update
    kf->P = kf->P + kf->Q;

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
    kf->x = kf->x + kf->K * (measurement - kf->x);
    kf->P = (1 - kf->K) * kf->P;

    return kf->x;
}

/**
  * @brief Performs zero-current calibration
  */
void Perform_Calibration(void) {
    uint32_t sums[ADC_CHANNELS] = {0};

    // Take multiple samples
    for (int s = 0; s < CALIBRATION_SAMPLES; s++) {
        HAL_ADC_Start_DMA(&hadc, ADC_Reads, ADC_CHANNELS);
        HAL_Delay(1);

        for (int i = 0; i < ADC_CHANNELS; i++) {
            sums[i] += ADC_Reads[i];
        }
        HAL_Delay(5);
    }

    // Calculate averages
    for (int i = 0; i < ADC_CHANNELS; i++) {
        calibration_data[i] = sums[i] / CALIBRATION_SAMPLES;
        I2C_REGISTERS[40 + i] = calibration_data[i]; // Store in registers 40-47
    }

    calibration_done = true;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC_Init();
  MX_I2C1_Init();

  /* USER CODE BEGIN 2 */
  // Enable I2C slave listen mode
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
    Error_Handler();
  }

  // Initialize Kalman Filters with tuned parameters
  for (int i = 0; i < ADC_CHANNELS; i++) {
    Kalman_Init(&kalmanFilters[i], 1.0f, 100.0f);
//	  Kalman_Init(&kalmanFilters[i], 4.0f, 50.0f);
  }

  // Perform initial calibration
  Perform_Calibration();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // Start ADC conversion
//    HAL_ADC_Start_DMA(&hadc, ADC_Reads, ADC_CHANNELS);
//    HAL_Delay(1);  // Allow sampling to complete
	  adc_done = false;
	  HAL_ADC_Start_DMA(&hadc, ADC_Reads, ADC_CHANNELS);
	  while (!adc_done);  // Wait here until DMA completes safely
	  for (int i = 0; i < ADC_CHANNELS; i++) {
	      uint32_t current_sample = ADC_Reads[i];
	      int32_t adjusted_sample = (int32_t)current_sample - (int32_t)calibration_data[i];

	      // Save raw ADC data to registers 0â€“7
	      __disable_irq();
	      I2C_REGISTERS[i] = current_sample;
	      __enable_irq();

	      // Zero detection: if adjusted value is near zero
	      if (abs(adjusted_sample) < NOISE_THRESHOLD) {
	          zero_count[i]++;
	          if (zero_count[i] >= 5) {  // 5 consecutive near-zero readings
	              max_value[i] = 0;
	              Kalman_Init(&kalmanFilters[i], 1.0f, 100.0f);
	          }
	      } else {
	          zero_count[i] = 0;
	          if ((uint32_t)abs(adjusted_sample) > max_value[i]) {
	              max_value[i] = (uint32_t)abs(adjusted_sample);
	          } else {
	              max_value[i] *= 0.998f;  // decay
	              if (max_value[i] < 1) max_value[i] = 0;
	          }
	      }

	      float filtered_peak = Kalman_Update(&kalmanFilters[i], (float)max_value[i]);
	      float amps = filtered_peak * 0.00403f;
	      __disable_irq();
	      I2C_REGISTERS[32 + i] = (uint32_t)(amps * 1000.0f);  // store in mA
	      __enable_irq();
	  }



    // Process each ADC channel


    // [Rest of your existing code for digital inputs and button handling]
    // ... (Unchanged from your original implementation) ...
    // Update digital input feedback values to I2C registers 16-23
    __disable_irq();
    // write I2C_REGISTERS[x]

           I2C_REGISTERS[16] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
           I2C_REGISTERS[17] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
           I2C_REGISTERS[18] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
           I2C_REGISTERS[19] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0);
           I2C_REGISTERS[20] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
           I2C_REGISTERS[21] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
           I2C_REGISTERS[22] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
           I2C_REGISTERS[23] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);

           // Read the button states (GPIO pins configured as inputs with pull-down)
           currentButtonState[0] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);   // PF7
           currentButtonState[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);  // PA15
           currentButtonState[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);   // PB3
           currentButtonState[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);   // PB4
           currentButtonState[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);   // PB5
           currentButtonState[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);   // PB8
           currentButtonState[6] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);  // PC13 (Note: PC13 is out of order here, but consistent with original code)
           currentButtonState[7] =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);   // PB9


           // Update I2C_REGISTERS 24-31 with the current button states using memcpy for efficiency
           memcpy(&I2C_REGISTERS[24], currentButtonState, ADC_CHANNELS * sizeof(uint32_t));

           // Toggle LEDs based on button states (I2C_REGISTERS 8-15)
           // This implements a simple toggle functionality for LEDs linked to button presses.
           for (int i = 0; i < ADC_CHANNELS; i++) {
               // Check for a falling edge (button pressed: was HIGH, now LOW)
               if (currentButtonState[i] == GPIO_PIN_RESET && lastButtonState[i] == GPIO_PIN_SET) {
                   // Toggle the corresponding LED state in I2C_REGISTERS (0 to 1, or 1 to 0)
                   I2C_REGISTERS[8 + i] ^= 1; // XOR with 1 to toggle
                   // Update the physical state of the LEDs based on the toggled register value
                   HAL_GPIO_WritePin(GPIOB, ledPins[i], I2C_REGISTERS[8 + i] ? GPIO_PIN_SET : GPIO_PIN_RESET);
               }
               lastButtonState[i] = currentButtonState[i]; // Update last button state for the next iteration
           }
           __enable_irq();
    HAL_Delay(100);  // Main loop delay
  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; // PLL is not used in this configuration
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1; // Configure HCLK, SYSCLK, and PCLK1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI; // System clock sourced from HSI
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1; // AHB clock not divided
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1; // APB1 clock not divided

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1; // Select I2C1 peripheral clock
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI; // I2C1 clock sourced from HSI
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1; // Use ADC1 peripheral
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1; // Asynchronous clock, no prescaler
  hadc.Init.Resolution = ADC_RESOLUTION_12B; // 12-bit resolution
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT; // Right alignment of data
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD; // Scan all configured channels in forward direction
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV; // End of conversion flag for single conversion
  hadc.Init.LowPowerAutoWait = DISABLE; // Disable low power auto wait
  hadc.Init.LowPowerAutoPowerOff = DISABLE; // Disable low power auto power off
  hadc.Init.ContinuousConvMode = DISABLE; // Disable continuous conversion mode
  hadc.Init.DiscontinuousConvMode = DISABLE; // Disable discontinuous conversion mode
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START; // Conversion triggered by software
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE; // No external trigger edge
  hadc.Init.DMAContinuousRequests = ENABLE; // Enable DMA continuous requests for ADC
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED; // Preserve data on overrun
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
   * Channels are configured sequentially for scan mode.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER; // Rank is determined by channel number in scan mode
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5; // Shortest sampling time
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_1;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_2;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_3;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_4;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_6;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfig.Channel = ADC_CHANNEL_7;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1; // Use I2C1 peripheral
  hi2c1.Init.Timing = 0x2000090E; // I2C timing register value (specific to target frequency)
  hi2c1.Init.OwnAddress1 = 36; // Primary I2C slave address
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; // 7-bit addressing mode
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE; // Enable dual addressing mode
  hi2c1.Init.OwnAddress2 = 0x45<<1; // Secondary I2C slave address (shifted left by 1 as per standard)
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK; // No mask for secondary address
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE; // Enable general call recognition
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; // Disable clock stretching
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  // Configure Analogue filter (commented out as per original)
//  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
//  {
//    Error_Handler();
//  }

  // Configure Digital filter (commented out as per original)
//  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
//  {
//    Error_Handler();
//  }

  /* USER CODE BEGIN I2C1_Init 2 */
  // Set I2C interrupt priorities. Lower priority than ADC DMA (0,0) to prevent preemption.
  // For STM32F0 series, I2C events and errors often share a single IRQn.
  HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0); // I2C Interrupt (Events and Errors) priority group 1, subpriority 0
  HAL_NVIC_EnableIRQ(I2C1_IRQn); // Enable I2C1 global interrupt
  /* USER CODE END I2C1_Init 2 */
}

/**
  * @brief Enable DMA controller clock and configure DMA interrupts.
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE(); // Enable clock for DMA1 peripheral

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0); // ADC DMA priority is 0,0 (highest priority)
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); // Enable DMA1 Channel1 global interrupt
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  // Enable the required GPIO Ports Clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  // Configure PA0-PA7 as Analog Inputs for ADC
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; // Set mode to analog for ADC inputs
  GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down for analog pins
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  // Configure PB0, PB1, PB2, PB10, PB11, PB12, PB13, PB14 as Output Pins (for LEDs)
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 |
                        GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Set mode to push-pull output
  GPIO_InitStruct.Pull = GPIO_NOPULL; // No pull-up or pull-down for outputs
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low output speed
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  // Configure PC15, PC14, PF1, PF0, PB15, PA8, PA9, PA10 as Digital Input Pins with Pull-Down
  // These are general purpose digital inputs
  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set mode to input
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Set pull-down for input pins
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Ensure mode is set for these as well
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Ensure mode is set
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Ensure mode is set
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  // Configure PF7, PA15, PB3, PB4, PB5, PB8, PB9, PC13 as Digital Input Pins with Pull-Down
  // These are specifically for button inputs
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
    adc_done = true;
}
// This section is typically for user-defined callback functions or other custom code.
// For example, HAL_ADC_ConvCpltCallback for DMA completion, or HAL_I2C_SlaveRxCpltCallback for I2C.
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq(); // Disable global interrupts to prevent further execution
  while (1)
  {
    // Loop indefinitely, indicating a fatal error
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  * where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
